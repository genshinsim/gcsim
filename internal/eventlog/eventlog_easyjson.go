// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package eventlog

import (
	json "encoding/json"
	core "github.com/genshinsim/gcsim/pkg/core"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF1fb7bcaDecodeGithubComGenshinsimGcsimInternalEventlog(in *jlexer.Lexer, out *EventArr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(EventArr, 0, 8)
			} else {
				*out = EventArr{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Event
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Event)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1fb7bcaEncodeGithubComGenshinsimGcsimInternalEventlog(out *jwriter.Writer, in EventArr) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v EventArr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF1fb7bcaEncodeGithubComGenshinsimGcsimInternalEventlog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventArr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF1fb7bcaEncodeGithubComGenshinsimGcsimInternalEventlog(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventArr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF1fb7bcaDecodeGithubComGenshinsimGcsimInternalEventlog(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventArr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF1fb7bcaDecodeGithubComGenshinsimGcsimInternalEventlog(l, v)
}
func easyjsonF1fb7bcaDecodeGithubComGenshinsimGcsimInternalEventlog1(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.Typ = core.LogSource(core.LogSourceFromString[in.String()])
		case "frame":
			out.F = int(in.Int())
		case "ended":
			out.Ended = int(in.Int())
		case "char_index":
			out.SrcChar = int(in.Int())
		case "msg":
			out.Msg = string(in.UnsafeString())
		case "logs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Logs = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v4 interface{}
					if m, ok := v4.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v4.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v4 = in.Interface()
					}
					(out.Logs)[key] = v4
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ordering":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Ordering = make(map[string]int)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v5 int
					v5 = int(in.Int())
					(out.Ordering)[key] = v5
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF1fb7bcaEncodeGithubComGenshinsimGcsimInternalEventlog1(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.String(in.Typ.String())
	}
	{
		const prefix string = ",\"frame\":"
		out.RawString(prefix)
		out.Int(int(in.F))
	}
	{
		const prefix string = ",\"ended\":"
		out.RawString(prefix)
		out.Int(int(in.Ended))
	}
	{
		const prefix string = ",\"char_index\":"
		out.RawString(prefix)
		out.Int(int(in.SrcChar))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v6First := true
			for v6Name, v6Value := range in.Logs {
				if v6First {
					v6First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v6Name))
				out.RawByte(':')
				if m, ok := v6Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v6Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v6Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ordering\":"
		out.RawString(prefix)
		if in.Ordering == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v7First := true
			for v7Name, v7Value := range in.Ordering {
				if v7First {
					v7First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v7Name))
				out.RawByte(':')
				out.Int(int(v7Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF1fb7bcaEncodeGithubComGenshinsimGcsimInternalEventlog1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF1fb7bcaEncodeGithubComGenshinsimGcsimInternalEventlog1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF1fb7bcaDecodeGithubComGenshinsimGcsimInternalEventlog1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF1fb7bcaDecodeGithubComGenshinsimGcsimInternalEventlog1(l, v)
}
