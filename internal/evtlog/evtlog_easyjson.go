// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package evtlog

import (
	json "encoding/json"
	core "github.com/genshinsim/gcsim/pkg/core"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog(in *jlexer.Lexer, out *keyVal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "val":
			if m, ok := out.Val.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Val.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Val = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog(out *jwriter.Writer, in keyVal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"val\":"
		out.RawString(prefix)
		if m, ok := in.Val.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Val.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Val))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v keyVal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v keyVal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *keyVal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *keyVal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog(l, v)
}
func easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog1(in *jlexer.Lexer, out *EventArr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(EventArr, 0, 8)
			} else {
				*out = EventArr{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 *Event
			if in.IsNull() {
				in.Skip()
				v1 = nil
			} else {
				if v1 == nil {
					v1 = new(Event)
				}
				(*v1).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog1(out *jwriter.Writer, in EventArr) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			if v3 == nil {
				out.RawString("null")
			} else {
				(*v3).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v EventArr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventArr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventArr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventArr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog1(l, v)
}
func easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog2(in *jlexer.Lexer, out *Event) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Typ = core.LogSource(in.Int())
		case "frame":
			out.F = int(in.Int())
		case "ended":
			out.Ended = int(in.Int())
		case "char_index":
			out.SrcChar = int(in.Int())
		case "msg":
			out.Msg = string(in.String())
		case "logs":
			if in.IsNull() {
				in.Skip()
				out.Logs = nil
			} else {
				in.Delim('[')
				if out.Logs == nil {
					if !in.IsDelim(']') {
						out.Logs = make([]keyVal, 0, 2)
					} else {
						out.Logs = []keyVal{}
					}
				} else {
					out.Logs = (out.Logs)[:0]
				}
				for !in.IsDelim(']') {
					var v4 keyVal
					(v4).UnmarshalEasyJSON(in)
					out.Logs = append(out.Logs, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog2(out *jwriter.Writer, in Event) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Typ))
	}
	{
		const prefix string = ",\"frame\":"
		out.RawString(prefix)
		out.Int(int(in.F))
	}
	{
		const prefix string = ",\"ended\":"
		out.RawString(prefix)
		out.Int(int(in.Ended))
	}
	{
		const prefix string = ",\"char_index\":"
		out.RawString(prefix)
		out.Int(int(in.SrcChar))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Logs {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Event) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Event) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Event) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Event) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog2(l, v)
}
func easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog3(in *jlexer.Lexer, out *Ctrl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog3(out *jwriter.Writer, in Ctrl) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ctrl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ctrl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonCdc2ed07EncodeGithubComGenshinsimGcsimInternalEvtlog3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ctrl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ctrl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonCdc2ed07DecodeGithubComGenshinsimGcsimInternalEvtlog3(l, v)
}
