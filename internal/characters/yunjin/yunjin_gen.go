// Code generated by "pipeline"; DO NOT EDIT.
package yunjin

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	1: {"hold", "perfect"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Yunjin, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][][]float64{
		{attack_1},
		{attack_2},
		attack_3,
		attack_4,
		{attack_5},
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.40506,
		0.43803,
		0.471,
		0.5181,
		0.55107,
		0.58875,
		0.64056,
		0.69237,
		0.74418,
		0.8007,
		0.85722,
		0.91374,
		0.97026,
		1.02678,
		1.0833,
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.40248,
		0.43524,
		0.468,
		0.5148,
		0.54756,
		0.585,
		0.63648,
		0.68796,
		0.73944,
		0.7956,
		0.85176,
		0.90792,
		0.96408,
		1.02024,
		1.0764,
	}
	// attack: attack_3 = [2 3]
	attack_3 = [][]float64{
		{
			0.22962,
			0.24831,
			0.267,
			0.2937,
			0.31239,
			0.33375,
			0.36312,
			0.39249,
			0.42186,
			0.4539,
			0.48594,
			0.51798,
			0.55002,
			0.58206,
			0.6141,
		},
		{
			0.2752,
			0.2976,
			0.32,
			0.352,
			0.3744,
			0.4,
			0.4352,
			0.4704,
			0.5056,
			0.544,
			0.5824,
			0.6208,
			0.6592,
			0.6976,
			0.736,
		},
	}
	// attack: attack_4 = [4 5]
	attack_4 = [][]float64{
		{
			0.23994,
			0.25947,
			0.279,
			0.3069,
			0.32643,
			0.34875,
			0.37944,
			0.41013,
			0.44082,
			0.4743,
			0.50778,
			0.54126,
			0.57474,
			0.60822,
			0.6417,
		},
		{
			0.2881,
			0.31155,
			0.335,
			0.3685,
			0.39195,
			0.41875,
			0.4556,
			0.49245,
			0.5293,
			0.5695,
			0.6097,
			0.6499,
			0.6901,
			0.7303,
			0.7705,
		},
	}
	// attack: attack_5 = [6]
	attack_5 = []float64{
		0.67338,
		0.72819,
		0.783,
		0.8613,
		0.91611,
		0.97875,
		1.06488,
		1.15101,
		1.23714,
		1.3311,
		1.42506,
		1.51902,
		1.61298,
		1.70694,
		1.8009,
	}
	// attack: charge = [7]
	charge = []float64{
		1.2169,
		1.31595,
		1.415,
		1.5565,
		1.65555,
		1.76875,
		1.9244,
		2.08005,
		2.2357,
		2.4055,
		2.600062,
		2.828868,
		3.057673,
		3.286479,
		3.536085,
	}
	// skill: skillDmg = [2 3 4]
	skillDmg = [][]float64{
		{
			1.4912,
			1.60304,
			1.71488,
			1.864,
			1.97584,
			2.08768,
			2.2368,
			2.38592,
			2.53504,
			2.68416,
			2.83328,
			2.9824,
			3.1688,
			3.3552,
			3.5416,
		},
		{
			2.6096,
			2.80532,
			3.00104,
			3.262,
			3.45772,
			3.65344,
			3.9144,
			4.17536,
			4.43632,
			4.69728,
			4.95824,
			5.2192,
			5.5454,
			5.8716,
			6.1978,
		},
		{
			3.728,
			4.0076,
			4.2872,
			4.66,
			4.9396,
			5.2192,
			5.592,
			5.9648,
			6.3376,
			6.7104,
			7.0832,
			7.456,
			7.922,
			8.388,
			8.854,
		},
	}
	// skill: skillShieldFlat = [1]
	skillShieldFlat = []float64{
		1155.4323,
		1270.9916,
		1396.1808,
		1531,
		1675.4491,
		1829.5282,
		1993.2372,
		2166.5762,
		2349.545,
		2542.1438,
		2744.3726,
		2956.2312,
		3177.72,
		3408.8384,
		3649.587,
	}
	// skill: skillShieldPct = [0]
	skillShieldPct = []float64{
		0.12,
		0.129,
		0.138,
		0.15,
		0.159,
		0.168,
		0.18,
		0.192,
		0.204,
		0.216,
		0.228,
		0.24,
		0.255,
		0.27,
		0.285,
	}
	// burst: burstBuff = [1]
	burstBuff = []float64{
		0.3216,
		0.34572,
		0.36984,
		0.402,
		0.42612,
		0.45024,
		0.4824,
		0.51456,
		0.54672,
		0.57888,
		0.61104,
		0.6432,
		0.6834,
		0.7236,
		0.7638,
	}
	// burst: burstDmg = [0]
	burstDmg = []float64{
		2.44,
		2.623,
		2.806,
		3.05,
		3.233,
		3.416,
		3.66,
		3.904,
		4.148,
		4.392,
		4.636,
		4.88,
		5.185,
		5.49,
		5.795,
	}
)
