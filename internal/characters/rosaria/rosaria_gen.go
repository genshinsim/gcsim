// Code generated by "pipeline"; DO NOT EDIT.
package rosaria

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	1: {"nobehind"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Rosaria, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][][]float64{
		{attack_1},
		{attack_2},
		attack_3,
		{attack_4},
		attack_5,
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.5246,
		0.5673,
		0.61,
		0.671,
		0.7137,
		0.7625,
		0.8296,
		0.8967,
		0.9638,
		1.037,
		1.1102,
		1.1834,
		1.2566,
		1.3298,
		1.403,
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.516,
		0.558,
		0.6,
		0.66,
		0.702,
		0.75,
		0.816,
		0.882,
		0.948,
		1.02,
		1.092,
		1.164,
		1.236,
		1.308,
		1.38,
	}
	// attack: attack_3 = [2 2]
	attack_3 = [][]float64{
		{
			0.3182,
			0.3441,
			0.37,
			0.407,
			0.4329,
			0.4625,
			0.5032,
			0.5439,
			0.5846,
			0.629,
			0.6734,
			0.7178,
			0.7622,
			0.8066,
			0.851,
		},
		{
			0.3182,
			0.3441,
			0.37,
			0.407,
			0.4329,
			0.4625,
			0.5032,
			0.5439,
			0.5846,
			0.629,
			0.6734,
			0.7178,
			0.7622,
			0.8066,
			0.851,
		},
	}
	// attack: attack_4 = [3]
	attack_4 = []float64{
		0.6966,
		0.7533,
		0.81,
		0.891,
		0.9477,
		1.0125,
		1.1016,
		1.1907,
		1.2798,
		1.377,
		1.4742,
		1.5714,
		1.6686,
		1.7658,
		1.863,
	}
	// attack: attack_5 = [4 5]
	attack_5 = [][]float64{
		{
			0.41624,
			0.45012,
			0.484,
			0.5324,
			0.56628,
			0.605,
			0.65824,
			0.71148,
			0.76472,
			0.8228,
			0.88088,
			0.93896,
			0.99704,
			1.05512,
			1.1132,
		},
		{
			0.43,
			0.465,
			0.5,
			0.55,
			0.585,
			0.625,
			0.68,
			0.735,
			0.79,
			0.85,
			0.91,
			0.97,
			1.03,
			1.09,
			1.15,
		},
	}
	// attack: nc = [6]
	nc = []float64{
		1.3674,
		1.4787,
		1.59,
		1.749,
		1.8603,
		1.9875,
		2.1624,
		2.3373,
		2.5122,
		2.703,
		2.8938,
		3.0846,
		3.2754,
		3.4662,
		3.657,
	}
	// skill: skill = [0 1]
	skill = [][]float64{
		{
			0.584,
			0.6278,
			0.6716,
			0.73,
			0.7738,
			0.8176,
			0.876,
			0.9344,
			0.9928,
			1.0512,
			1.1096,
			1.168,
			1.241,
			1.314,
			1.387,
		},
		{
			1.36,
			1.462,
			1.564,
			1.7,
			1.802,
			1.904,
			2.04,
			2.176,
			2.312,
			2.448,
			2.584,
			2.72,
			2.89,
			3.06,
			3.23,
		},
	}
	// burst: burst = [0 1]
	burst = [][]float64{
		{
			1.04,
			1.118,
			1.196,
			1.3,
			1.378,
			1.456,
			1.56,
			1.664,
			1.768,
			1.872,
			1.976,
			2.08,
			2.21,
			2.34,
			2.47,
		},
		{
			1.52,
			1.634,
			1.748,
			1.9,
			2.014,
			2.128,
			2.28,
			2.432,
			2.584,
			2.736,
			2.888,
			3.04,
			3.23,
			3.42,
			3.61,
		},
	}
	// burst: burstDot = [2]
	burstDot = []float64{
		1.32,
		1.419,
		1.518,
		1.65,
		1.749,
		1.848,
		1.98,
		2.112,
		2.244,
		2.376,
		2.508,
		2.64,
		2.805,
		2.97,
		3.135,
	}
)
