// Code generated by "pipeline"; DO NOT EDIT.
package lyney

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	3: {"travel"},
	7: {"hold", "travel", "c6_travel", "weakspot"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Lyney, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][][]float64{
		{attack_1},
		{attack_2},
		attack_3,
		{attack_4},
	}
)

var (
	// attack: aim = [8]
	aim = []float64{
		0.4386,
		0.4743,
		0.51,
		0.561,
		0.5967,
		0.6375,
		0.6936,
		0.7497,
		0.8058,
		0.867,
		0.9282,
		0.9894,
		1.0506,
		1.1118,
		1.173,
	}
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.38786,
		0.41943,
		0.451,
		0.4961,
		0.52767,
		0.56375,
		0.61336,
		0.66297,
		0.71258,
		0.7667,
		0.82082,
		0.87494,
		0.92906,
		0.98318,
		1.0373,
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.38012,
		0.41106,
		0.442,
		0.4862,
		0.51714,
		0.5525,
		0.60112,
		0.64974,
		0.69836,
		0.7514,
		0.80444,
		0.85748,
		0.91052,
		0.96356,
		1.0166,
	}
	// attack: attack_3 = [2 2]
	attack_3 = [][]float64{
		{
			0.27262,
			0.29481,
			0.317,
			0.3487,
			0.37089,
			0.39625,
			0.43112,
			0.46599,
			0.50086,
			0.5389,
			0.57694,
			0.61498,
			0.65302,
			0.69106,
			0.7291,
		},
		{
			0.27262,
			0.29481,
			0.317,
			0.3487,
			0.37089,
			0.39625,
			0.43112,
			0.46599,
			0.50086,
			0.5389,
			0.57694,
			0.61498,
			0.65302,
			0.69106,
			0.7291,
		},
	}
	// attack: attack_4 = [4]
	attack_4 = []float64{
		0.56932,
		0.61566,
		0.662,
		0.7282,
		0.77454,
		0.8275,
		0.90032,
		0.97314,
		1.04596,
		1.1254,
		1.20484,
		1.28428,
		1.36372,
		1.44316,
		1.5226,
	}
	// attack: fullaim = [9]
	fullaim = []float64{
		1.24,
		1.333,
		1.426,
		1.55,
		1.643,
		1.736,
		1.86,
		1.984,
		2.108,
		2.232,
		2.356,
		2.48,
		2.635,
		2.79,
		2.945,
	}
	// attack: prop = [10]
	prop = []float64{
		1.728,
		1.8576,
		1.9872,
		2.16,
		2.2896,
		2.4192,
		2.592,
		2.7648,
		2.9376,
		3.1104,
		3.2832,
		3.456,
		3.672,
		3.888,
		4.104,
	}
	// attack: propAligned = [15]
	propAligned = []float64{
		0.27552,
		0.296184,
		0.316848,
		0.3444,
		0.365064,
		0.385728,
		0.41328,
		0.440832,
		0.468384,
		0.495936,
		0.523488,
		0.55104,
		0.58548,
		0.61992,
		0.65436,
	}
	// attack: propHP = [12]
	propHP = []float64{
		0.64,
		0.688,
		0.736,
		0.8,
		0.848,
		0.896,
		0.96,
		1.024,
		1.088,
		1.152,
		1.216,
		1.28,
		1.36,
		1.44,
		1.52,
	}
	// attack: propPyrotechnic = [14]
	propPyrotechnic = []float64{
		2.12,
		2.279,
		2.438,
		2.65,
		2.809,
		2.968,
		3.18,
		3.392,
		3.604,
		3.816,
		4.028,
		4.24,
		4.505,
		4.77,
		5.035,
	}
	// skill: skill = [0]
	skill = []float64{
		1.672,
		1.7974,
		1.9228,
		2.09,
		2.2154,
		2.3408,
		2.508,
		2.6752,
		2.8424,
		3.0096,
		3.1768,
		3.344,
		3.553,
		3.762,
		3.971,
	}
	// skill: skillBonus = [1]
	skillBonus = []float64{
		0.532,
		0.5719,
		0.6118,
		0.665,
		0.7049,
		0.7448,
		0.798,
		0.8512,
		0.9044,
		0.9576,
		1.0108,
		1.064,
		1.1305,
		1.197,
		1.2635,
	}
	// burst: burst = [0]
	burst = []float64{
		1.54,
		1.6555,
		1.771,
		1.925,
		2.0405,
		2.156,
		2.31,
		2.464,
		2.618,
		2.772,
		2.926,
		3.08,
		3.2725,
		3.465,
		3.6575,
	}
	// burst: explosiveFirework = [1]
	explosiveFirework = []float64{
		4.14,
		4.4505,
		4.761,
		5.175,
		5.4855,
		5.796,
		6.21,
		6.624,
		7.038,
		7.452,
		7.866,
		8.28,
		8.7975,
		9.315,
		9.8325,
	}
)
