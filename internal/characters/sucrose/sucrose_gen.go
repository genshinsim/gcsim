// Code generated by "pipeline"; DO NOT EDIT.
package sucrose

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	5: {"collision"},
	6: {"collision"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Sucrose, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][]float64{
		attack_1,
		attack_2,
		attack_3,
		attack_4,
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.33464,
		0.359738,
		0.384836,
		0.4183,
		0.443398,
		0.468496,
		0.50196,
		0.535424,
		0.568888,
		0.602352,
		0.635816,
		0.66928,
		0.71111,
		0.75294,
		0.79477,
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.30616,
		0.329122,
		0.352084,
		0.3827,
		0.405662,
		0.428624,
		0.45924,
		0.489856,
		0.520472,
		0.551088,
		0.581704,
		0.61232,
		0.65059,
		0.68886,
		0.72713,
	}
	// attack: attack_3 = [2]
	attack_3 = []float64{
		0.38448,
		0.413316,
		0.442152,
		0.4806,
		0.509436,
		0.538272,
		0.57672,
		0.615168,
		0.653616,
		0.692064,
		0.730512,
		0.76896,
		0.81702,
		0.86508,
		0.91314,
	}
	// attack: attack_4 = [3]
	attack_4 = []float64{
		0.479176,
		0.515114,
		0.551052,
		0.59897,
		0.634908,
		0.670846,
		0.718764,
		0.766682,
		0.814599,
		0.862517,
		0.910434,
		0.958352,
		1.018249,
		1.078146,
		1.138043,
	}
	// attack: charge = [4]
	charge = []float64{
		1.2016,
		1.29172,
		1.38184,
		1.502,
		1.59212,
		1.68224,
		1.8024,
		1.92256,
		2.04272,
		2.16288,
		2.28304,
		2.4032,
		2.5534,
		2.7036,
		2.8538,
	}
	// attack: collision = [6]
	collision = []float64{
		0.568288,
		0.614544,
		0.6608,
		0.72688,
		0.773136,
		0.826,
		0.898688,
		0.971376,
		1.044064,
		1.12336,
		1.202656,
		1.281952,
		1.361248,
		1.440544,
		1.51984,
	}
	// attack: highPlunge = [8]
	highPlunge = []float64{
		1.419344,
		1.534872,
		1.6504,
		1.81544,
		1.930968,
		2.063,
		2.244544,
		2.426088,
		2.607632,
		2.80568,
		3.003728,
		3.201776,
		3.399824,
		3.597872,
		3.79592,
	}
	// attack: lowPlunge = [7]
	lowPlunge = []float64{
		1.136335,
		1.228828,
		1.32132,
		1.453452,
		1.545944,
		1.65165,
		1.796995,
		1.94234,
		2.087686,
		2.246244,
		2.404802,
		2.563361,
		2.721919,
		2.880478,
		3.039036,
	}
	// skill: skill = [0]
	skill = []float64{
		2.112,
		2.2704,
		2.4288,
		2.64,
		2.7984,
		2.9568,
		3.168,
		3.3792,
		3.5904,
		3.8016,
		4.0128,
		4.224,
		4.488,
		4.752,
		5.016,
	}
	// burst: burstAbsorb = [1]
	burstAbsorb = []float64{
		0.44,
		0.473,
		0.506,
		0.55,
		0.583,
		0.616,
		0.66,
		0.704,
		0.748,
		0.792,
		0.836,
		0.88,
		0.935,
		0.99,
		1.045,
	}
	// burst: burstDot = [0]
	burstDot = []float64{
		1.48,
		1.591,
		1.702,
		1.85,
		1.961,
		2.072,
		2.22,
		2.368,
		2.516,
		2.664,
		2.812,
		2.96,
		3.145,
		3.33,
		3.515,
	}
)
