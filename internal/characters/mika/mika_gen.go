// Code generated by "pipeline"; DO NOT EDIT.
package mika

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	1: {"hold"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Mika, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][][]float64{
		{attack_1},
		{attack_2},
		{attack_3},
		attack_4,
		{attack_5},
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.432632,
		0.467846,
		0.50306,
		0.553366,
		0.58858,
		0.628825,
		0.684162,
		0.739498,
		0.794835,
		0.855202,
		0.915569,
		0.975936,
		1.036304,
		1.096671,
		1.157038,
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.415019,
		0.448799,
		0.48258,
		0.530838,
		0.564619,
		0.603225,
		0.656309,
		0.709393,
		0.762476,
		0.820386,
		0.878296,
		0.936205,
		0.994115,
		1.052024,
		1.109934,
	}
	// attack: attack_3 = [2]
	attack_3 = []float64{
		0.545034,
		0.589397,
		0.63376,
		0.697136,
		0.741499,
		0.7922,
		0.861914,
		0.931627,
		1.001341,
		1.077392,
		1.153443,
		1.229494,
		1.305546,
		1.381597,
		1.457648,
	}
	// attack: attack_4 = [3 3]
	attack_4 = [][]float64{
		{
			0.276146,
			0.298623,
			0.3211,
			0.35321,
			0.375687,
			0.401375,
			0.436696,
			0.472017,
			0.507338,
			0.54587,
			0.584402,
			0.622934,
			0.661466,
			0.699998,
			0.73853,
		},
		{
			0.276146,
			0.298623,
			0.3211,
			0.35321,
			0.375687,
			0.401375,
			0.436696,
			0.472017,
			0.507338,
			0.54587,
			0.584402,
			0.622934,
			0.661466,
			0.699998,
			0.73853,
		},
	}
	// attack: attack_5 = [5]
	attack_5 = []float64{
		0.708743,
		0.766432,
		0.82412,
		0.906532,
		0.96422,
		1.03015,
		1.120803,
		1.211456,
		1.30211,
		1.401004,
		1.499898,
		1.598793,
		1.697687,
		1.796582,
		1.895476,
	}
	// attack: charge = [6]
	charge = []float64{
		1.12746,
		1.21923,
		1.311,
		1.4421,
		1.53387,
		1.63875,
		1.78296,
		1.92717,
		2.07138,
		2.2287,
		2.38602,
		2.54334,
		2.70066,
		2.85798,
		3.0153,
	}
	// skill: atkSpdBuff = [3]
	atkSpdBuff = []float64{
		0.13,
		0.14,
		0.15,
		0.16,
		0.17,
		0.18,
		0.19,
		0.2,
		0.21,
		0.22,
		0.23,
		0.24,
		0.25,
		0.25,
		0.25,
	}
	// skill: skillExplode = [2]
	skillExplode = []float64{
		0.252,
		0.2709,
		0.2898,
		0.315,
		0.3339,
		0.3528,
		0.378,
		0.4032,
		0.4284,
		0.4536,
		0.4788,
		0.504,
		0.5355,
		0.567,
		0.5985,
	}
	// skill: skillHold = [1]
	skillHold = []float64{
		0.84,
		0.903,
		0.966,
		1.05,
		1.113,
		1.176,
		1.26,
		1.344,
		1.428,
		1.512,
		1.596,
		1.68,
		1.785,
		1.89,
		1.995,
	}
	// skill: skillPress = [0]
	skillPress = []float64{
		0.672,
		0.7224,
		0.7728,
		0.84,
		0.8904,
		0.9408,
		1.008,
		1.0752,
		1.1424,
		1.2096,
		1.2768,
		1.344,
		1.428,
		1.512,
		1.596,
	}
	// burst: burstHealF = [2]
	burstHealF = []float64{
		233.95428,
		257.35297,
		282.70154,
		310,
		339.24835,
		370.4466,
		403.59473,
		438.69275,
		475.74066,
		514.73846,
		555.68616,
		598.58374,
		643.4312,
		690.2286,
		738.9758,
	}
	// burst: burstHealFirstF = [0]
	burstHealFirstF = []float64{
		1172.0355,
		1289.2554,
		1416.2435,
		1553,
		1699.5248,
		1855.8179,
		2021.8794,
		2197.7092,
		2383.3071,
		2578.6736,
		2783.8083,
		2998.7114,
		3223.3828,
		3457.8225,
		3702.0305,
	}
	// burst: burstHealFirstP = [1]
	burstHealFirstP = []float64{
		0.12168,
		0.130806,
		0.139932,
		0.1521,
		0.161226,
		0.170352,
		0.18252,
		0.194688,
		0.206856,
		0.219024,
		0.231192,
		0.24336,
		0.25857,
		0.27378,
		0.28899,
	}
	// burst: burstHealP = [3]
	burstHealP = []float64{
		0.02432,
		0.026144,
		0.027968,
		0.0304,
		0.032224,
		0.034048,
		0.03648,
		0.038912,
		0.041344,
		0.043776,
		0.046208,
		0.04864,
		0.05168,
		0.05472,
		0.05776,
	}
)
