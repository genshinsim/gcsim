// Code generated by "pipeline"; DO NOT EDIT.
package neuvillette

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	4: {"short", "ticks"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Neuvillette, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	attack = [][]float64{
		attack_1,
		attack_2,
		attack_3,
	}
)

var (
	// attack: attack_1 = [0]
	attack_1 = []float64{
		0.5457680225372314,
		0.586700975894928,
		0.6276329755783081,
		0.6822100281715393,
		0.7231429815292358,
		0.764074981212616,
		0.8186519742012024,
		0.8732290267944336,
		0.92780601978302,
		0.9823819994926453,
		1.0369590520858765,
		1.091536045074463,
		1.1597570180892944,
		1.227977991104126,
		1.2961989641189575,
	}
	// attack: attack_2 = [1]
	attack_2 = []float64{
		0.46245598793029785,
		0.49713999032974243,
		0.531823992729187,
		0.5780699849128723,
		0.6127539873123169,
		0.6474379897117615,
		0.6936839818954468,
		0.7399299740791321,
		0.786175012588501,
		0.8324210047721863,
		0.8786659836769104,
		0.9249119758605957,
		0.9827190041542053,
		1.040526032447815,
		1.0983330011367798,
	}
	// attack: attack_3 = [2]
	attack_3 = []float64{
		0.7233759760856628,
		0.777629017829895,
		0.8318819999694824,
		0.9042199850082397,
		0.9584730267524719,
		1.0127259492874146,
		1.0850640535354614,
		1.1574020385742188,
		1.2297389507293701,
		1.302077054977417,
		1.3744139671325684,
		1.4467519521713257,
		1.5371739864349365,
		1.6275960206985474,
		1.7180180549621582,
	}
	// attack: charge = [3]
	charge = []float64{
		1.3680000305175781,
		1.4706000089645386,
		1.573199987411499,
		1.7100000381469727,
		1.812600016593933,
		1.9151999950408936,
		2.052000045776367,
		2.188800096511841,
		2.3255999088287354,
		2.462399959564209,
		2.5992000102996826,
		2.7360000610351562,
		2.9070000648498535,
		3.078000068664551,
		3.249000072479248,
	}
	// attack: chargeJudgement = [4]
	chargeJudgement = []float64{
		0.0731860026717186,
		0.07914300262928009,
		0.08510000258684158,
		0.0936100035905838,
		0.0995670035481453,
		0.10637500137090683,
		0.11573600023984909,
		0.12509700655937195,
		0.1344580054283142,
		0.14466999471187592,
		0.15488199889659882,
		0.16509400308132172,
		0.17530600726604462,
		0.18551799654960632,
		0.19573000073432922,
	}
	// skill: skill = [0]
	skill = []float64{
		0.12863999605178833,
		0.1382880061864853,
		0.14793600142002106,
		0.1607999950647354,
		0.17044800519943237,
		0.18009600043296814,
		0.1929599940776825,
		0.20582400262355804,
		0.2186879962682724,
		0.23155200481414795,
		0.2444159984588623,
		0.25727999210357666,
		0.273360013961792,
		0.28944000601768494,
		0.3055199980735779,
	}
	// skill: thorn = [1]
	thorn = []float64{
		0.20800000429153442,
		0.22360000014305115,
		0.23919999599456787,
		0.25999999046325684,
		0.27559998631477356,
		0.29120001196861267,
		0.31200000643730164,
		0.3328000009059906,
		0.35359999537467957,
		0.37439998984336853,
		0.3952000141143799,
		0.41600000858306885,
		0.44200000166893005,
		0.46799999475479126,
		0.49399998784065247,
	}
	// burst: burst = [0]
	burst = []float64{
		0.2225780040025711,
		0.23927199840545654,
		0.255964994430542,
		0.2782230079174042,
		0.2949160039424896,
		0.31161001324653625,
		0.33386799693107605,
		0.35612499713897705,
		0.37838301062583923,
		0.40064099431037903,
		0.4228990077972412,
		0.445156991481781,
		0.47297900915145874,
		0.5008010268211365,
		0.5286239981651306,
	}
	// burst: burstWaterfall = [1]
	burstWaterfall = []float64{
		0.0910549983382225,
		0.09788399934768677,
		0.10471300035715103,
		0.11381799727678299,
		0.12064699828624725,
		0.1274770051240921,
		0.13658200204372406,
		0.145687997341156,
		0.15479299426078796,
		0.16389800608158112,
		0.17300400137901306,
		0.18210899829864502,
		0.19349099695682526,
		0.2048729956150055,
		0.21625499427318573,
	}
)
