// Code generated by "pipeline"; DO NOT EDIT.
package diona

import (
	_ "embed"

	"fmt"
	"github.com/genshinsim/gcsim/pkg/core/action"
	"github.com/genshinsim/gcsim/pkg/core/keys"
	"github.com/genshinsim/gcsim/pkg/gcs/validation"
	"github.com/genshinsim/gcsim/pkg/model"
	"google.golang.org/protobuf/encoding/prototext"
	"slices"
)

//go:embed data_gen.textproto
var pbData []byte
var base *model.AvatarData
var paramKeysValidation = map[action.Action][]string{
	1: {"hold", "travel"},
	3: {"travel"},
	7: {"hold", "travel", "weakspot"},
}

func init() {
	base = &model.AvatarData{}
	err := prototext.Unmarshal(pbData, base)
	if err != nil {
		panic(err)
	}
	validation.RegisterCharParamValidationFunc(keys.Diona, ValidateParamKeys)
}

func ValidateParamKeys(a action.Action, keys []string) error {
	valid, ok := paramKeysValidation[a]
	if !ok {
		return nil
	}
	for _, v := range keys {
		if !slices.Contains(valid, v) {
			return fmt.Errorf("key %v is invalid for action %v", v, a.String())
		}
	}
	return nil
}

func (x *char) Data() *model.AvatarData {
	return base
}

var (
	auto = [][]float64{
		auto_1,
		auto_2,
		auto_3,
		auto_4,
		auto_5,
	}
)

var (
	// attack: aim = [6]
	aim = []float64{
		0.4386,
		0.4743,
		0.51,
		0.561,
		0.5967,
		0.6375,
		0.6936,
		0.7497,
		0.8058,
		0.867,
		0.937125,
		1.019592,
		1.102059,
		1.184526,
		1.27449,
	}
	// attack: auto_1 = [0]
	auto_1 = []float64{
		0.3612,
		0.3906,
		0.42,
		0.462,
		0.4914,
		0.525,
		0.5712,
		0.6174,
		0.6636,
		0.714,
		0.77175,
		0.839664,
		0.907578,
		0.975492,
		1.04958,
	}
	// attack: auto_2 = [1]
	auto_2 = []float64{
		0.3354,
		0.3627,
		0.39,
		0.429,
		0.4563,
		0.4875,
		0.5304,
		0.5733,
		0.6162,
		0.663,
		0.716625,
		0.779688,
		0.842751,
		0.905814,
		0.97461,
	}
	// attack: auto_3 = [2]
	auto_3 = []float64{
		0.4558,
		0.4929,
		0.53,
		0.583,
		0.6201,
		0.6625,
		0.7208,
		0.7791,
		0.8374,
		0.901,
		0.973875,
		1.059576,
		1.145277,
		1.230978,
		1.32447,
	}
	// attack: auto_4 = [3]
	auto_4 = []float64{
		0.43,
		0.465,
		0.5,
		0.55,
		0.585,
		0.625,
		0.68,
		0.735,
		0.79,
		0.85,
		0.91875,
		0.9996,
		1.08045,
		1.1613,
		1.2495,
	}
	// attack: auto_5 = [4]
	auto_5 = []float64{
		0.5375,
		0.58125,
		0.625,
		0.6875,
		0.73125,
		0.78125,
		0.85,
		0.91875,
		0.9875,
		1.0625,
		1.148438,
		1.2495,
		1.350562,
		1.451625,
		1.561875,
	}
	// attack: fullaim = [7]
	fullaim = []float64{
		1.24,
		1.333,
		1.426,
		1.55,
		1.643,
		1.736,
		1.86,
		1.984,
		2.108,
		2.232,
		2.36096,
		2.5296,
		2.69824,
		2.86688,
		3.03552,
	}
	// skill: paw = [0]
	paw = []float64{
		0.4192,
		0.45064,
		0.48208,
		0.524,
		0.55544,
		0.58688,
		0.6288,
		0.67072,
		0.71264,
		0.75456,
		0.79648,
		0.8384,
		0.8908,
		0.9432,
		0.9956,
	}
	// skill: pawDur = [5]
	pawDur = []float64{
		1.8,
		1.9,
		2,
		2.1,
		2.2,
		2.3,
		2.4,
		2.4,
		2.4,
		2.4,
		2.4,
		2.4,
		2.4,
		2.4,
		2.4,
	}
	// skill: pawShieldFlat = [2]
	pawShieldFlat = []float64{
		692.8066,
		762.09686,
		837.1613,
		918,
		1004.61285,
		1096.9999,
		1195.1611,
		1299.0966,
		1408.8062,
		1524.29,
		1645.548,
		1772.5802,
		1905.3866,
		2043.9672,
		2188.322,
	}
	// skill: pawShieldPer = [1]
	pawShieldPer = []float64{
		0.072,
		0.0774,
		0.0828,
		0.09,
		0.0954,
		0.1008,
		0.108,
		0.1152,
		0.1224,
		0.1296,
		0.1368,
		0.144,
		0.153,
		0.162,
		0.171,
	}
	// burst: burst = [0]
	burst = []float64{
		0.8,
		0.86,
		0.92,
		1,
		1.06,
		1.12,
		1.2,
		1.28,
		1.36,
		1.44,
		1.52,
		1.6,
		1.7,
		1.8,
		1.9,
	}
	// burst: burstDot = [1]
	burstDot = []float64{
		0.5264,
		0.56588,
		0.60536,
		0.658,
		0.69748,
		0.73696,
		0.7896,
		0.84224,
		0.89488,
		0.94752,
		1.00016,
		1.0528,
		1.1186,
		1.1844,
		1.2502,
	}
	// burst: burstHealFlat = [3]
	burstHealFlat = []float64{
		513.19006,
		564.5162,
		620.1195,
		680,
		744.15765,
		812.5925,
		885.30457,
		962.29376,
		1043.5602,
		1129.1038,
		1218.9244,
		1313.0223,
		1411.3975,
		1514.0498,
		1620.9792,
	}
	// burst: burstHealPer = [2]
	burstHealPer = []float64{
		0.05336,
		0.057362,
		0.061364,
		0.0667,
		0.070702,
		0.074704,
		0.08004,
		0.085376,
		0.090712,
		0.096048,
		0.101384,
		0.10672,
		0.11339,
		0.12006,
		0.12673,
	}
)
