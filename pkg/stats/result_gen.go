package stats

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *ActionEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "action_id":
			z.ActionId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ActionId")
				return
			}
		case "action":
			z.Action, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ActionEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "frame"
	err = en.Append(0x83, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Frame)
	if err != nil {
		err = msgp.WrapError(err, "Frame")
		return
	}
	// write "action_id"
	err = en.Append(0xa9, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ActionId)
	if err != nil {
		err = msgp.WrapError(err, "ActionId")
		return
	}
	// write "action"
	err = en.Append(0xa6, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Action)
	if err != nil {
		err = msgp.WrapError(err, "Action")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ActionEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "frame"
	o = append(o, 0x83, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	o = msgp.AppendInt(o, z.Frame)
	// string "action_id"
	o = append(o, 0xa9, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt(o, z.ActionId)
	// string "action"
	o = append(o, 0xa6, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Action)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActionEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "action_id":
			z.ActionId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActionId")
				return
			}
		case "action":
			z.Action, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Action")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ActionEvent) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 10 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.Action)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ActionFailInterval) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "reason":
			z.Reason, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Reason")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ActionFailInterval) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "start"
	err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "end"
	err = en.Append(0xa3, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	// write "reason"
	err = en.Append(0xa6, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Reason)
	if err != nil {
		err = msgp.WrapError(err, "Reason")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ActionFailInterval) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "start"
	o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendInt(o, z.Start)
	// string "end"
	o = append(o, 0xa3, 0x65, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.End)
	// string "reason"
	o = append(o, 0xa6, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Reason)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActionFailInterval) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "reason":
			z.Reason, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Reason")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ActionFailInterval) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 4 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.Reason)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ActiveCharacterInterval) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "character":
			z.Character, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Character")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ActiveCharacterInterval) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "start"
	err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "end"
	err = en.Append(0xa3, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	// write "character"
	err = en.Append(0xa9, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Character)
	if err != nil {
		err = msgp.WrapError(err, "Character")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ActiveCharacterInterval) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "start"
	o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendInt(o, z.Start)
	// string "end"
	o = append(o, 0xa3, 0x65, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.End)
	// string "character"
	o = append(o, 0xa9, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72)
	o = msgp.AppendInt(o, z.Character)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ActiveCharacterInterval) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "character":
			z.Character, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Character")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ActiveCharacterInterval) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 4 + msgp.IntSize + 10 + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *CharacterResult) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "damage_events":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DamageEvents")
				return
			}
			if cap(z.DamageEvents) >= int(zb0002) {
				z.DamageEvents = (z.DamageEvents)[:zb0002]
			} else {
				z.DamageEvents = make([]DamageEvent, zb0002)
			}
			for za0001 := range z.DamageEvents {
				err = z.DamageEvents[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "DamageEvents", za0001)
					return
				}
			}
		case "reaction_events":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReactionEvents")
				return
			}
			if cap(z.ReactionEvents) >= int(zb0003) {
				z.ReactionEvents = (z.ReactionEvents)[:zb0003]
			} else {
				z.ReactionEvents = make([]ReactionEvent, zb0003)
			}
			for za0002 := range z.ReactionEvents {
				err = z.ReactionEvents[za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "ReactionEvents", za0002)
					return
				}
			}
		case "action_events":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ActionEvents")
				return
			}
			if cap(z.ActionEvents) >= int(zb0004) {
				z.ActionEvents = (z.ActionEvents)[:zb0004]
			} else {
				z.ActionEvents = make([]ActionEvent, zb0004)
			}
			for za0003 := range z.ActionEvents {
				var zb0005 uint32
				zb0005, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ActionEvents", za0003)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ActionEvents", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "frame":
						z.ActionEvents[za0003].Frame, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "ActionEvents", za0003, "Frame")
							return
						}
					case "action_id":
						z.ActionEvents[za0003].ActionId, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "ActionEvents", za0003, "ActionId")
							return
						}
					case "action":
						z.ActionEvents[za0003].Action, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "ActionEvents", za0003, "Action")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ActionEvents", za0003)
							return
						}
					}
				}
			}
		case "energy_events":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "EnergyEvents")
				return
			}
			if cap(z.EnergyEvents) >= int(zb0006) {
				z.EnergyEvents = (z.EnergyEvents)[:zb0006]
			} else {
				z.EnergyEvents = make([]EnergyEvent, zb0006)
			}
			for za0004 := range z.EnergyEvents {
				err = z.EnergyEvents[za0004].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "EnergyEvents", za0004)
					return
				}
			}
		case "heal_events":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "HealEvents")
				return
			}
			if cap(z.HealEvents) >= int(zb0007) {
				z.HealEvents = (z.HealEvents)[:zb0007]
			} else {
				z.HealEvents = make([]HealEvent, zb0007)
			}
			for za0005 := range z.HealEvents {
				err = z.HealEvents[za0005].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "HealEvents", za0005)
					return
				}
			}
		case "failed_actions":
			var zb0008 uint32
			zb0008, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "FailedActions")
				return
			}
			if cap(z.FailedActions) >= int(zb0008) {
				z.FailedActions = (z.FailedActions)[:zb0008]
			} else {
				z.FailedActions = make([]ActionFailInterval, zb0008)
			}
			for za0006 := range z.FailedActions {
				var zb0009 uint32
				zb0009, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "FailedActions", za0006)
					return
				}
				for zb0009 > 0 {
					zb0009--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "FailedActions", za0006)
						return
					}
					switch msgp.UnsafeString(field) {
					case "start":
						z.FailedActions[za0006].Start, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "FailedActions", za0006, "Start")
							return
						}
					case "end":
						z.FailedActions[za0006].End, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "FailedActions", za0006, "End")
							return
						}
					case "reason":
						z.FailedActions[za0006].Reason, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "FailedActions", za0006, "Reason")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "FailedActions", za0006)
							return
						}
					}
				}
			}
		case "energy":
			var zb0010 uint32
			zb0010, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "EnergyStatus")
				return
			}
			if cap(z.EnergyStatus) >= int(zb0010) {
				z.EnergyStatus = (z.EnergyStatus)[:zb0010]
			} else {
				z.EnergyStatus = make([]float64, zb0010)
			}
			for za0007 := range z.EnergyStatus {
				z.EnergyStatus[za0007], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "EnergyStatus", za0007)
					return
				}
			}
		case "health":
			var zb0011 uint32
			zb0011, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "HealthStatus")
				return
			}
			if cap(z.HealthStatus) >= int(zb0011) {
				z.HealthStatus = (z.HealthStatus)[:zb0011]
			} else {
				z.HealthStatus = make([]float64, zb0011)
			}
			for za0008 := range z.HealthStatus {
				z.HealthStatus[za0008], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "HealthStatus", za0008)
					return
				}
			}
		case "damage_cumu_contrib":
			var zb0012 uint32
			zb0012, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DamageCumulativeContrib")
				return
			}
			if cap(z.DamageCumulativeContrib) >= int(zb0012) {
				z.DamageCumulativeContrib = (z.DamageCumulativeContrib)[:zb0012]
			} else {
				z.DamageCumulativeContrib = make([]float64, zb0012)
			}
			for za0009 := range z.DamageCumulativeContrib {
				z.DamageCumulativeContrib[za0009], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "DamageCumulativeContrib", za0009)
					return
				}
			}
		case "active_time":
			z.ActiveTime, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ActiveTime")
				return
			}
		case "energy_spent":
			z.EnergySpent, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "EnergySpent")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *CharacterResult) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 12
	// write "name"
	err = en.Append(0x8c, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "damage_events"
	err = en.Append(0xad, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DamageEvents)))
	if err != nil {
		err = msgp.WrapError(err, "DamageEvents")
		return
	}
	for za0001 := range z.DamageEvents {
		err = z.DamageEvents[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "DamageEvents", za0001)
			return
		}
	}
	// write "reaction_events"
	err = en.Append(0xaf, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ReactionEvents)))
	if err != nil {
		err = msgp.WrapError(err, "ReactionEvents")
		return
	}
	for za0002 := range z.ReactionEvents {
		err = z.ReactionEvents[za0002].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "ReactionEvents", za0002)
			return
		}
	}
	// write "action_events"
	err = en.Append(0xad, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ActionEvents)))
	if err != nil {
		err = msgp.WrapError(err, "ActionEvents")
		return
	}
	for za0003 := range z.ActionEvents {
		// map header, size 3
		// write "frame"
		err = en.Append(0x83, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ActionEvents[za0003].Frame)
		if err != nil {
			err = msgp.WrapError(err, "ActionEvents", za0003, "Frame")
			return
		}
		// write "action_id"
		err = en.Append(0xa9, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ActionEvents[za0003].ActionId)
		if err != nil {
			err = msgp.WrapError(err, "ActionEvents", za0003, "ActionId")
			return
		}
		// write "action"
		err = en.Append(0xa6, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteString(z.ActionEvents[za0003].Action)
		if err != nil {
			err = msgp.WrapError(err, "ActionEvents", za0003, "Action")
			return
		}
	}
	// write "energy_events"
	err = en.Append(0xad, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.EnergyEvents)))
	if err != nil {
		err = msgp.WrapError(err, "EnergyEvents")
		return
	}
	for za0004 := range z.EnergyEvents {
		err = z.EnergyEvents[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "EnergyEvents", za0004)
			return
		}
	}
	// write "heal_events"
	err = en.Append(0xab, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.HealEvents)))
	if err != nil {
		err = msgp.WrapError(err, "HealEvents")
		return
	}
	for za0005 := range z.HealEvents {
		err = z.HealEvents[za0005].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "HealEvents", za0005)
			return
		}
	}
	// write "failed_actions"
	err = en.Append(0xae, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.FailedActions)))
	if err != nil {
		err = msgp.WrapError(err, "FailedActions")
		return
	}
	for za0006 := range z.FailedActions {
		// map header, size 3
		// write "start"
		err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.FailedActions[za0006].Start)
		if err != nil {
			err = msgp.WrapError(err, "FailedActions", za0006, "Start")
			return
		}
		// write "end"
		err = en.Append(0xa3, 0x65, 0x6e, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.FailedActions[za0006].End)
		if err != nil {
			err = msgp.WrapError(err, "FailedActions", za0006, "End")
			return
		}
		// write "reason"
		err = en.Append(0xa6, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e)
		if err != nil {
			return
		}
		err = en.WriteString(z.FailedActions[za0006].Reason)
		if err != nil {
			err = msgp.WrapError(err, "FailedActions", za0006, "Reason")
			return
		}
	}
	// write "energy"
	err = en.Append(0xa6, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.EnergyStatus)))
	if err != nil {
		err = msgp.WrapError(err, "EnergyStatus")
		return
	}
	for za0007 := range z.EnergyStatus {
		err = en.WriteFloat64(z.EnergyStatus[za0007])
		if err != nil {
			err = msgp.WrapError(err, "EnergyStatus", za0007)
			return
		}
	}
	// write "health"
	err = en.Append(0xa6, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.HealthStatus)))
	if err != nil {
		err = msgp.WrapError(err, "HealthStatus")
		return
	}
	for za0008 := range z.HealthStatus {
		err = en.WriteFloat64(z.HealthStatus[za0008])
		if err != nil {
			err = msgp.WrapError(err, "HealthStatus", za0008)
			return
		}
	}
	// write "damage_cumu_contrib"
	err = en.Append(0xb3, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DamageCumulativeContrib)))
	if err != nil {
		err = msgp.WrapError(err, "DamageCumulativeContrib")
		return
	}
	for za0009 := range z.DamageCumulativeContrib {
		err = en.WriteFloat64(z.DamageCumulativeContrib[za0009])
		if err != nil {
			err = msgp.WrapError(err, "DamageCumulativeContrib", za0009)
			return
		}
	}
	// write "active_time"
	err = en.Append(0xab, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ActiveTime)
	if err != nil {
		err = msgp.WrapError(err, "ActiveTime")
		return
	}
	// write "energy_spent"
	err = en.Append(0xac, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.EnergySpent)
	if err != nil {
		err = msgp.WrapError(err, "EnergySpent")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *CharacterResult) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 12
	// string "name"
	o = append(o, 0x8c, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "damage_events"
	o = append(o, 0xad, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DamageEvents)))
	for za0001 := range z.DamageEvents {
		o, err = z.DamageEvents[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "DamageEvents", za0001)
			return
		}
	}
	// string "reaction_events"
	o = append(o, 0xaf, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ReactionEvents)))
	for za0002 := range z.ReactionEvents {
		o, err = z.ReactionEvents[za0002].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "ReactionEvents", za0002)
			return
		}
	}
	// string "action_events"
	o = append(o, 0xad, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ActionEvents)))
	for za0003 := range z.ActionEvents {
		// map header, size 3
		// string "frame"
		o = append(o, 0x83, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
		o = msgp.AppendInt(o, z.ActionEvents[za0003].Frame)
		// string "action_id"
		o = append(o, 0xa9, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
		o = msgp.AppendInt(o, z.ActionEvents[za0003].ActionId)
		// string "action"
		o = append(o, 0xa6, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
		o = msgp.AppendString(o, z.ActionEvents[za0003].Action)
	}
	// string "energy_events"
	o = append(o, 0xad, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.EnergyEvents)))
	for za0004 := range z.EnergyEvents {
		o, err = z.EnergyEvents[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "EnergyEvents", za0004)
			return
		}
	}
	// string "heal_events"
	o = append(o, 0xab, 0x68, 0x65, 0x61, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HealEvents)))
	for za0005 := range z.HealEvents {
		o, err = z.HealEvents[za0005].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "HealEvents", za0005)
			return
		}
	}
	// string "failed_actions"
	o = append(o, 0xae, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.FailedActions)))
	for za0006 := range z.FailedActions {
		// map header, size 3
		// string "start"
		o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
		o = msgp.AppendInt(o, z.FailedActions[za0006].Start)
		// string "end"
		o = append(o, 0xa3, 0x65, 0x6e, 0x64)
		o = msgp.AppendInt(o, z.FailedActions[za0006].End)
		// string "reason"
		o = append(o, 0xa6, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e)
		o = msgp.AppendString(o, z.FailedActions[za0006].Reason)
	}
	// string "energy"
	o = append(o, 0xa6, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79)
	o = msgp.AppendArrayHeader(o, uint32(len(z.EnergyStatus)))
	for za0007 := range z.EnergyStatus {
		o = msgp.AppendFloat64(o, z.EnergyStatus[za0007])
	}
	// string "health"
	o = append(o, 0xa6, 0x68, 0x65, 0x61, 0x6c, 0x74, 0x68)
	o = msgp.AppendArrayHeader(o, uint32(len(z.HealthStatus)))
	for za0008 := range z.HealthStatus {
		o = msgp.AppendFloat64(o, z.HealthStatus[za0008])
	}
	// string "damage_cumu_contrib"
	o = append(o, 0xb3, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x75, 0x6d, 0x75, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DamageCumulativeContrib)))
	for za0009 := range z.DamageCumulativeContrib {
		o = msgp.AppendFloat64(o, z.DamageCumulativeContrib[za0009])
	}
	// string "active_time"
	o = append(o, 0xab, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendInt(o, z.ActiveTime)
	// string "energy_spent"
	o = append(o, 0xac, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x6e, 0x74)
	o = msgp.AppendFloat64(o, z.EnergySpent)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *CharacterResult) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "damage_events":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DamageEvents")
				return
			}
			if cap(z.DamageEvents) >= int(zb0002) {
				z.DamageEvents = (z.DamageEvents)[:zb0002]
			} else {
				z.DamageEvents = make([]DamageEvent, zb0002)
			}
			for za0001 := range z.DamageEvents {
				bts, err = z.DamageEvents[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "DamageEvents", za0001)
					return
				}
			}
		case "reaction_events":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReactionEvents")
				return
			}
			if cap(z.ReactionEvents) >= int(zb0003) {
				z.ReactionEvents = (z.ReactionEvents)[:zb0003]
			} else {
				z.ReactionEvents = make([]ReactionEvent, zb0003)
			}
			for za0002 := range z.ReactionEvents {
				bts, err = z.ReactionEvents[za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReactionEvents", za0002)
					return
				}
			}
		case "action_events":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActionEvents")
				return
			}
			if cap(z.ActionEvents) >= int(zb0004) {
				z.ActionEvents = (z.ActionEvents)[:zb0004]
			} else {
				z.ActionEvents = make([]ActionEvent, zb0004)
			}
			for za0003 := range z.ActionEvents {
				var zb0005 uint32
				zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ActionEvents", za0003)
					return
				}
				for zb0005 > 0 {
					zb0005--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ActionEvents", za0003)
						return
					}
					switch msgp.UnsafeString(field) {
					case "frame":
						z.ActionEvents[za0003].Frame, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ActionEvents", za0003, "Frame")
							return
						}
					case "action_id":
						z.ActionEvents[za0003].ActionId, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ActionEvents", za0003, "ActionId")
							return
						}
					case "action":
						z.ActionEvents[za0003].Action, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ActionEvents", za0003, "Action")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ActionEvents", za0003)
							return
						}
					}
				}
			}
		case "energy_events":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EnergyEvents")
				return
			}
			if cap(z.EnergyEvents) >= int(zb0006) {
				z.EnergyEvents = (z.EnergyEvents)[:zb0006]
			} else {
				z.EnergyEvents = make([]EnergyEvent, zb0006)
			}
			for za0004 := range z.EnergyEvents {
				bts, err = z.EnergyEvents[za0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "EnergyEvents", za0004)
					return
				}
			}
		case "heal_events":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HealEvents")
				return
			}
			if cap(z.HealEvents) >= int(zb0007) {
				z.HealEvents = (z.HealEvents)[:zb0007]
			} else {
				z.HealEvents = make([]HealEvent, zb0007)
			}
			for za0005 := range z.HealEvents {
				bts, err = z.HealEvents[za0005].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "HealEvents", za0005)
					return
				}
			}
		case "failed_actions":
			var zb0008 uint32
			zb0008, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "FailedActions")
				return
			}
			if cap(z.FailedActions) >= int(zb0008) {
				z.FailedActions = (z.FailedActions)[:zb0008]
			} else {
				z.FailedActions = make([]ActionFailInterval, zb0008)
			}
			for za0006 := range z.FailedActions {
				var zb0009 uint32
				zb0009, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "FailedActions", za0006)
					return
				}
				for zb0009 > 0 {
					zb0009--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "FailedActions", za0006)
						return
					}
					switch msgp.UnsafeString(field) {
					case "start":
						z.FailedActions[za0006].Start, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "FailedActions", za0006, "Start")
							return
						}
					case "end":
						z.FailedActions[za0006].End, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "FailedActions", za0006, "End")
							return
						}
					case "reason":
						z.FailedActions[za0006].Reason, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "FailedActions", za0006, "Reason")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "FailedActions", za0006)
							return
						}
					}
				}
			}
		case "energy":
			var zb0010 uint32
			zb0010, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EnergyStatus")
				return
			}
			if cap(z.EnergyStatus) >= int(zb0010) {
				z.EnergyStatus = (z.EnergyStatus)[:zb0010]
			} else {
				z.EnergyStatus = make([]float64, zb0010)
			}
			for za0007 := range z.EnergyStatus {
				z.EnergyStatus[za0007], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "EnergyStatus", za0007)
					return
				}
			}
		case "health":
			var zb0011 uint32
			zb0011, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HealthStatus")
				return
			}
			if cap(z.HealthStatus) >= int(zb0011) {
				z.HealthStatus = (z.HealthStatus)[:zb0011]
			} else {
				z.HealthStatus = make([]float64, zb0011)
			}
			for za0008 := range z.HealthStatus {
				z.HealthStatus[za0008], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HealthStatus", za0008)
					return
				}
			}
		case "damage_cumu_contrib":
			var zb0012 uint32
			zb0012, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DamageCumulativeContrib")
				return
			}
			if cap(z.DamageCumulativeContrib) >= int(zb0012) {
				z.DamageCumulativeContrib = (z.DamageCumulativeContrib)[:zb0012]
			} else {
				z.DamageCumulativeContrib = make([]float64, zb0012)
			}
			for za0009 := range z.DamageCumulativeContrib {
				z.DamageCumulativeContrib[za0009], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DamageCumulativeContrib", za0009)
					return
				}
			}
		case "active_time":
			z.ActiveTime, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActiveTime")
				return
			}
		case "energy_spent":
			z.EnergySpent, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EnergySpent")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *CharacterResult) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 14 + msgp.ArrayHeaderSize
	for za0001 := range z.DamageEvents {
		s += z.DamageEvents[za0001].Msgsize()
	}
	s += 16 + msgp.ArrayHeaderSize
	for za0002 := range z.ReactionEvents {
		s += z.ReactionEvents[za0002].Msgsize()
	}
	s += 14 + msgp.ArrayHeaderSize
	for za0003 := range z.ActionEvents {
		s += 1 + 6 + msgp.IntSize + 10 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.ActionEvents[za0003].Action)
	}
	s += 14 + msgp.ArrayHeaderSize
	for za0004 := range z.EnergyEvents {
		s += z.EnergyEvents[za0004].Msgsize()
	}
	s += 12 + msgp.ArrayHeaderSize
	for za0005 := range z.HealEvents {
		s += z.HealEvents[za0005].Msgsize()
	}
	s += 15 + msgp.ArrayHeaderSize
	for za0006 := range z.FailedActions {
		s += 1 + 6 + msgp.IntSize + 4 + msgp.IntSize + 7 + msgp.StringPrefixSize + len(z.FailedActions[za0006].Reason)
	}
	s += 7 + msgp.ArrayHeaderSize + (len(z.EnergyStatus) * (msgp.Float64Size)) + 7 + msgp.ArrayHeaderSize + (len(z.HealthStatus) * (msgp.Float64Size)) + 20 + msgp.ArrayHeaderSize + (len(z.DamageCumulativeContrib) * (msgp.Float64Size)) + 12 + msgp.IntSize + 13 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *DamageEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "action_id":
			z.ActionId, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ActionId")
				return
			}
		case "src":
			z.Source, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "target":
			z.Target, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "element":
			z.Element, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Element")
				return
			}
		case "reaction_modifier":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReactionModifier")
					return
				}
				z.ReactionModifier = ReactionModifier(zb0002)
			}
		case "crit":
			z.Crit, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "Crit")
				return
			}
		case "modifiers":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Modifiers")
				return
			}
			if cap(z.Modifiers) >= int(zb0003) {
				z.Modifiers = (z.Modifiers)[:zb0003]
			} else {
				z.Modifiers = make([]string, zb0003)
			}
			for za0001 := range z.Modifiers {
				z.Modifiers[za0001], err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Modifiers", za0001)
					return
				}
			}
		case "mitigation_modifier":
			z.MitigationModifier, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Mitigation")
				return
			}
		case "damage":
			z.Damage, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Damage")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *DamageEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "frame"
	err = en.Append(0x8a, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Frame)
	if err != nil {
		err = msgp.WrapError(err, "Frame")
		return
	}
	// write "action_id"
	err = en.Append(0xa9, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ActionId)
	if err != nil {
		err = msgp.WrapError(err, "ActionId")
		return
	}
	// write "src"
	err = en.Append(0xa3, 0x73, 0x72, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Source)
	if err != nil {
		err = msgp.WrapError(err, "Source")
		return
	}
	// write "target"
	err = en.Append(0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	// write "element"
	err = en.Append(0xa7, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteString(z.Element)
	if err != nil {
		err = msgp.WrapError(err, "Element")
		return
	}
	// write "reaction_modifier"
	err = en.Append(0xb1, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.ReactionModifier))
	if err != nil {
		err = msgp.WrapError(err, "ReactionModifier")
		return
	}
	// write "crit"
	err = en.Append(0xa4, 0x63, 0x72, 0x69, 0x74)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Crit)
	if err != nil {
		err = msgp.WrapError(err, "Crit")
		return
	}
	// write "modifiers"
	err = en.Append(0xa9, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Modifiers)))
	if err != nil {
		err = msgp.WrapError(err, "Modifiers")
		return
	}
	for za0001 := range z.Modifiers {
		err = en.WriteString(z.Modifiers[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Modifiers", za0001)
			return
		}
	}
	// write "mitigation_modifier"
	err = en.Append(0xb3, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.MitigationModifier)
	if err != nil {
		err = msgp.WrapError(err, "Mitigation")
		return
	}
	// write "damage"
	err = en.Append(0xa6, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Damage)
	if err != nil {
		err = msgp.WrapError(err, "Damage")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *DamageEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "frame"
	o = append(o, 0x8a, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	o = msgp.AppendInt(o, z.Frame)
	// string "action_id"
	o = append(o, 0xa9, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64)
	o = msgp.AppendInt(o, z.ActionId)
	// string "src"
	o = append(o, 0xa3, 0x73, 0x72, 0x63)
	o = msgp.AppendString(o, z.Source)
	// string "target"
	o = append(o, 0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	o = msgp.AppendInt(o, z.Target)
	// string "element"
	o = append(o, 0xa7, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74)
	o = msgp.AppendString(o, z.Element)
	// string "reaction_modifier"
	o = append(o, 0xb1, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72)
	o = msgp.AppendString(o, string(z.ReactionModifier))
	// string "crit"
	o = append(o, 0xa4, 0x63, 0x72, 0x69, 0x74)
	o = msgp.AppendBool(o, z.Crit)
	// string "modifiers"
	o = append(o, 0xa9, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Modifiers)))
	for za0001 := range z.Modifiers {
		o = msgp.AppendString(o, z.Modifiers[za0001])
	}
	// string "mitigation_modifier"
	o = append(o, 0xb3, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x72)
	o = msgp.AppendFloat64(o, z.MitigationModifier)
	// string "damage"
	o = append(o, 0xa6, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65)
	o = msgp.AppendFloat64(o, z.Damage)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *DamageEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "action_id":
			z.ActionId, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActionId")
				return
			}
		case "src":
			z.Source, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "target":
			z.Target, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "element":
			z.Element, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Element")
				return
			}
		case "reaction_modifier":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReactionModifier")
					return
				}
				z.ReactionModifier = ReactionModifier(zb0002)
			}
		case "crit":
			z.Crit, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Crit")
				return
			}
		case "modifiers":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Modifiers")
				return
			}
			if cap(z.Modifiers) >= int(zb0003) {
				z.Modifiers = (z.Modifiers)[:zb0003]
			} else {
				z.Modifiers = make([]string, zb0003)
			}
			for za0001 := range z.Modifiers {
				z.Modifiers[za0001], bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Modifiers", za0001)
					return
				}
			}
		case "mitigation_modifier":
			z.MitigationModifier, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Mitigation")
				return
			}
		case "damage":
			z.Damage, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Damage")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *DamageEvent) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 10 + msgp.IntSize + 4 + msgp.StringPrefixSize + len(z.Source) + 7 + msgp.IntSize + 8 + msgp.StringPrefixSize + len(z.Element) + 18 + msgp.StringPrefixSize + len(string(z.ReactionModifier)) + 5 + msgp.BoolSize + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.Modifiers {
		s += msgp.StringPrefixSize + len(z.Modifiers[za0001])
	}
	s += 20 + msgp.Float64Size + 7 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EnemyResult) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "reaction_status":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReactionStatus")
				return
			}
			if cap(z.ReactionStatus) >= int(zb0002) {
				z.ReactionStatus = (z.ReactionStatus)[:zb0002]
			} else {
				z.ReactionStatus = make([]ReactionStatusInterval, zb0002)
			}
			for za0001 := range z.ReactionStatus {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ReactionStatus", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ReactionStatus", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "start":
						z.ReactionStatus[za0001].Start, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "ReactionStatus", za0001, "Start")
							return
						}
					case "end":
						z.ReactionStatus[za0001].End, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "ReactionStatus", za0001, "End")
							return
						}
					case "type":
						z.ReactionStatus[za0001].Type, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "ReactionStatus", za0001, "Type")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ReactionStatus", za0001)
							return
						}
					}
				}
			}
		case "reaction_uptime":
			var zb0004 uint32
			zb0004, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "ReactionUptime")
				return
			}
			if z.ReactionUptime == nil {
				z.ReactionUptime = make(map[string]int, zb0004)
			} else if len(z.ReactionUptime) > 0 {
				for key := range z.ReactionUptime {
					delete(z.ReactionUptime, key)
				}
			}
			for zb0004 > 0 {
				zb0004--
				var za0002 string
				var za0003 int
				za0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "ReactionUptime")
					return
				}
				za0003, err = dc.ReadInt()
				if err != nil {
					err = msgp.WrapError(err, "ReactionUptime", za0002)
					return
				}
				z.ReactionUptime[za0002] = za0003
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EnemyResult) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "reaction_status"
	err = en.Append(0x82, 0xaf, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ReactionStatus)))
	if err != nil {
		err = msgp.WrapError(err, "ReactionStatus")
		return
	}
	for za0001 := range z.ReactionStatus {
		// map header, size 3
		// write "start"
		err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ReactionStatus[za0001].Start)
		if err != nil {
			err = msgp.WrapError(err, "ReactionStatus", za0001, "Start")
			return
		}
		// write "end"
		err = en.Append(0xa3, 0x65, 0x6e, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ReactionStatus[za0001].End)
		if err != nil {
			err = msgp.WrapError(err, "ReactionStatus", za0001, "End")
			return
		}
		// write "type"
		err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.ReactionStatus[za0001].Type)
		if err != nil {
			err = msgp.WrapError(err, "ReactionStatus", za0001, "Type")
			return
		}
	}
	// write "reaction_uptime"
	err = en.Append(0xaf, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.ReactionUptime)))
	if err != nil {
		err = msgp.WrapError(err, "ReactionUptime")
		return
	}
	for za0002, za0003 := range z.ReactionUptime {
		err = en.WriteString(za0002)
		if err != nil {
			err = msgp.WrapError(err, "ReactionUptime")
			return
		}
		err = en.WriteInt(za0003)
		if err != nil {
			err = msgp.WrapError(err, "ReactionUptime", za0002)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EnemyResult) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "reaction_status"
	o = append(o, 0x82, 0xaf, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ReactionStatus)))
	for za0001 := range z.ReactionStatus {
		// map header, size 3
		// string "start"
		o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
		o = msgp.AppendInt(o, z.ReactionStatus[za0001].Start)
		// string "end"
		o = append(o, 0xa3, 0x65, 0x6e, 0x64)
		o = msgp.AppendInt(o, z.ReactionStatus[za0001].End)
		// string "type"
		o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
		o = msgp.AppendString(o, z.ReactionStatus[za0001].Type)
	}
	// string "reaction_uptime"
	o = append(o, 0xaf, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65)
	o = msgp.AppendMapHeader(o, uint32(len(z.ReactionUptime)))
	for za0002, za0003 := range z.ReactionUptime {
		o = msgp.AppendString(o, za0002)
		o = msgp.AppendInt(o, za0003)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EnemyResult) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "reaction_status":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReactionStatus")
				return
			}
			if cap(z.ReactionStatus) >= int(zb0002) {
				z.ReactionStatus = (z.ReactionStatus)[:zb0002]
			} else {
				z.ReactionStatus = make([]ReactionStatusInterval, zb0002)
			}
			for za0001 := range z.ReactionStatus {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReactionStatus", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ReactionStatus", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "start":
						z.ReactionStatus[za0001].Start, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ReactionStatus", za0001, "Start")
							return
						}
					case "end":
						z.ReactionStatus[za0001].End, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ReactionStatus", za0001, "End")
							return
						}
					case "type":
						z.ReactionStatus[za0001].Type, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ReactionStatus", za0001, "Type")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ReactionStatus", za0001)
							return
						}
					}
				}
			}
		case "reaction_uptime":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ReactionUptime")
				return
			}
			if z.ReactionUptime == nil {
				z.ReactionUptime = make(map[string]int, zb0004)
			} else if len(z.ReactionUptime) > 0 {
				for key := range z.ReactionUptime {
					delete(z.ReactionUptime, key)
				}
			}
			for zb0004 > 0 {
				var za0002 string
				var za0003 int
				zb0004--
				za0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReactionUptime")
					return
				}
				za0003, bts, err = msgp.ReadIntBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ReactionUptime", za0002)
					return
				}
				z.ReactionUptime[za0002] = za0003
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EnemyResult) Msgsize() (s int) {
	s = 1 + 16 + msgp.ArrayHeaderSize
	for za0001 := range z.ReactionStatus {
		s += 1 + 6 + msgp.IntSize + 4 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.ReactionStatus[za0001].Type)
	}
	s += 16 + msgp.MapHeaderSize
	if z.ReactionUptime != nil {
		for za0002, za0003 := range z.ReactionUptime {
			_ = za0003
			s += msgp.StringPrefixSize + len(za0002) + msgp.IntSize
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *EnergyEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "src":
			z.Source, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "field_status":
			{
				var zb0002 string
				zb0002, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.FieldStatus = FieldStatus(zb0002)
			}
		case "gained":
			z.Gained, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Gained")
				return
			}
		case "wasted":
			z.Wasted, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Wasted")
				return
			}
		case "current":
			z.Current, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Current")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *EnergyEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 6
	// write "frame"
	err = en.Append(0x86, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Frame)
	if err != nil {
		err = msgp.WrapError(err, "Frame")
		return
	}
	// write "src"
	err = en.Append(0xa3, 0x73, 0x72, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Source)
	if err != nil {
		err = msgp.WrapError(err, "Source")
		return
	}
	// write "field_status"
	err = en.Append(0xac, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	if err != nil {
		return
	}
	err = en.WriteString(string(z.FieldStatus))
	if err != nil {
		err = msgp.WrapError(err, "Status")
		return
	}
	// write "gained"
	err = en.Append(0xa6, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Gained)
	if err != nil {
		err = msgp.WrapError(err, "Gained")
		return
	}
	// write "wasted"
	err = en.Append(0xa6, 0x77, 0x61, 0x73, 0x74, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Wasted)
	if err != nil {
		err = msgp.WrapError(err, "Wasted")
		return
	}
	// write "current"
	err = en.Append(0xa7, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Current)
	if err != nil {
		err = msgp.WrapError(err, "Current")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *EnergyEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 6
	// string "frame"
	o = append(o, 0x86, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	o = msgp.AppendInt(o, z.Frame)
	// string "src"
	o = append(o, 0xa3, 0x73, 0x72, 0x63)
	o = msgp.AppendString(o, z.Source)
	// string "field_status"
	o = append(o, 0xac, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73)
	o = msgp.AppendString(o, string(z.FieldStatus))
	// string "gained"
	o = append(o, 0xa6, 0x67, 0x61, 0x69, 0x6e, 0x65, 0x64)
	o = msgp.AppendFloat64(o, z.Gained)
	// string "wasted"
	o = append(o, 0xa6, 0x77, 0x61, 0x73, 0x74, 0x65, 0x64)
	o = msgp.AppendFloat64(o, z.Wasted)
	// string "current"
	o = append(o, 0xa7, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74)
	o = msgp.AppendFloat64(o, z.Current)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *EnergyEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "src":
			z.Source, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "field_status":
			{
				var zb0002 string
				zb0002, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Status")
					return
				}
				z.FieldStatus = FieldStatus(zb0002)
			}
		case "gained":
			z.Gained, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Gained")
				return
			}
		case "wasted":
			z.Wasted, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Wasted")
				return
			}
		case "current":
			z.Current, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Current")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *EnergyEvent) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 4 + msgp.StringPrefixSize + len(z.Source) + 13 + msgp.StringPrefixSize + len(string(z.FieldStatus)) + 7 + msgp.Float64Size + 7 + msgp.Float64Size + 8 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *FieldStatus) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FieldStatus(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z FieldStatus) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z FieldStatus) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *FieldStatus) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = FieldStatus(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z FieldStatus) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *HealEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "src":
			z.Source, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "target":
			z.Target, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "heal":
			z.Heal, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Heal")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *HealEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "frame"
	err = en.Append(0x84, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Frame)
	if err != nil {
		err = msgp.WrapError(err, "Frame")
		return
	}
	// write "src"
	err = en.Append(0xa3, 0x73, 0x72, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Source)
	if err != nil {
		err = msgp.WrapError(err, "Source")
		return
	}
	// write "target"
	err = en.Append(0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	// write "heal"
	err = en.Append(0xa4, 0x68, 0x65, 0x61, 0x6c)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Heal)
	if err != nil {
		err = msgp.WrapError(err, "Heal")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *HealEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "frame"
	o = append(o, 0x84, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	o = msgp.AppendInt(o, z.Frame)
	// string "src"
	o = append(o, 0xa3, 0x73, 0x72, 0x63)
	o = msgp.AppendString(o, z.Source)
	// string "target"
	o = append(o, 0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	o = msgp.AppendInt(o, z.Target)
	// string "heal"
	o = append(o, 0xa4, 0x68, 0x65, 0x61, 0x6c)
	o = msgp.AppendFloat64(o, z.Heal)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *HealEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "src":
			z.Source, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "target":
			z.Target, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "heal":
			z.Heal, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Heal")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *HealEvent) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 4 + msgp.StringPrefixSize + len(z.Source) + 7 + msgp.IntSize + 5 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReactionEvent) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "src":
			z.Source, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "target":
			z.Target, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "reaction":
			z.Reaction, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Reaction")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ReactionEvent) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "frame"
	err = en.Append(0x84, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Frame)
	if err != nil {
		err = msgp.WrapError(err, "Frame")
		return
	}
	// write "src"
	err = en.Append(0xa3, 0x73, 0x72, 0x63)
	if err != nil {
		return
	}
	err = en.WriteString(z.Source)
	if err != nil {
		err = msgp.WrapError(err, "Source")
		return
	}
	// write "target"
	err = en.Append(0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Target)
	if err != nil {
		err = msgp.WrapError(err, "Target")
		return
	}
	// write "reaction"
	err = en.Append(0xa8, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteString(z.Reaction)
	if err != nil {
		err = msgp.WrapError(err, "Reaction")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ReactionEvent) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "frame"
	o = append(o, 0x84, 0xa5, 0x66, 0x72, 0x61, 0x6d, 0x65)
	o = msgp.AppendInt(o, z.Frame)
	// string "src"
	o = append(o, 0xa3, 0x73, 0x72, 0x63)
	o = msgp.AppendString(o, z.Source)
	// string "target"
	o = append(o, 0xa6, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74)
	o = msgp.AppendInt(o, z.Target)
	// string "reaction"
	o = append(o, 0xa8, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendString(o, z.Reaction)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReactionEvent) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "frame":
			z.Frame, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Frame")
				return
			}
		case "src":
			z.Source, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Source")
				return
			}
		case "target":
			z.Target, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Target")
				return
			}
		case "reaction":
			z.Reaction, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Reaction")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ReactionEvent) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 4 + msgp.StringPrefixSize + len(z.Source) + 7 + msgp.IntSize + 9 + msgp.StringPrefixSize + len(z.Reaction)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReactionModifier) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 string
		zb0001, err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ReactionModifier(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ReactionModifier) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteString(string(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ReactionModifier) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendString(o, string(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReactionModifier) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 string
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = ReactionModifier(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ReactionModifier) Msgsize() (s int) {
	s = msgp.StringPrefixSize + len(string(z))
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ReactionStatusInterval) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "type":
			z.Type, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ReactionStatusInterval) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "start"
	err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "end"
	err = en.Append(0xa3, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	// write "type"
	err = en.Append(0xa4, 0x74, 0x79, 0x70, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Type)
	if err != nil {
		err = msgp.WrapError(err, "Type")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ReactionStatusInterval) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "start"
	o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendInt(o, z.Start)
	// string "end"
	o = append(o, 0xa3, 0x65, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.End)
	// string "type"
	o = append(o, 0xa4, 0x74, 0x79, 0x70, 0x65)
	o = msgp.AppendString(o, z.Type)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ReactionStatusInterval) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "type":
			z.Type, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Type")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ReactionStatusInterval) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 4 + msgp.IntSize + 5 + msgp.StringPrefixSize + len(z.Type)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Result) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "seed":
			z.Seed, err = dc.ReadUint64()
			if err != nil {
				err = msgp.WrapError(err, "Seed")
				return
			}
		case "duration":
			z.Duration, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Duration")
				return
			}
		case "total_damage":
			z.TotalDamage, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "TotalDamage")
				return
			}
		case "dps":
			z.DPS, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "DPS")
				return
			}
		case "damage_buckets":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DamageBuckets")
				return
			}
			if cap(z.DamageBuckets) >= int(zb0002) {
				z.DamageBuckets = (z.DamageBuckets)[:zb0002]
			} else {
				z.DamageBuckets = make([]float64, zb0002)
			}
			for za0001 := range z.DamageBuckets {
				z.DamageBuckets[za0001], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "DamageBuckets", za0001)
					return
				}
			}
		case "active_characters":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "ActiveCharacters")
				return
			}
			if cap(z.ActiveCharacters) >= int(zb0003) {
				z.ActiveCharacters = (z.ActiveCharacters)[:zb0003]
			} else {
				z.ActiveCharacters = make([]ActiveCharacterInterval, zb0003)
			}
			for za0002 := range z.ActiveCharacters {
				var zb0004 uint32
				zb0004, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "ActiveCharacters", za0002)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "ActiveCharacters", za0002)
						return
					}
					switch msgp.UnsafeString(field) {
					case "start":
						z.ActiveCharacters[za0002].Start, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "ActiveCharacters", za0002, "Start")
							return
						}
					case "end":
						z.ActiveCharacters[za0002].End, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "ActiveCharacters", za0002, "End")
							return
						}
					case "character":
						z.ActiveCharacters[za0002].Character, err = dc.ReadInt()
						if err != nil {
							err = msgp.WrapError(err, "ActiveCharacters", za0002, "Character")
							return
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "ActiveCharacters", za0002)
							return
						}
					}
				}
			}
		case "damage_mitigation":
			var zb0005 uint32
			zb0005, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "DamageMitigation")
				return
			}
			if cap(z.DamageMitigation) >= int(zb0005) {
				z.DamageMitigation = (z.DamageMitigation)[:zb0005]
			} else {
				z.DamageMitigation = make([]float64, zb0005)
			}
			for za0003 := range z.DamageMitigation {
				z.DamageMitigation[za0003], err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "DamageMitigation", za0003)
					return
				}
			}
		case "shield_results":
			err = z.ShieldResults.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "ShieldResults")
				return
			}
		case "characters":
			var zb0006 uint32
			zb0006, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Characters")
				return
			}
			if cap(z.Characters) >= int(zb0006) {
				z.Characters = (z.Characters)[:zb0006]
			} else {
				z.Characters = make([]CharacterResult, zb0006)
			}
			for za0004 := range z.Characters {
				err = z.Characters[za0004].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Characters", za0004)
					return
				}
			}
		case "enemies":
			var zb0007 uint32
			zb0007, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Enemies")
				return
			}
			if cap(z.Enemies) >= int(zb0007) {
				z.Enemies = (z.Enemies)[:zb0007]
			} else {
				z.Enemies = make([]EnemyResult, zb0007)
			}
			for za0005 := range z.Enemies {
				err = z.Enemies[za0005].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Enemies", za0005)
					return
				}
			}
		case "target_overlap":
			z.TargetOverlap, err = dc.ReadBool()
			if err != nil {
				err = msgp.WrapError(err, "TargetOverlap")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Result) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 11
	// write "seed"
	err = en.Append(0x8b, 0xa4, 0x73, 0x65, 0x65, 0x64)
	if err != nil {
		return
	}
	err = en.WriteUint64(z.Seed)
	if err != nil {
		err = msgp.WrapError(err, "Seed")
		return
	}
	// write "duration"
	err = en.Append(0xa8, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Duration)
	if err != nil {
		err = msgp.WrapError(err, "Duration")
		return
	}
	// write "total_damage"
	err = en.Append(0xac, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.TotalDamage)
	if err != nil {
		err = msgp.WrapError(err, "TotalDamage")
		return
	}
	// write "dps"
	err = en.Append(0xa3, 0x64, 0x70, 0x73)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.DPS)
	if err != nil {
		err = msgp.WrapError(err, "DPS")
		return
	}
	// write "damage_buckets"
	err = en.Append(0xae, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DamageBuckets)))
	if err != nil {
		err = msgp.WrapError(err, "DamageBuckets")
		return
	}
	for za0001 := range z.DamageBuckets {
		err = en.WriteFloat64(z.DamageBuckets[za0001])
		if err != nil {
			err = msgp.WrapError(err, "DamageBuckets", za0001)
			return
		}
	}
	// write "active_characters"
	err = en.Append(0xb1, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.ActiveCharacters)))
	if err != nil {
		err = msgp.WrapError(err, "ActiveCharacters")
		return
	}
	for za0002 := range z.ActiveCharacters {
		// map header, size 3
		// write "start"
		err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ActiveCharacters[za0002].Start)
		if err != nil {
			err = msgp.WrapError(err, "ActiveCharacters", za0002, "Start")
			return
		}
		// write "end"
		err = en.Append(0xa3, 0x65, 0x6e, 0x64)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ActiveCharacters[za0002].End)
		if err != nil {
			err = msgp.WrapError(err, "ActiveCharacters", za0002, "End")
			return
		}
		// write "character"
		err = en.Append(0xa9, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72)
		if err != nil {
			return
		}
		err = en.WriteInt(z.ActiveCharacters[za0002].Character)
		if err != nil {
			err = msgp.WrapError(err, "ActiveCharacters", za0002, "Character")
			return
		}
	}
	// write "damage_mitigation"
	err = en.Append(0xb1, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.DamageMitigation)))
	if err != nil {
		err = msgp.WrapError(err, "DamageMitigation")
		return
	}
	for za0003 := range z.DamageMitigation {
		err = en.WriteFloat64(z.DamageMitigation[za0003])
		if err != nil {
			err = msgp.WrapError(err, "DamageMitigation", za0003)
			return
		}
	}
	// write "shield_results"
	err = en.Append(0xae, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	if err != nil {
		return
	}
	err = z.ShieldResults.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ShieldResults")
		return
	}
	// write "characters"
	err = en.Append(0xaa, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Characters)))
	if err != nil {
		err = msgp.WrapError(err, "Characters")
		return
	}
	for za0004 := range z.Characters {
		err = z.Characters[za0004].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Characters", za0004)
			return
		}
	}
	// write "enemies"
	err = en.Append(0xa7, 0x65, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Enemies)))
	if err != nil {
		err = msgp.WrapError(err, "Enemies")
		return
	}
	for za0005 := range z.Enemies {
		err = z.Enemies[za0005].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Enemies", za0005)
			return
		}
	}
	// write "target_overlap"
	err = en.Append(0xae, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70)
	if err != nil {
		return
	}
	err = en.WriteBool(z.TargetOverlap)
	if err != nil {
		err = msgp.WrapError(err, "TargetOverlap")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Result) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 11
	// string "seed"
	o = append(o, 0x8b, 0xa4, 0x73, 0x65, 0x65, 0x64)
	o = msgp.AppendUint64(o, z.Seed)
	// string "duration"
	o = append(o, 0xa8, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendInt(o, z.Duration)
	// string "total_damage"
	o = append(o, 0xac, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65)
	o = msgp.AppendFloat64(o, z.TotalDamage)
	// string "dps"
	o = append(o, 0xa3, 0x64, 0x70, 0x73)
	o = msgp.AppendFloat64(o, z.DPS)
	// string "damage_buckets"
	o = append(o, 0xae, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DamageBuckets)))
	for za0001 := range z.DamageBuckets {
		o = msgp.AppendFloat64(o, z.DamageBuckets[za0001])
	}
	// string "active_characters"
	o = append(o, 0xb1, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.ActiveCharacters)))
	for za0002 := range z.ActiveCharacters {
		// map header, size 3
		// string "start"
		o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
		o = msgp.AppendInt(o, z.ActiveCharacters[za0002].Start)
		// string "end"
		o = append(o, 0xa3, 0x65, 0x6e, 0x64)
		o = msgp.AppendInt(o, z.ActiveCharacters[za0002].End)
		// string "character"
		o = append(o, 0xa9, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72)
		o = msgp.AppendInt(o, z.ActiveCharacters[za0002].Character)
	}
	// string "damage_mitigation"
	o = append(o, 0xb1, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x69, 0x74, 0x69, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e)
	o = msgp.AppendArrayHeader(o, uint32(len(z.DamageMitigation)))
	for za0003 := range z.DamageMitigation {
		o = msgp.AppendFloat64(o, z.DamageMitigation[za0003])
	}
	// string "shield_results"
	o = append(o, 0xae, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73)
	o, err = z.ShieldResults.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ShieldResults")
		return
	}
	// string "characters"
	o = append(o, 0xaa, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Characters)))
	for za0004 := range z.Characters {
		o, err = z.Characters[za0004].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Characters", za0004)
			return
		}
	}
	// string "enemies"
	o = append(o, 0xa7, 0x65, 0x6e, 0x65, 0x6d, 0x69, 0x65, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Enemies)))
	for za0005 := range z.Enemies {
		o, err = z.Enemies[za0005].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Enemies", za0005)
			return
		}
	}
	// string "target_overlap"
	o = append(o, 0xae, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70)
	o = msgp.AppendBool(o, z.TargetOverlap)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Result) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "seed":
			z.Seed, bts, err = msgp.ReadUint64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Seed")
				return
			}
		case "duration":
			z.Duration, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Duration")
				return
			}
		case "total_damage":
			z.TotalDamage, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TotalDamage")
				return
			}
		case "dps":
			z.DPS, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DPS")
				return
			}
		case "damage_buckets":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DamageBuckets")
				return
			}
			if cap(z.DamageBuckets) >= int(zb0002) {
				z.DamageBuckets = (z.DamageBuckets)[:zb0002]
			} else {
				z.DamageBuckets = make([]float64, zb0002)
			}
			for za0001 := range z.DamageBuckets {
				z.DamageBuckets[za0001], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DamageBuckets", za0001)
					return
				}
			}
		case "active_characters":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ActiveCharacters")
				return
			}
			if cap(z.ActiveCharacters) >= int(zb0003) {
				z.ActiveCharacters = (z.ActiveCharacters)[:zb0003]
			} else {
				z.ActiveCharacters = make([]ActiveCharacterInterval, zb0003)
			}
			for za0002 := range z.ActiveCharacters {
				var zb0004 uint32
				zb0004, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "ActiveCharacters", za0002)
					return
				}
				for zb0004 > 0 {
					zb0004--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "ActiveCharacters", za0002)
						return
					}
					switch msgp.UnsafeString(field) {
					case "start":
						z.ActiveCharacters[za0002].Start, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ActiveCharacters", za0002, "Start")
							return
						}
					case "end":
						z.ActiveCharacters[za0002].End, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ActiveCharacters", za0002, "End")
							return
						}
					case "character":
						z.ActiveCharacters[za0002].Character, bts, err = msgp.ReadIntBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "ActiveCharacters", za0002, "Character")
							return
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "ActiveCharacters", za0002)
							return
						}
					}
				}
			}
		case "damage_mitigation":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "DamageMitigation")
				return
			}
			if cap(z.DamageMitigation) >= int(zb0005) {
				z.DamageMitigation = (z.DamageMitigation)[:zb0005]
			} else {
				z.DamageMitigation = make([]float64, zb0005)
			}
			for za0003 := range z.DamageMitigation {
				z.DamageMitigation[za0003], bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "DamageMitigation", za0003)
					return
				}
			}
		case "shield_results":
			bts, err = z.ShieldResults.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "ShieldResults")
				return
			}
		case "characters":
			var zb0006 uint32
			zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Characters")
				return
			}
			if cap(z.Characters) >= int(zb0006) {
				z.Characters = (z.Characters)[:zb0006]
			} else {
				z.Characters = make([]CharacterResult, zb0006)
			}
			for za0004 := range z.Characters {
				bts, err = z.Characters[za0004].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Characters", za0004)
					return
				}
			}
		case "enemies":
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Enemies")
				return
			}
			if cap(z.Enemies) >= int(zb0007) {
				z.Enemies = (z.Enemies)[:zb0007]
			} else {
				z.Enemies = make([]EnemyResult, zb0007)
			}
			for za0005 := range z.Enemies {
				bts, err = z.Enemies[za0005].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Enemies", za0005)
					return
				}
			}
		case "target_overlap":
			z.TargetOverlap, bts, err = msgp.ReadBoolBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "TargetOverlap")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Result) Msgsize() (s int) {
	s = 1 + 5 + msgp.Uint64Size + 9 + msgp.IntSize + 13 + msgp.Float64Size + 4 + msgp.Float64Size + 15 + msgp.ArrayHeaderSize + (len(z.DamageBuckets) * (msgp.Float64Size)) + 18 + msgp.ArrayHeaderSize + (len(z.ActiveCharacters) * (21 + msgp.IntSize + msgp.IntSize + msgp.IntSize)) + 18 + msgp.ArrayHeaderSize + (len(z.DamageMitigation) * (msgp.Float64Size)) + 15 + z.ShieldResults.Msgsize() + 11 + msgp.ArrayHeaderSize
	for za0004 := range z.Characters {
		s += z.Characters[za0004].Msgsize()
	}
	s += 8 + msgp.ArrayHeaderSize
	for za0005 := range z.Enemies {
		s += z.Enemies[za0005].Msgsize()
	}
	s += 15 + msgp.BoolSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShieldInterval) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "hp":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
			if z.HP == nil {
				z.HP = make(map[string]float64, zb0002)
			} else if len(z.HP) > 0 {
				for key := range z.HP {
					delete(z.HP, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 float64
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "HP")
					return
				}
				za0002, err = dc.ReadFloat64()
				if err != nil {
					err = msgp.WrapError(err, "HP", za0001)
					return
				}
				z.HP[za0001] = za0002
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShieldInterval) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "start"
	err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "end"
	err = en.Append(0xa3, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	// write "hp"
	err = en.Append(0xa2, 0x68, 0x70)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.HP)))
	if err != nil {
		err = msgp.WrapError(err, "HP")
		return
	}
	for za0001, za0002 := range z.HP {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "HP")
			return
		}
		err = en.WriteFloat64(za0002)
		if err != nil {
			err = msgp.WrapError(err, "HP", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShieldInterval) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "start"
	o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendInt(o, z.Start)
	// string "end"
	o = append(o, 0xa3, 0x65, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.End)
	// string "hp"
	o = append(o, 0xa2, 0x68, 0x70)
	o = msgp.AppendMapHeader(o, uint32(len(z.HP)))
	for za0001, za0002 := range z.HP {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendFloat64(o, za0002)
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShieldInterval) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "hp":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
			if z.HP == nil {
				z.HP = make(map[string]float64, zb0002)
			} else if len(z.HP) > 0 {
				for key := range z.HP {
					delete(z.HP, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 float64
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HP")
					return
				}
				za0002, bts, err = msgp.ReadFloat64Bytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "HP", za0001)
					return
				}
				z.HP[za0001] = za0002
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShieldInterval) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 4 + msgp.IntSize + 3 + msgp.MapHeaderSize
	if z.HP != nil {
		for za0001, za0002 := range z.HP {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001) + msgp.Float64Size
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShieldResult) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "shields":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Shields")
				return
			}
			if cap(z.Shields) >= int(zb0002) {
				z.Shields = (z.Shields)[:zb0002]
			} else {
				z.Shields = make([]ShieldStats, zb0002)
			}
			for za0001 := range z.Shields {
				var zb0003 uint32
				zb0003, err = dc.ReadMapHeader()
				if err != nil {
					err = msgp.WrapError(err, "Shields", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, err = dc.ReadMapKeyPtr()
					if err != nil {
						err = msgp.WrapError(err, "Shields", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Shields[za0001].Name, err = dc.ReadString()
						if err != nil {
							err = msgp.WrapError(err, "Shields", za0001, "Name")
							return
						}
					case "intervals":
						var zb0004 uint32
						zb0004, err = dc.ReadArrayHeader()
						if err != nil {
							err = msgp.WrapError(err, "Shields", za0001, "Intervals")
							return
						}
						if cap(z.Shields[za0001].Intervals) >= int(zb0004) {
							z.Shields[za0001].Intervals = (z.Shields[za0001].Intervals)[:zb0004]
						} else {
							z.Shields[za0001].Intervals = make([]ShieldInterval, zb0004)
						}
						for za0002 := range z.Shields[za0001].Intervals {
							err = z.Shields[za0001].Intervals[za0002].DecodeMsg(dc)
							if err != nil {
								err = msgp.WrapError(err, "Shields", za0001, "Intervals", za0002)
								return
							}
						}
					default:
						err = dc.Skip()
						if err != nil {
							err = msgp.WrapError(err, "Shields", za0001)
							return
						}
					}
				}
			}
		case "effective_shield":
			var zb0005 uint32
			zb0005, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "EffectiveShield")
				return
			}
			if z.EffectiveShield == nil {
				z.EffectiveShield = make(map[string][]ShieldSingleInterval, zb0005)
			} else if len(z.EffectiveShield) > 0 {
				for key := range z.EffectiveShield {
					delete(z.EffectiveShield, key)
				}
			}
			for zb0005 > 0 {
				zb0005--
				var za0003 string
				var za0004 []ShieldSingleInterval
				za0003, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "EffectiveShield")
					return
				}
				var zb0006 uint32
				zb0006, err = dc.ReadArrayHeader()
				if err != nil {
					err = msgp.WrapError(err, "EffectiveShield", za0003)
					return
				}
				if cap(za0004) >= int(zb0006) {
					za0004 = (za0004)[:zb0006]
				} else {
					za0004 = make([]ShieldSingleInterval, zb0006)
				}
				for za0005 := range za0004 {
					var zb0007 uint32
					zb0007, err = dc.ReadMapHeader()
					if err != nil {
						err = msgp.WrapError(err, "EffectiveShield", za0003, za0005)
						return
					}
					for zb0007 > 0 {
						zb0007--
						field, err = dc.ReadMapKeyPtr()
						if err != nil {
							err = msgp.WrapError(err, "EffectiveShield", za0003, za0005)
							return
						}
						switch msgp.UnsafeString(field) {
						case "start":
							za0004[za0005].Start, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "Start")
								return
							}
						case "end":
							za0004[za0005].End, err = dc.ReadInt()
							if err != nil {
								err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "End")
								return
							}
						case "hp":
							za0004[za0005].HP, err = dc.ReadFloat64()
							if err != nil {
								err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "HP")
								return
							}
						default:
							err = dc.Skip()
							if err != nil {
								err = msgp.WrapError(err, "EffectiveShield", za0003, za0005)
								return
							}
						}
					}
				}
				z.EffectiveShield[za0003] = za0004
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShieldResult) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "shields"
	err = en.Append(0x82, 0xa7, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Shields)))
	if err != nil {
		err = msgp.WrapError(err, "Shields")
		return
	}
	for za0001 := range z.Shields {
		// map header, size 2
		// write "name"
		err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		if err != nil {
			return
		}
		err = en.WriteString(z.Shields[za0001].Name)
		if err != nil {
			err = msgp.WrapError(err, "Shields", za0001, "Name")
			return
		}
		// write "intervals"
		err = en.Append(0xa9, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73)
		if err != nil {
			return
		}
		err = en.WriteArrayHeader(uint32(len(z.Shields[za0001].Intervals)))
		if err != nil {
			err = msgp.WrapError(err, "Shields", za0001, "Intervals")
			return
		}
		for za0002 := range z.Shields[za0001].Intervals {
			err = z.Shields[za0001].Intervals[za0002].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Shields", za0001, "Intervals", za0002)
				return
			}
		}
	}
	// write "effective_shield"
	err = en.Append(0xb0, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.EffectiveShield)))
	if err != nil {
		err = msgp.WrapError(err, "EffectiveShield")
		return
	}
	for za0003, za0004 := range z.EffectiveShield {
		err = en.WriteString(za0003)
		if err != nil {
			err = msgp.WrapError(err, "EffectiveShield")
			return
		}
		err = en.WriteArrayHeader(uint32(len(za0004)))
		if err != nil {
			err = msgp.WrapError(err, "EffectiveShield", za0003)
			return
		}
		for za0005 := range za0004 {
			// map header, size 3
			// write "start"
			err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
			if err != nil {
				return
			}
			err = en.WriteInt(za0004[za0005].Start)
			if err != nil {
				err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "Start")
				return
			}
			// write "end"
			err = en.Append(0xa3, 0x65, 0x6e, 0x64)
			if err != nil {
				return
			}
			err = en.WriteInt(za0004[za0005].End)
			if err != nil {
				err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "End")
				return
			}
			// write "hp"
			err = en.Append(0xa2, 0x68, 0x70)
			if err != nil {
				return
			}
			err = en.WriteFloat64(za0004[za0005].HP)
			if err != nil {
				err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "HP")
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShieldResult) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "shields"
	o = append(o, 0x82, 0xa7, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Shields)))
	for za0001 := range z.Shields {
		// map header, size 2
		// string "name"
		o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
		o = msgp.AppendString(o, z.Shields[za0001].Name)
		// string "intervals"
		o = append(o, 0xa9, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73)
		o = msgp.AppendArrayHeader(o, uint32(len(z.Shields[za0001].Intervals)))
		for za0002 := range z.Shields[za0001].Intervals {
			o, err = z.Shields[za0001].Intervals[za0002].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Shields", za0001, "Intervals", za0002)
				return
			}
		}
	}
	// string "effective_shield"
	o = append(o, 0xb0, 0x65, 0x66, 0x66, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64)
	o = msgp.AppendMapHeader(o, uint32(len(z.EffectiveShield)))
	for za0003, za0004 := range z.EffectiveShield {
		o = msgp.AppendString(o, za0003)
		o = msgp.AppendArrayHeader(o, uint32(len(za0004)))
		for za0005 := range za0004 {
			// map header, size 3
			// string "start"
			o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
			o = msgp.AppendInt(o, za0004[za0005].Start)
			// string "end"
			o = append(o, 0xa3, 0x65, 0x6e, 0x64)
			o = msgp.AppendInt(o, za0004[za0005].End)
			// string "hp"
			o = append(o, 0xa2, 0x68, 0x70)
			o = msgp.AppendFloat64(o, za0004[za0005].HP)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShieldResult) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "shields":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Shields")
				return
			}
			if cap(z.Shields) >= int(zb0002) {
				z.Shields = (z.Shields)[:zb0002]
			} else {
				z.Shields = make([]ShieldStats, zb0002)
			}
			for za0001 := range z.Shields {
				var zb0003 uint32
				zb0003, bts, err = msgp.ReadMapHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Shields", za0001)
					return
				}
				for zb0003 > 0 {
					zb0003--
					field, bts, err = msgp.ReadMapKeyZC(bts)
					if err != nil {
						err = msgp.WrapError(err, "Shields", za0001)
						return
					}
					switch msgp.UnsafeString(field) {
					case "name":
						z.Shields[za0001].Name, bts, err = msgp.ReadStringBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Shields", za0001, "Name")
							return
						}
					case "intervals":
						var zb0004 uint32
						zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
						if err != nil {
							err = msgp.WrapError(err, "Shields", za0001, "Intervals")
							return
						}
						if cap(z.Shields[za0001].Intervals) >= int(zb0004) {
							z.Shields[za0001].Intervals = (z.Shields[za0001].Intervals)[:zb0004]
						} else {
							z.Shields[za0001].Intervals = make([]ShieldInterval, zb0004)
						}
						for za0002 := range z.Shields[za0001].Intervals {
							bts, err = z.Shields[za0001].Intervals[za0002].UnmarshalMsg(bts)
							if err != nil {
								err = msgp.WrapError(err, "Shields", za0001, "Intervals", za0002)
								return
							}
						}
					default:
						bts, err = msgp.Skip(bts)
						if err != nil {
							err = msgp.WrapError(err, "Shields", za0001)
							return
						}
					}
				}
			}
		case "effective_shield":
			var zb0005 uint32
			zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "EffectiveShield")
				return
			}
			if z.EffectiveShield == nil {
				z.EffectiveShield = make(map[string][]ShieldSingleInterval, zb0005)
			} else if len(z.EffectiveShield) > 0 {
				for key := range z.EffectiveShield {
					delete(z.EffectiveShield, key)
				}
			}
			for zb0005 > 0 {
				var za0003 string
				var za0004 []ShieldSingleInterval
				zb0005--
				za0003, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "EffectiveShield")
					return
				}
				var zb0006 uint32
				zb0006, bts, err = msgp.ReadArrayHeaderBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "EffectiveShield", za0003)
					return
				}
				if cap(za0004) >= int(zb0006) {
					za0004 = (za0004)[:zb0006]
				} else {
					za0004 = make([]ShieldSingleInterval, zb0006)
				}
				for za0005 := range za0004 {
					var zb0007 uint32
					zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
					if err != nil {
						err = msgp.WrapError(err, "EffectiveShield", za0003, za0005)
						return
					}
					for zb0007 > 0 {
						zb0007--
						field, bts, err = msgp.ReadMapKeyZC(bts)
						if err != nil {
							err = msgp.WrapError(err, "EffectiveShield", za0003, za0005)
							return
						}
						switch msgp.UnsafeString(field) {
						case "start":
							za0004[za0005].Start, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "Start")
								return
							}
						case "end":
							za0004[za0005].End, bts, err = msgp.ReadIntBytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "End")
								return
							}
						case "hp":
							za0004[za0005].HP, bts, err = msgp.ReadFloat64Bytes(bts)
							if err != nil {
								err = msgp.WrapError(err, "EffectiveShield", za0003, za0005, "HP")
								return
							}
						default:
							bts, err = msgp.Skip(bts)
							if err != nil {
								err = msgp.WrapError(err, "EffectiveShield", za0003, za0005)
								return
							}
						}
					}
				}
				z.EffectiveShield[za0003] = za0004
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShieldResult) Msgsize() (s int) {
	s = 1 + 8 + msgp.ArrayHeaderSize
	for za0001 := range z.Shields {
		s += 1 + 5 + msgp.StringPrefixSize + len(z.Shields[za0001].Name) + 10 + msgp.ArrayHeaderSize
		for za0002 := range z.Shields[za0001].Intervals {
			s += z.Shields[za0001].Intervals[za0002].Msgsize()
		}
	}
	s += 17 + msgp.MapHeaderSize
	if z.EffectiveShield != nil {
		for za0003, za0004 := range z.EffectiveShield {
			_ = za0004
			s += msgp.StringPrefixSize + len(za0003) + msgp.ArrayHeaderSize + (len(za0004) * (14 + msgp.IntSize + msgp.IntSize + msgp.Float64Size))
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShieldSingleInterval) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "hp":
			z.HP, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z ShieldSingleInterval) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 3
	// write "start"
	err = en.Append(0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.Start)
	if err != nil {
		err = msgp.WrapError(err, "Start")
		return
	}
	// write "end"
	err = en.Append(0xa3, 0x65, 0x6e, 0x64)
	if err != nil {
		return
	}
	err = en.WriteInt(z.End)
	if err != nil {
		err = msgp.WrapError(err, "End")
		return
	}
	// write "hp"
	err = en.Append(0xa2, 0x68, 0x70)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.HP)
	if err != nil {
		err = msgp.WrapError(err, "HP")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z ShieldSingleInterval) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 3
	// string "start"
	o = append(o, 0x83, 0xa5, 0x73, 0x74, 0x61, 0x72, 0x74)
	o = msgp.AppendInt(o, z.Start)
	// string "end"
	o = append(o, 0xa3, 0x65, 0x6e, 0x64)
	o = msgp.AppendInt(o, z.End)
	// string "hp"
	o = append(o, 0xa2, 0x68, 0x70)
	o = msgp.AppendFloat64(o, z.HP)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShieldSingleInterval) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "start":
			z.Start, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Start")
				return
			}
		case "end":
			z.End, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "End")
				return
			}
		case "hp":
			z.HP, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "HP")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z ShieldSingleInterval) Msgsize() (s int) {
	s = 1 + 6 + msgp.IntSize + 4 + msgp.IntSize + 3 + msgp.Float64Size
	return
}

// DecodeMsg implements msgp.Decodable
func (z *ShieldStats) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "intervals":
			var zb0002 uint32
			zb0002, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Intervals")
				return
			}
			if cap(z.Intervals) >= int(zb0002) {
				z.Intervals = (z.Intervals)[:zb0002]
			} else {
				z.Intervals = make([]ShieldInterval, zb0002)
			}
			for za0001 := range z.Intervals {
				err = z.Intervals[za0001].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Intervals", za0001)
					return
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *ShieldStats) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 2
	// write "name"
	err = en.Append(0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "intervals"
	err = en.Append(0xa9, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Intervals)))
	if err != nil {
		err = msgp.WrapError(err, "Intervals")
		return
	}
	for za0001 := range z.Intervals {
		err = z.Intervals[za0001].EncodeMsg(en)
		if err != nil {
			err = msgp.WrapError(err, "Intervals", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *ShieldStats) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 2
	// string "name"
	o = append(o, 0x82, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "intervals"
	o = append(o, 0xa9, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Intervals)))
	for za0001 := range z.Intervals {
		o, err = z.Intervals[za0001].MarshalMsg(o)
		if err != nil {
			err = msgp.WrapError(err, "Intervals", za0001)
			return
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *ShieldStats) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "intervals":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Intervals")
				return
			}
			if cap(z.Intervals) >= int(zb0002) {
				z.Intervals = (z.Intervals)[:zb0002]
			} else {
				z.Intervals = make([]ShieldInterval, zb0002)
			}
			for za0001 := range z.Intervals {
				bts, err = z.Intervals[za0001].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Intervals", za0001)
					return
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *ShieldStats) Msgsize() (s int) {
	s = 1 + 5 + msgp.StringPrefixSize + len(z.Name) + 10 + msgp.ArrayHeaderSize
	for za0001 := range z.Intervals {
		s += z.Intervals[za0001].Msgsize()
	}
	return
}
