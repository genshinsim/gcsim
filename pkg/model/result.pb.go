// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: protos/model/result.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Version struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Major string `protobuf:"bytes,1,opt,name=major,proto3" json:"major,omitempty" bson:"major,omitempty"`
	Minor string `protobuf:"bytes,2,opt,name=minor,proto3" json:"minor,omitempty" bson:"minor,omitempty"`
}

func (x *Version) Reset() {
	*x = Version{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Version) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Version) ProtoMessage() {}

func (x *Version) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Version.ProtoReflect.Descriptor instead.
func (*Version) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{0}
}

func (x *Version) GetMajor() string {
	if x != nil {
		return x.Major
	}
	return ""
}

func (x *Version) GetMinor() string {
	if x != nil {
		return x.Minor
	}
	return ""
}

type SimulationResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// required fields (should always be here regardless of schema version)
	SchemaVersion        *Version           `protobuf:"bytes,1,opt,name=schema_version,proto3" json:"schema_version,omitempty" bson:"schema_version,omitempty"`
	SimVersion           *string            `protobuf:"bytes,2,opt,name=sim_version,proto3,oneof" json:"sim_version,omitempty" bson:"sim_version,omitempty"`
	Modified             *bool              `protobuf:"varint,3,opt,name=modified,proto3,oneof" json:"modified,omitempty" bson:"modified,omitempty"`
	BuildDate            string             `protobuf:"bytes,4,opt,name=build_date,proto3" json:"build_date,omitempty" bson:"build_date,omitempty"`
	SampleSeed           string             `protobuf:"bytes,5,opt,name=sample_seed,proto3" json:"sample_seed,omitempty" bson:"sample_seed,omitempty"`
	Config               string             `protobuf:"bytes,6,opt,name=config,json=config_file,proto3" json:"config,omitempty" bson:"config_file,omitempty"`
	SimulatorSettings    *SimulatorSettings `protobuf:"bytes,7,opt,name=simulator_settings,proto3" json:"simulator_settings,omitempty" bson:"simulator_settings,omitempty"`
	EnergySettings       *EnergySettings    `protobuf:"bytes,8,opt,name=energy_settings,proto3" json:"energy_settings,omitempty" bson:"energy_settings,omitempty"`
	InitialCharacter     string             `protobuf:"bytes,9,opt,name=initial_character,proto3" json:"initial_character,omitempty" bson:"initial_character,omitempty"`
	CharacterDetails     []*Character       `protobuf:"bytes,10,rep,name=character_details,proto3" json:"character_details,omitempty" bson:"character_details,omitempty"`
	TargetDetails        []*Enemy           `protobuf:"bytes,11,rep,name=target_details,proto3" json:"target_details,omitempty" bson:"target_details,omitempty"`
	PlayerPosition       *Coord             `protobuf:"bytes,16,opt,name=player_position,proto3" json:"player_position,omitempty" bson:"player_position,omitempty"`
	IncompleteCharacters []string           `protobuf:"bytes,17,rep,name=incomplete_characters,proto3" json:"incomplete_characters,omitempty" bson:"incomplete_characters,omitempty"`
	// All data that changes per iteration goes here
	Statistics *SimulationStatistics `protobuf:"bytes,12,opt,name=statistics,proto3" json:"statistics,omitempty" bson:"statistics,omitempty"`
	// --- optional metadata fields below ---
	Mode        SimMode `protobuf:"varint,13,opt,name=mode,proto3,enum=model.SimMode" json:"mode,omitempty" bson:"mode,omitempty"`
	KeyType     string  `protobuf:"bytes,14,opt,name=key_type,proto3" json:"key_type,omitempty" bson:"key_type,omitempty"`
	CreatedDate int64   `protobuf:"varint,15,opt,name=created_date,proto3" json:"created_date,omitempty" bson:"created_date,omitempty"` //if set to -1 then should result in perm
}

func (x *SimulationResult) Reset() {
	*x = SimulationResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulationResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulationResult) ProtoMessage() {}

func (x *SimulationResult) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulationResult.ProtoReflect.Descriptor instead.
func (*SimulationResult) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{1}
}

func (x *SimulationResult) GetSchemaVersion() *Version {
	if x != nil {
		return x.SchemaVersion
	}
	return nil
}

func (x *SimulationResult) GetSimVersion() string {
	if x != nil && x.SimVersion != nil {
		return *x.SimVersion
	}
	return ""
}

func (x *SimulationResult) GetModified() bool {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return false
}

func (x *SimulationResult) GetBuildDate() string {
	if x != nil {
		return x.BuildDate
	}
	return ""
}

func (x *SimulationResult) GetSampleSeed() string {
	if x != nil {
		return x.SampleSeed
	}
	return ""
}

func (x *SimulationResult) GetConfig() string {
	if x != nil {
		return x.Config
	}
	return ""
}

func (x *SimulationResult) GetSimulatorSettings() *SimulatorSettings {
	if x != nil {
		return x.SimulatorSettings
	}
	return nil
}

func (x *SimulationResult) GetEnergySettings() *EnergySettings {
	if x != nil {
		return x.EnergySettings
	}
	return nil
}

func (x *SimulationResult) GetInitialCharacter() string {
	if x != nil {
		return x.InitialCharacter
	}
	return ""
}

func (x *SimulationResult) GetCharacterDetails() []*Character {
	if x != nil {
		return x.CharacterDetails
	}
	return nil
}

func (x *SimulationResult) GetTargetDetails() []*Enemy {
	if x != nil {
		return x.TargetDetails
	}
	return nil
}

func (x *SimulationResult) GetPlayerPosition() *Coord {
	if x != nil {
		return x.PlayerPosition
	}
	return nil
}

func (x *SimulationResult) GetIncompleteCharacters() []string {
	if x != nil {
		return x.IncompleteCharacters
	}
	return nil
}

func (x *SimulationResult) GetStatistics() *SimulationStatistics {
	if x != nil {
		return x.Statistics
	}
	return nil
}

func (x *SimulationResult) GetMode() SimMode {
	if x != nil {
		return x.Mode
	}
	return SimMode_INVALID_SIM_MODE
}

func (x *SimulationResult) GetKeyType() string {
	if x != nil {
		return x.KeyType
	}
	return ""
}

func (x *SimulationResult) GetCreatedDate() int64 {
	if x != nil {
		return x.CreatedDate
	}
	return 0
}

type SimulationStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// metadata
	MinSeed    string `protobuf:"bytes,1,opt,name=min_seed,proto3" json:"min_seed,omitempty" bson:"min_seed,omitempty"`
	MaxSeed    string `protobuf:"bytes,2,opt,name=max_seed,proto3" json:"max_seed,omitempty" bson:"max_seed,omitempty"`
	P25Seed    string `protobuf:"bytes,3,opt,name=p25_seed,proto3" json:"p25_seed,omitempty" bson:"p25_seed,omitempty"`
	P50Seed    string `protobuf:"bytes,4,opt,name=p50_seed,proto3" json:"p50_seed,omitempty" bson:"p50_seed,omitempty"`
	P75Seed    string `protobuf:"bytes,5,opt,name=p75_seed,proto3" json:"p75_seed,omitempty" bson:"p75_seed,omitempty"`
	Iterations uint32 `protobuf:"varint,6,opt,name=iterations,proto3" json:"iterations,omitempty" bson:"iterations,omitempty"`
	// global overview (global/no group by)
	Duration      *OverviewStats    `protobuf:"bytes,7,opt,name=duration,proto3" json:"duration,omitempty" bson:"duration,omitempty"`
	DPS           *OverviewStats    `protobuf:"bytes,8,opt,name=DPS,json=dps,proto3" json:"DPS,omitempty" bson:"dps,omitempty"`
	RPS           *OverviewStats    `protobuf:"bytes,9,opt,name=RPS,json=rps,proto3" json:"RPS,omitempty" bson:"rps,omitempty"`
	EPS           *OverviewStats    `protobuf:"bytes,10,opt,name=EPS,json=eps,proto3" json:"EPS,omitempty" bson:"eps,omitempty"`
	HPS           *OverviewStats    `protobuf:"bytes,11,opt,name=HPS,json=hps,proto3" json:"HPS,omitempty" bson:"hps,omitempty"`
	SHP           *OverviewStats    `protobuf:"bytes,12,opt,name=SHP,json=shp,proto3" json:"SHP,omitempty" bson:"shp,omitempty"`
	TotalDamage   *DescriptiveStats `protobuf:"bytes,13,opt,name=total_damage,proto3" json:"total_damage,omitempty" bson:"total_damage,omitempty"`
	Warnings      *Warnings         `protobuf:"bytes,14,opt,name=warnings,proto3" json:"warnings,omitempty" bson:"warnings,omitempty"`
	FailedActions []*FailedActions  `protobuf:"bytes,15,rep,name=failed_actions,proto3" json:"failed_actions,omitempty" bson:"failed_actions,omitempty"`
	// damage
	ElementDps                   map[string]*DescriptiveStats `protobuf:"bytes,16,rep,name=element_dps,proto3" json:"element_dps,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"element_dps,omitempty"`
	TargetDps                    map[int32]*DescriptiveStats  `protobuf:"bytes,17,rep,name=target_dps,proto3" json:"target_dps,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"target_dps,omitempty"`
	CharacterDps                 []*DescriptiveStats          `protobuf:"bytes,18,rep,name=character_dps,proto3" json:"character_dps,omitempty" bson:"character_dps,omitempty"`
	BreakdownByElementDps        []*ElementStats              `protobuf:"bytes,19,rep,name=breakdown_by_element_dps,json=dps_by_element,proto3" json:"breakdown_by_element_dps,omitempty" bson:"dps_by_element,omitempty"`
	BreakdownByTargetDps         []*TargetStats               `protobuf:"bytes,20,rep,name=breakdown_by_target_dps,json=dps_by_target,proto3" json:"breakdown_by_target_dps,omitempty" bson:"dps_by_target,omitempty"`
	SourceDps                    []*SourceStats               `protobuf:"bytes,24,rep,name=source_dps,proto3" json:"source_dps,omitempty" bson:"source_dps,omitempty"`
	SourceDamageInstances        []*SourceStats               `protobuf:"bytes,30,rep,name=source_damage_instances,proto3" json:"source_damage_instances,omitempty" bson:"source_damage_instances,omitempty"`
	DamageBuckets                *BucketStats                 `protobuf:"bytes,21,opt,name=damage_buckets,proto3" json:"damage_buckets,omitempty" bson:"damage_buckets,omitempty"`
	CumulativeDamageContribution *CharacterBucketStats        `protobuf:"bytes,22,opt,name=cumulative_damage_contribution,json=cumu_damage_contrib,proto3" json:"cumulative_damage_contribution,omitempty" bson:"cumu_damage_contrib,omitempty"`
	CumulativeDamage             *TargetBucketStats           `protobuf:"bytes,31,opt,name=cumulative_damage,json=cumu_damage,proto3" json:"cumulative_damage,omitempty" bson:"cumu_damage,omitempty"`
	// shield
	Shields map[string]*ShieldInfo `protobuf:"bytes,23,rep,name=shields,proto3" json:"shields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"shields,omitempty"`
	// field time
	FieldTime []*DescriptiveStats `protobuf:"bytes,25,rep,name=field_time,proto3" json:"field_time,omitempty" bson:"field_time,omitempty"`
	// total source energy
	TotalSourceEnergy []*SourceStats `protobuf:"bytes,26,rep,name=total_source_energy,proto3" json:"total_source_energy,omitempty" bson:"total_source_energy,omitempty"`
	// source reactions
	SourceReactions []*SourceStats `protobuf:"bytes,27,rep,name=source_reactions,proto3" json:"source_reactions,omitempty" bson:"source_reactions,omitempty"`
	// character actions
	CharacterActions []*SourceStats `protobuf:"bytes,28,rep,name=character_actions,proto3" json:"character_actions,omitempty" bson:"character_actions,omitempty"`
	// target aura uptime
	TargetAuraUptime []*SourceStats `protobuf:"bytes,29,rep,name=target_aura_uptime,proto3" json:"target_aura_uptime,omitempty" bson:"target_aura_uptime,omitempty"`
}

func (x *SimulationStatistics) Reset() {
	*x = SimulationStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulationStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulationStatistics) ProtoMessage() {}

func (x *SimulationStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulationStatistics.ProtoReflect.Descriptor instead.
func (*SimulationStatistics) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{2}
}

func (x *SimulationStatistics) GetMinSeed() string {
	if x != nil {
		return x.MinSeed
	}
	return ""
}

func (x *SimulationStatistics) GetMaxSeed() string {
	if x != nil {
		return x.MaxSeed
	}
	return ""
}

func (x *SimulationStatistics) GetP25Seed() string {
	if x != nil {
		return x.P25Seed
	}
	return ""
}

func (x *SimulationStatistics) GetP50Seed() string {
	if x != nil {
		return x.P50Seed
	}
	return ""
}

func (x *SimulationStatistics) GetP75Seed() string {
	if x != nil {
		return x.P75Seed
	}
	return ""
}

func (x *SimulationStatistics) GetIterations() uint32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *SimulationStatistics) GetDuration() *OverviewStats {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *SimulationStatistics) GetDPS() *OverviewStats {
	if x != nil {
		return x.DPS
	}
	return nil
}

func (x *SimulationStatistics) GetRPS() *OverviewStats {
	if x != nil {
		return x.RPS
	}
	return nil
}

func (x *SimulationStatistics) GetEPS() *OverviewStats {
	if x != nil {
		return x.EPS
	}
	return nil
}

func (x *SimulationStatistics) GetHPS() *OverviewStats {
	if x != nil {
		return x.HPS
	}
	return nil
}

func (x *SimulationStatistics) GetSHP() *OverviewStats {
	if x != nil {
		return x.SHP
	}
	return nil
}

func (x *SimulationStatistics) GetTotalDamage() *DescriptiveStats {
	if x != nil {
		return x.TotalDamage
	}
	return nil
}

func (x *SimulationStatistics) GetWarnings() *Warnings {
	if x != nil {
		return x.Warnings
	}
	return nil
}

func (x *SimulationStatistics) GetFailedActions() []*FailedActions {
	if x != nil {
		return x.FailedActions
	}
	return nil
}

func (x *SimulationStatistics) GetElementDps() map[string]*DescriptiveStats {
	if x != nil {
		return x.ElementDps
	}
	return nil
}

func (x *SimulationStatistics) GetTargetDps() map[int32]*DescriptiveStats {
	if x != nil {
		return x.TargetDps
	}
	return nil
}

func (x *SimulationStatistics) GetCharacterDps() []*DescriptiveStats {
	if x != nil {
		return x.CharacterDps
	}
	return nil
}

func (x *SimulationStatistics) GetBreakdownByElementDps() []*ElementStats {
	if x != nil {
		return x.BreakdownByElementDps
	}
	return nil
}

func (x *SimulationStatistics) GetBreakdownByTargetDps() []*TargetStats {
	if x != nil {
		return x.BreakdownByTargetDps
	}
	return nil
}

func (x *SimulationStatistics) GetSourceDps() []*SourceStats {
	if x != nil {
		return x.SourceDps
	}
	return nil
}

func (x *SimulationStatistics) GetSourceDamageInstances() []*SourceStats {
	if x != nil {
		return x.SourceDamageInstances
	}
	return nil
}

func (x *SimulationStatistics) GetDamageBuckets() *BucketStats {
	if x != nil {
		return x.DamageBuckets
	}
	return nil
}

func (x *SimulationStatistics) GetCumulativeDamageContribution() *CharacterBucketStats {
	if x != nil {
		return x.CumulativeDamageContribution
	}
	return nil
}

func (x *SimulationStatistics) GetCumulativeDamage() *TargetBucketStats {
	if x != nil {
		return x.CumulativeDamage
	}
	return nil
}

func (x *SimulationStatistics) GetShields() map[string]*ShieldInfo {
	if x != nil {
		return x.Shields
	}
	return nil
}

func (x *SimulationStatistics) GetFieldTime() []*DescriptiveStats {
	if x != nil {
		return x.FieldTime
	}
	return nil
}

func (x *SimulationStatistics) GetTotalSourceEnergy() []*SourceStats {
	if x != nil {
		return x.TotalSourceEnergy
	}
	return nil
}

func (x *SimulationStatistics) GetSourceReactions() []*SourceStats {
	if x != nil {
		return x.SourceReactions
	}
	return nil
}

func (x *SimulationStatistics) GetCharacterActions() []*SourceStats {
	if x != nil {
		return x.CharacterActions
	}
	return nil
}

func (x *SimulationStatistics) GetTargetAuraUptime() []*SourceStats {
	if x != nil {
		return x.TargetAuraUptime
	}
	return nil
}

type SignedSimulationStatistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats *SimulationStatistics `protobuf:"bytes,1,opt,name=stats,proto3" json:"stats,omitempty" bson:"stats,omitempty"`
	Hash  string                `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty" bson:"hash,omitempty"`
}

func (x *SignedSimulationStatistics) Reset() {
	*x = SignedSimulationStatistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignedSimulationStatistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignedSimulationStatistics) ProtoMessage() {}

func (x *SignedSimulationStatistics) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignedSimulationStatistics.ProtoReflect.Descriptor instead.
func (*SignedSimulationStatistics) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{3}
}

func (x *SignedSimulationStatistics) GetStats() *SimulationStatistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *SignedSimulationStatistics) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type OverviewStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min  *float64 `protobuf:"fixed64,1,opt,name=min,proto3,oneof" json:"min,omitempty" bson:"min,omitempty"`
	Max  *float64 `protobuf:"fixed64,2,opt,name=max,proto3,oneof" json:"max,omitempty" bson:"max,omitempty"`
	Mean *float64 `protobuf:"fixed64,3,opt,name=mean,proto3,oneof" json:"mean,omitempty" bson:"mean,omitempty"`
	SD   *float64 `protobuf:"fixed64,4,opt,name=SD,json=sd,proto3,oneof" json:"SD,omitempty" bson:"sd,omitempty"`
	Q1   *float64 `protobuf:"fixed64,5,opt,name=Q1,json=q1,proto3,oneof" json:"Q1,omitempty" bson:"q1,omitempty"`
	Q2   *float64 `protobuf:"fixed64,6,opt,name=Q2,json=q2,proto3,oneof" json:"Q2,omitempty" bson:"q2,omitempty"`
	Q3   *float64 `protobuf:"fixed64,7,opt,name=Q3,json=q3,proto3,oneof" json:"Q3,omitempty" bson:"q3,omitempty"`
	Hist []uint32 `protobuf:"varint,8,rep,packed,name=hist,json=histogram,proto3" json:"hist,omitempty" bson:"histogram,omitempty"`
}

func (x *OverviewStats) Reset() {
	*x = OverviewStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OverviewStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OverviewStats) ProtoMessage() {}

func (x *OverviewStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OverviewStats.ProtoReflect.Descriptor instead.
func (*OverviewStats) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{4}
}

func (x *OverviewStats) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *OverviewStats) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *OverviewStats) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *OverviewStats) GetSD() float64 {
	if x != nil && x.SD != nil {
		return *x.SD
	}
	return 0
}

func (x *OverviewStats) GetQ1() float64 {
	if x != nil && x.Q1 != nil {
		return *x.Q1
	}
	return 0
}

func (x *OverviewStats) GetQ2() float64 {
	if x != nil && x.Q2 != nil {
		return *x.Q2
	}
	return 0
}

func (x *OverviewStats) GetQ3() float64 {
	if x != nil && x.Q3 != nil {
		return *x.Q3
	}
	return 0
}

func (x *OverviewStats) GetHist() []uint32 {
	if x != nil {
		return x.Hist
	}
	return nil
}

type DescriptiveStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min  *float64 `protobuf:"fixed64,1,opt,name=min,proto3,oneof" json:"min,omitempty" bson:"min,omitempty"`
	Max  *float64 `protobuf:"fixed64,2,opt,name=max,proto3,oneof" json:"max,omitempty" bson:"max,omitempty"`
	Mean *float64 `protobuf:"fixed64,3,opt,name=mean,proto3,oneof" json:"mean,omitempty" bson:"mean,omitempty"`
	SD   *float64 `protobuf:"fixed64,4,opt,name=SD,json=sd,proto3,oneof" json:"SD,omitempty" bson:"sd,omitempty"`
}

func (x *DescriptiveStats) Reset() {
	*x = DescriptiveStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DescriptiveStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DescriptiveStats) ProtoMessage() {}

func (x *DescriptiveStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DescriptiveStats.ProtoReflect.Descriptor instead.
func (*DescriptiveStats) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{5}
}

func (x *DescriptiveStats) GetMin() float64 {
	if x != nil && x.Min != nil {
		return *x.Min
	}
	return 0
}

func (x *DescriptiveStats) GetMax() float64 {
	if x != nil && x.Max != nil {
		return *x.Max
	}
	return 0
}

func (x *DescriptiveStats) GetMean() float64 {
	if x != nil && x.Mean != nil {
		return *x.Mean
	}
	return 0
}

func (x *DescriptiveStats) GetSD() float64 {
	if x != nil && x.SD != nil {
		return *x.SD
	}
	return 0
}

type ElementStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Elements map[string]*DescriptiveStats `protobuf:"bytes,1,rep,name=elements,proto3" json:"elements,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"elements,omitempty"`
}

func (x *ElementStats) Reset() {
	*x = ElementStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ElementStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ElementStats) ProtoMessage() {}

func (x *ElementStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ElementStats.ProtoReflect.Descriptor instead.
func (*ElementStats) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{6}
}

func (x *ElementStats) GetElements() map[string]*DescriptiveStats {
	if x != nil {
		return x.Elements
	}
	return nil
}

type TargetStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Targets map[int32]*DescriptiveStats `protobuf:"bytes,1,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"targets,omitempty"`
}

func (x *TargetStats) Reset() {
	*x = TargetStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetStats) ProtoMessage() {}

func (x *TargetStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetStats.ProtoReflect.Descriptor instead.
func (*TargetStats) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{7}
}

func (x *TargetStats) GetTargets() map[int32]*DescriptiveStats {
	if x != nil {
		return x.Targets
	}
	return nil
}

type SourceStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources map[string]*DescriptiveStats `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"sources,omitempty"`
}

func (x *SourceStats) Reset() {
	*x = SourceStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SourceStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SourceStats) ProtoMessage() {}

func (x *SourceStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SourceStats.ProtoReflect.Descriptor instead.
func (*SourceStats) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{8}
}

func (x *SourceStats) GetSources() map[string]*DescriptiveStats {
	if x != nil {
		return x.Sources
	}
	return nil
}

type BucketStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketSize uint32              `protobuf:"varint,1,opt,name=bucket_size,proto3" json:"bucket_size,omitempty" bson:"bucket_size,omitempty"`
	Buckets    []*DescriptiveStats `protobuf:"bytes,2,rep,name=buckets,proto3" json:"buckets,omitempty" bson:"buckets,omitempty"`
}

func (x *BucketStats) Reset() {
	*x = BucketStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BucketStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BucketStats) ProtoMessage() {}

func (x *BucketStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BucketStats.ProtoReflect.Descriptor instead.
func (*BucketStats) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{9}
}

func (x *BucketStats) GetBucketSize() uint32 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *BucketStats) GetBuckets() []*DescriptiveStats {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type CharacterBucketStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketSize uint32              `protobuf:"varint,1,opt,name=bucket_size,proto3" json:"bucket_size,omitempty" bson:"bucket_size,omitempty"`
	Characters []*CharacterBuckets `protobuf:"bytes,2,rep,name=characters,proto3" json:"characters,omitempty" bson:"characters,omitempty"`
}

func (x *CharacterBucketStats) Reset() {
	*x = CharacterBucketStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterBucketStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterBucketStats) ProtoMessage() {}

func (x *CharacterBucketStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterBucketStats.ProtoReflect.Descriptor instead.
func (*CharacterBucketStats) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{10}
}

func (x *CharacterBucketStats) GetBucketSize() uint32 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *CharacterBucketStats) GetCharacters() []*CharacterBuckets {
	if x != nil {
		return x.Characters
	}
	return nil
}

type CharacterBuckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Buckets []*DescriptiveStats `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty" bson:"buckets,omitempty"`
}

func (x *CharacterBuckets) Reset() {
	*x = CharacterBuckets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterBuckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterBuckets) ProtoMessage() {}

func (x *CharacterBuckets) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterBuckets.ProtoReflect.Descriptor instead.
func (*CharacterBuckets) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{11}
}

func (x *CharacterBuckets) GetBuckets() []*DescriptiveStats {
	if x != nil {
		return x.Buckets
	}
	return nil
}

type TargetBucketStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BucketSize uint32                   `protobuf:"varint,1,opt,name=bucket_size,proto3" json:"bucket_size,omitempty" bson:"bucket_size,omitempty"`
	Targets    map[int32]*TargetBuckets `protobuf:"bytes,2,rep,name=targets,proto3" json:"targets,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"targets,omitempty"`
}

func (x *TargetBucketStats) Reset() {
	*x = TargetBucketStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetBucketStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetBucketStats) ProtoMessage() {}

func (x *TargetBucketStats) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetBucketStats.ProtoReflect.Descriptor instead.
func (*TargetBucketStats) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{12}
}

func (x *TargetBucketStats) GetBucketSize() uint32 {
	if x != nil {
		return x.BucketSize
	}
	return 0
}

func (x *TargetBucketStats) GetTargets() map[int32]*TargetBuckets {
	if x != nil {
		return x.Targets
	}
	return nil
}

type TargetBuckets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Overall *TargetBucket `protobuf:"bytes,1,opt,name=overall,proto3" json:"overall,omitempty" bson:"overall,omitempty"`
	Target  *TargetBucket `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty" bson:"target,omitempty"`
}

func (x *TargetBuckets) Reset() {
	*x = TargetBuckets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetBuckets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetBuckets) ProtoMessage() {}

func (x *TargetBuckets) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetBuckets.ProtoReflect.Descriptor instead.
func (*TargetBuckets) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{13}
}

func (x *TargetBuckets) GetOverall() *TargetBucket {
	if x != nil {
		return x.Overall
	}
	return nil
}

func (x *TargetBuckets) GetTarget() *TargetBucket {
	if x != nil {
		return x.Target
	}
	return nil
}

type TargetBucket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min []float64 `protobuf:"fixed64,1,rep,packed,name=min,proto3" json:"min,omitempty" bson:"min,omitempty"`
	Max []float64 `protobuf:"fixed64,2,rep,packed,name=max,proto3" json:"max,omitempty" bson:"max,omitempty"`
	Q1  []float64 `protobuf:"fixed64,3,rep,packed,name=Q1,json=q1,proto3" json:"Q1,omitempty" bson:"q1,omitempty"`
	Q2  []float64 `protobuf:"fixed64,4,rep,packed,name=Q2,json=q2,proto3" json:"Q2,omitempty" bson:"q2,omitempty"`
	Q3  []float64 `protobuf:"fixed64,5,rep,packed,name=Q3,json=q3,proto3" json:"Q3,omitempty" bson:"q3,omitempty"`
}

func (x *TargetBucket) Reset() {
	*x = TargetBucket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetBucket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetBucket) ProtoMessage() {}

func (x *TargetBucket) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetBucket.ProtoReflect.Descriptor instead.
func (*TargetBucket) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{14}
}

func (x *TargetBucket) GetMin() []float64 {
	if x != nil {
		return x.Min
	}
	return nil
}

func (x *TargetBucket) GetMax() []float64 {
	if x != nil {
		return x.Max
	}
	return nil
}

func (x *TargetBucket) GetQ1() []float64 {
	if x != nil {
		return x.Q1
	}
	return nil
}

func (x *TargetBucket) GetQ2() []float64 {
	if x != nil {
		return x.Q2
	}
	return nil
}

func (x *TargetBucket) GetQ3() []float64 {
	if x != nil {
		return x.Q3
	}
	return nil
}

type Warnings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// optional unnecessary, missing == false in ui
	TargetOverlap       bool `protobuf:"varint,1,opt,name=target_overlap,proto3" json:"target_overlap,omitempty" bson:"target_overlap,omitempty"`
	InsufficientEnergy  bool `protobuf:"varint,2,opt,name=insufficient_energy,proto3" json:"insufficient_energy,omitempty" bson:"insufficient_energy,omitempty"`
	InsufficientStamina bool `protobuf:"varint,3,opt,name=insufficient_stamina,proto3" json:"insufficient_stamina,omitempty" bson:"insufficient_stamina,omitempty"`
	SwapCd              bool `protobuf:"varint,4,opt,name=swap_cd,proto3" json:"swap_cd,omitempty" bson:"swap_cd,omitempty"`
	SkillCd             bool `protobuf:"varint,5,opt,name=skill_cd,proto3" json:"skill_cd,omitempty" bson:"skill_cd,omitempty"`
	DashCd              bool `protobuf:"varint,6,opt,name=dash_cd,proto3" json:"dash_cd,omitempty" bson:"dash_cd,omitempty"`
}

func (x *Warnings) Reset() {
	*x = Warnings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Warnings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Warnings) ProtoMessage() {}

func (x *Warnings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Warnings.ProtoReflect.Descriptor instead.
func (*Warnings) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{15}
}

func (x *Warnings) GetTargetOverlap() bool {
	if x != nil {
		return x.TargetOverlap
	}
	return false
}

func (x *Warnings) GetInsufficientEnergy() bool {
	if x != nil {
		return x.InsufficientEnergy
	}
	return false
}

func (x *Warnings) GetInsufficientStamina() bool {
	if x != nil {
		return x.InsufficientStamina
	}
	return false
}

func (x *Warnings) GetSwapCd() bool {
	if x != nil {
		return x.SwapCd
	}
	return false
}

func (x *Warnings) GetSkillCd() bool {
	if x != nil {
		return x.SkillCd
	}
	return false
}

func (x *Warnings) GetDashCd() bool {
	if x != nil {
		return x.DashCd
	}
	return false
}

type FailedActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InsufficientEnergy  *DescriptiveStats `protobuf:"bytes,1,opt,name=insufficient_energy,proto3" json:"insufficient_energy,omitempty" bson:"insufficient_energy,omitempty"`
	InsufficientStamina *DescriptiveStats `protobuf:"bytes,2,opt,name=insufficient_stamina,proto3" json:"insufficient_stamina,omitempty" bson:"insufficient_stamina,omitempty"`
	SwapCd              *DescriptiveStats `protobuf:"bytes,3,opt,name=swap_cd,proto3" json:"swap_cd,omitempty" bson:"swap_cd,omitempty"`
	SkillCd             *DescriptiveStats `protobuf:"bytes,4,opt,name=skill_cd,proto3" json:"skill_cd,omitempty" bson:"skill_cd,omitempty"`
	DashCd              *DescriptiveStats `protobuf:"bytes,5,opt,name=dash_cd,proto3" json:"dash_cd,omitempty" bson:"dash_cd,omitempty"`
}

func (x *FailedActions) Reset() {
	*x = FailedActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedActions) ProtoMessage() {}

func (x *FailedActions) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedActions.ProtoReflect.Descriptor instead.
func (*FailedActions) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{16}
}

func (x *FailedActions) GetInsufficientEnergy() *DescriptiveStats {
	if x != nil {
		return x.InsufficientEnergy
	}
	return nil
}

func (x *FailedActions) GetInsufficientStamina() *DescriptiveStats {
	if x != nil {
		return x.InsufficientStamina
	}
	return nil
}

func (x *FailedActions) GetSwapCd() *DescriptiveStats {
	if x != nil {
		return x.SwapCd
	}
	return nil
}

func (x *FailedActions) GetSkillCd() *DescriptiveStats {
	if x != nil {
		return x.SkillCd
	}
	return nil
}

func (x *FailedActions) GetDashCd() *DescriptiveStats {
	if x != nil {
		return x.DashCd
	}
	return nil
}

type ShieldInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hp     map[string]*DescriptiveStats `protobuf:"bytes,1,rep,name=hp,proto3" json:"hp,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3" bson:"hp,omitempty"`
	Uptime *DescriptiveStats            `protobuf:"bytes,2,opt,name=uptime,proto3" json:"uptime,omitempty" bson:"uptime,omitempty"`
}

func (x *ShieldInfo) Reset() {
	*x = ShieldInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_result_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShieldInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShieldInfo) ProtoMessage() {}

func (x *ShieldInfo) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_result_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShieldInfo.ProtoReflect.Descriptor instead.
func (*ShieldInfo) Descriptor() ([]byte, []int) {
	return file_protos_model_result_proto_rawDescGZIP(), []int{17}
}

func (x *ShieldInfo) GetHp() map[string]*DescriptiveStats {
	if x != nil {
		return x.Hp
	}
	return nil
}

func (x *ShieldInfo) GetUptime() *DescriptiveStats {
	if x != nil {
		return x.Uptime
	}
	return nil
}

var File_protos_model_result_proto protoreflect.FileDescriptor

var file_protos_model_result_proto_rawDesc = []byte{
	0x0a, 0x19, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x1a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2f, 0x73, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x0a, 0x05, 0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6d, 0x61, 0x6a, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x69, 0x6e, 0x6f, 0x72, 0x22, 0xcc, 0x06, 0x0a, 0x10,
	0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x36, 0x0a, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x69, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x01, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x5f, 0x73, 0x65,
	0x65, 0x64, 0x12, 0x1b, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12,
	0x48, 0x0a, 0x12, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x73, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x12, 0x73, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0f, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0f, 0x65, 0x6e, 0x65, 0x72, 0x67,
	0x79, 0x5f, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2c, 0x0a, 0x11, 0x69, 0x6e,
	0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x63,
	0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x3e, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x61, 0x63, 0x74, 0x65, 0x72, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x52, 0x0e,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x36,
	0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x0f, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x5f, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18,
	0x11, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74,
	0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x6d, 0x6f, 0x64,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x53, 0x69, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6b, 0x65, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x42, 0x0e, 0x0a,
	0x0c, 0x5f, 0x73, 0x69, 0x6d, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x22, 0xaa, 0x0f, 0x0a, 0x14, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x32, 0x35, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x32, 0x35, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x35, 0x30, 0x5f, 0x73,
	0x65, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x35, 0x30, 0x5f, 0x73,
	0x65, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x37, 0x35, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x37, 0x35, 0x5f, 0x73, 0x65, 0x65, 0x64, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69,
	0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x26, 0x0a, 0x03, 0x44, 0x50, 0x53, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x03, 0x64, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x52, 0x50, 0x53,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x03, 0x72, 0x70,
	0x73, 0x12, 0x26, 0x0a, 0x03, 0x45, 0x50, 0x53, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x03, 0x65, 0x70, 0x73, 0x12, 0x26, 0x0a, 0x03, 0x48, 0x50, 0x53,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f,
	0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x03, 0x68, 0x70,
	0x73, 0x12, 0x26, 0x0a, 0x03, 0x53, 0x48, 0x50, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x03, 0x73, 0x68, 0x70, 0x12, 0x3b, 0x0a, 0x0c, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x57, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x77, 0x61, 0x72, 0x6e, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x3c, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x52, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x4d, 0x0a, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x70, 0x73,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53,
	0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x64, 0x70, 0x73,
	0x12, 0x4a, 0x0a, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x70, 0x73, 0x18, 0x11,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x70, 0x73, 0x12, 0x3d, 0x0a, 0x0d,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x70, 0x73, 0x18, 0x12, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x63, 0x68,
	0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x70, 0x73, 0x12, 0x45, 0x0a, 0x18, 0x62,
	0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x5f, 0x64, 0x70, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x0e, 0x64, 0x70, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x42, 0x0a, 0x17, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x62, 0x79, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x64, 0x70, 0x73, 0x18, 0x14, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0d, 0x64, 0x70, 0x73, 0x5f, 0x62, 0x79, 0x5f,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x0a, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x5f, 0x64, 0x70, 0x73, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x0a,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x17, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x17, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3a, 0x0a, 0x0e, 0x64, 0x61, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x52, 0x0e, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x12, 0x58, 0x0a, 0x1e, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x63, 0x75, 0x6d, 0x75, 0x5f,
	0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x69, 0x62, 0x12, 0x40,
	0x0a, 0x11, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x6d,
	0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x0b, 0x63, 0x75, 0x6d, 0x75, 0x5f, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65,
	0x12, 0x42, 0x0a, 0x07, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2e, 0x53,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x37, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x44, 0x0a,
	0x13, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x12, 0x3e, 0x0a, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x10, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72,
	0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x42, 0x0a, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x61, 0x75, 0x72, 0x61, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x12, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x75,
	0x72, 0x61, 0x5f, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x56, 0x0a, 0x0f, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x1a, 0x55, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x44, 0x70, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0c, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x63, 0x0a, 0x1a, 0x53, 0x69, 0x67, 0x6e, 0x65,
	0x64, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x31, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x69, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xf8, 0x01, 0x0a,
	0x0d, 0x4f, 0x76, 0x65, 0x72, 0x76, 0x69, 0x65, 0x77, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x15,
	0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04,
	0x6d, 0x65, 0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x53, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x03, 0x52, 0x02, 0x73, 0x64, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x51, 0x31,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x04, 0x52, 0x02, 0x71, 0x31, 0x88, 0x01, 0x01, 0x12,
	0x13, 0x0a, 0x02, 0x51, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x48, 0x05, 0x52, 0x02, 0x71,
	0x32, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x51, 0x33, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x06, 0x52, 0x02, 0x71, 0x33, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x68, 0x69, 0x73,
	0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72,
	0x61, 0x6d, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d,
	0x61, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x61, 0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f,
	0x53, 0x44, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x51, 0x31, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x51, 0x32,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x51, 0x33, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x15, 0x0a, 0x03,
	0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x69, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01,
	0x48, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x65,
	0x61, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x48, 0x02, 0x52, 0x04, 0x6d, 0x65, 0x61, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x53, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48,
	0x03, 0x52, 0x02, 0x73, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x69, 0x6e,
	0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6d, 0x61, 0x78, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x61,
	0x6e, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x53, 0x44, 0x22, 0xa3, 0x01, 0x0a, 0x0c, 0x45, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x3d, 0x0a, 0x08, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73,
	0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x54, 0x0a, 0x0d, 0x45, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d,
	0x01, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x53, 0x0a, 0x0c, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d,
	0x01, 0x0a, 0x0b, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x39,
	0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a, 0x53, 0x0a, 0x0c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x62,
	0x0a, 0x0b, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12,
	0x31, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x73, 0x22, 0x71, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x37, 0x0a, 0x0a,
	0x63, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x61,
	0x63, 0x74, 0x65, 0x72, 0x73, 0x22, 0x45, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74,
	0x65, 0x72, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x31, 0x0a, 0x07, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x73, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0xc8, 0x01, 0x0a,
	0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x73, 0x69, 0x7a, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x1a, 0x50, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x6b, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x07, 0x6f, 0x76, 0x65, 0x72,
	0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x07,
	0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x06, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x22, 0x62, 0x0a, 0x0c, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x01, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x01, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x31, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x71, 0x31, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x32, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x71, 0x32, 0x12, 0x0e, 0x0a, 0x02, 0x51, 0x33, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x01, 0x52, 0x02, 0x71, 0x33, 0x22, 0xe8, 0x01, 0x0a, 0x08, 0x57, 0x61, 0x72,
	0x6e, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x12, 0x30, 0x0a,
	0x13, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e,
	0x65, 0x72, 0x67, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x69, 0x6e, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12,
	0x32, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d,
	0x69, 0x6e, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x61, 0x73,
	0x68, 0x5f, 0x63, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x61, 0x73, 0x68,
	0x5f, 0x63, 0x64, 0x22, 0xc2, 0x02, 0x0a, 0x0d, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x49, 0x0a, 0x13, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x13, 0x69, 0x6e, 0x73,
	0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x4b, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69, 0x63, 0x69, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x75, 0x66, 0x66, 0x69,
	0x63, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x6d, 0x69, 0x6e, 0x61, 0x12, 0x31, 0x0a,
	0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x07, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x63, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x5f, 0x63, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x08, 0x73, 0x6b, 0x69,
	0x6c, 0x6c, 0x5f, 0x63, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52,
	0x07, 0x64, 0x61, 0x73, 0x68, 0x5f, 0x63, 0x64, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x53, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x29, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x02,
	0x68, 0x70, 0x12, 0x2f, 0x0a, 0x06, 0x75, 0x70, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x06, 0x75, 0x70, 0x74,
	0x69, 0x6d, 0x65, 0x1a, 0x4e, 0x0a, 0x07, 0x48, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x6e, 0x73, 0x69, 0x6d, 0x2f, 0x67, 0x63, 0x73,
	0x69, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_model_result_proto_rawDescOnce sync.Once
	file_protos_model_result_proto_rawDescData = file_protos_model_result_proto_rawDesc
)

func file_protos_model_result_proto_rawDescGZIP() []byte {
	file_protos_model_result_proto_rawDescOnce.Do(func() {
		file_protos_model_result_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_model_result_proto_rawDescData)
	})
	return file_protos_model_result_proto_rawDescData
}

var file_protos_model_result_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_protos_model_result_proto_goTypes = []interface{}{
	(*Version)(nil),                    // 0: model.Version
	(*SimulationResult)(nil),           // 1: model.SimulationResult
	(*SimulationStatistics)(nil),       // 2: model.SimulationStatistics
	(*SignedSimulationStatistics)(nil), // 3: model.SignedSimulationStatistics
	(*OverviewStats)(nil),              // 4: model.OverviewStats
	(*DescriptiveStats)(nil),           // 5: model.DescriptiveStats
	(*ElementStats)(nil),               // 6: model.ElementStats
	(*TargetStats)(nil),                // 7: model.TargetStats
	(*SourceStats)(nil),                // 8: model.SourceStats
	(*BucketStats)(nil),                // 9: model.BucketStats
	(*CharacterBucketStats)(nil),       // 10: model.CharacterBucketStats
	(*CharacterBuckets)(nil),           // 11: model.CharacterBuckets
	(*TargetBucketStats)(nil),          // 12: model.TargetBucketStats
	(*TargetBuckets)(nil),              // 13: model.TargetBuckets
	(*TargetBucket)(nil),               // 14: model.TargetBucket
	(*Warnings)(nil),                   // 15: model.Warnings
	(*FailedActions)(nil),              // 16: model.FailedActions
	(*ShieldInfo)(nil),                 // 17: model.ShieldInfo
	nil,                                // 18: model.SimulationStatistics.ElementDpsEntry
	nil,                                // 19: model.SimulationStatistics.TargetDpsEntry
	nil,                                // 20: model.SimulationStatistics.ShieldsEntry
	nil,                                // 21: model.ElementStats.ElementsEntry
	nil,                                // 22: model.TargetStats.TargetsEntry
	nil,                                // 23: model.SourceStats.SourcesEntry
	nil,                                // 24: model.TargetBucketStats.TargetsEntry
	nil,                                // 25: model.ShieldInfo.HpEntry
	(*SimulatorSettings)(nil),          // 26: model.SimulatorSettings
	(*EnergySettings)(nil),             // 27: model.EnergySettings
	(*Character)(nil),                  // 28: model.Character
	(*Enemy)(nil),                      // 29: model.Enemy
	(*Coord)(nil),                      // 30: model.Coord
	(SimMode)(0),                       // 31: model.SimMode
}
var file_protos_model_result_proto_depIdxs = []int32{
	0,  // 0: model.SimulationResult.schema_version:type_name -> model.Version
	26, // 1: model.SimulationResult.simulator_settings:type_name -> model.SimulatorSettings
	27, // 2: model.SimulationResult.energy_settings:type_name -> model.EnergySettings
	28, // 3: model.SimulationResult.character_details:type_name -> model.Character
	29, // 4: model.SimulationResult.target_details:type_name -> model.Enemy
	30, // 5: model.SimulationResult.player_position:type_name -> model.Coord
	2,  // 6: model.SimulationResult.statistics:type_name -> model.SimulationStatistics
	31, // 7: model.SimulationResult.mode:type_name -> model.SimMode
	4,  // 8: model.SimulationStatistics.duration:type_name -> model.OverviewStats
	4,  // 9: model.SimulationStatistics.DPS:type_name -> model.OverviewStats
	4,  // 10: model.SimulationStatistics.RPS:type_name -> model.OverviewStats
	4,  // 11: model.SimulationStatistics.EPS:type_name -> model.OverviewStats
	4,  // 12: model.SimulationStatistics.HPS:type_name -> model.OverviewStats
	4,  // 13: model.SimulationStatistics.SHP:type_name -> model.OverviewStats
	5,  // 14: model.SimulationStatistics.total_damage:type_name -> model.DescriptiveStats
	15, // 15: model.SimulationStatistics.warnings:type_name -> model.Warnings
	16, // 16: model.SimulationStatistics.failed_actions:type_name -> model.FailedActions
	18, // 17: model.SimulationStatistics.element_dps:type_name -> model.SimulationStatistics.ElementDpsEntry
	19, // 18: model.SimulationStatistics.target_dps:type_name -> model.SimulationStatistics.TargetDpsEntry
	5,  // 19: model.SimulationStatistics.character_dps:type_name -> model.DescriptiveStats
	6,  // 20: model.SimulationStatistics.breakdown_by_element_dps:type_name -> model.ElementStats
	7,  // 21: model.SimulationStatistics.breakdown_by_target_dps:type_name -> model.TargetStats
	8,  // 22: model.SimulationStatistics.source_dps:type_name -> model.SourceStats
	8,  // 23: model.SimulationStatistics.source_damage_instances:type_name -> model.SourceStats
	9,  // 24: model.SimulationStatistics.damage_buckets:type_name -> model.BucketStats
	10, // 25: model.SimulationStatistics.cumulative_damage_contribution:type_name -> model.CharacterBucketStats
	12, // 26: model.SimulationStatistics.cumulative_damage:type_name -> model.TargetBucketStats
	20, // 27: model.SimulationStatistics.shields:type_name -> model.SimulationStatistics.ShieldsEntry
	5,  // 28: model.SimulationStatistics.field_time:type_name -> model.DescriptiveStats
	8,  // 29: model.SimulationStatistics.total_source_energy:type_name -> model.SourceStats
	8,  // 30: model.SimulationStatistics.source_reactions:type_name -> model.SourceStats
	8,  // 31: model.SimulationStatistics.character_actions:type_name -> model.SourceStats
	8,  // 32: model.SimulationStatistics.target_aura_uptime:type_name -> model.SourceStats
	2,  // 33: model.SignedSimulationStatistics.stats:type_name -> model.SimulationStatistics
	21, // 34: model.ElementStats.elements:type_name -> model.ElementStats.ElementsEntry
	22, // 35: model.TargetStats.targets:type_name -> model.TargetStats.TargetsEntry
	23, // 36: model.SourceStats.sources:type_name -> model.SourceStats.SourcesEntry
	5,  // 37: model.BucketStats.buckets:type_name -> model.DescriptiveStats
	11, // 38: model.CharacterBucketStats.characters:type_name -> model.CharacterBuckets
	5,  // 39: model.CharacterBuckets.buckets:type_name -> model.DescriptiveStats
	24, // 40: model.TargetBucketStats.targets:type_name -> model.TargetBucketStats.TargetsEntry
	14, // 41: model.TargetBuckets.overall:type_name -> model.TargetBucket
	14, // 42: model.TargetBuckets.target:type_name -> model.TargetBucket
	5,  // 43: model.FailedActions.insufficient_energy:type_name -> model.DescriptiveStats
	5,  // 44: model.FailedActions.insufficient_stamina:type_name -> model.DescriptiveStats
	5,  // 45: model.FailedActions.swap_cd:type_name -> model.DescriptiveStats
	5,  // 46: model.FailedActions.skill_cd:type_name -> model.DescriptiveStats
	5,  // 47: model.FailedActions.dash_cd:type_name -> model.DescriptiveStats
	25, // 48: model.ShieldInfo.hp:type_name -> model.ShieldInfo.HpEntry
	5,  // 49: model.ShieldInfo.uptime:type_name -> model.DescriptiveStats
	5,  // 50: model.SimulationStatistics.ElementDpsEntry.value:type_name -> model.DescriptiveStats
	5,  // 51: model.SimulationStatistics.TargetDpsEntry.value:type_name -> model.DescriptiveStats
	17, // 52: model.SimulationStatistics.ShieldsEntry.value:type_name -> model.ShieldInfo
	5,  // 53: model.ElementStats.ElementsEntry.value:type_name -> model.DescriptiveStats
	5,  // 54: model.TargetStats.TargetsEntry.value:type_name -> model.DescriptiveStats
	5,  // 55: model.SourceStats.SourcesEntry.value:type_name -> model.DescriptiveStats
	13, // 56: model.TargetBucketStats.TargetsEntry.value:type_name -> model.TargetBuckets
	5,  // 57: model.ShieldInfo.HpEntry.value:type_name -> model.DescriptiveStats
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_protos_model_result_proto_init() }
func file_protos_model_result_proto_init() {
	if File_protos_model_result_proto != nil {
		return
	}
	file_protos_model_sim_proto_init()
	file_protos_model_enums_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_protos_model_result_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Version); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulationResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulationStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignedSimulationStatistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OverviewStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DescriptiveStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ElementStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SourceStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BucketStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterBucketStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterBuckets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetBucketStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetBuckets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetBucket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Warnings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_result_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShieldInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_protos_model_result_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_protos_model_result_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_protos_model_result_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_model_result_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_model_result_proto_goTypes,
		DependencyIndexes: file_protos_model_result_proto_depIdxs,
		MessageInfos:      file_protos_model_result_proto_msgTypes,
	}.Build()
	File_protos_model_result_proto = out.File
	file_protos_model_result_proto_rawDesc = nil
	file_protos_model_result_proto_goTypes = nil
	file_protos_model_result_proto_depIdxs = nil
}
