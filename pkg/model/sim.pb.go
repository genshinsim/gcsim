// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: protos/model/sim.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AvatarCurveType int32

const (
	AvatarCurveType_GROW_CURVE_HP_S4     AvatarCurveType = 0
	AvatarCurveType_GROW_CURVE_ATTACK_S4 AvatarCurveType = 1
	AvatarCurveType_GROW_CURVE_HP_S5     AvatarCurveType = 2
	AvatarCurveType_GROW_CURVE_ATTACK_S5 AvatarCurveType = 3
)

// Enum value maps for AvatarCurveType.
var (
	AvatarCurveType_name = map[int32]string{
		0: "GROW_CURVE_HP_S4",
		1: "GROW_CURVE_ATTACK_S4",
		2: "GROW_CURVE_HP_S5",
		3: "GROW_CURVE_ATTACK_S5",
	}
	AvatarCurveType_value = map[string]int32{
		"GROW_CURVE_HP_S4":     0,
		"GROW_CURVE_ATTACK_S4": 1,
		"GROW_CURVE_HP_S5":     2,
		"GROW_CURVE_ATTACK_S5": 3,
	}
)

func (x AvatarCurveType) Enum() *AvatarCurveType {
	p := new(AvatarCurveType)
	*p = x
	return p
}

func (x AvatarCurveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarCurveType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_sim_proto_enumTypes[0].Descriptor()
}

func (AvatarCurveType) Type() protoreflect.EnumType {
	return &file_protos_model_sim_proto_enumTypes[0]
}

func (x AvatarCurveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarCurveType.Descriptor instead.
func (AvatarCurveType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{0}
}

type WeaponCurveType int32

const (
	WeaponCurveType_GROW_CURVE_ATTACK_101   WeaponCurveType = 0
	WeaponCurveType_GROW_CURVE_ATTACK_102   WeaponCurveType = 1
	WeaponCurveType_GROW_CURVE_ATTACK_103   WeaponCurveType = 2
	WeaponCurveType_GROW_CURVE_ATTACK_104   WeaponCurveType = 3
	WeaponCurveType_GROW_CURVE_ATTACK_105   WeaponCurveType = 4
	WeaponCurveType_GROW_CURVE_CRITICAL_101 WeaponCurveType = 5
	WeaponCurveType_GROW_CURVE_ATTACK_201   WeaponCurveType = 6
	WeaponCurveType_GROW_CURVE_ATTACK_202   WeaponCurveType = 7
	WeaponCurveType_GROW_CURVE_ATTACK_203   WeaponCurveType = 8
	WeaponCurveType_GROW_CURVE_ATTACK_204   WeaponCurveType = 9
	WeaponCurveType_GROW_CURVE_ATTACK_205   WeaponCurveType = 10
	WeaponCurveType_GROW_CURVE_CRITICAL_201 WeaponCurveType = 11
	WeaponCurveType_GROW_CURVE_ATTACK_301   WeaponCurveType = 12
	WeaponCurveType_GROW_CURVE_ATTACK_302   WeaponCurveType = 13
	WeaponCurveType_GROW_CURVE_ATTACK_303   WeaponCurveType = 14
	WeaponCurveType_GROW_CURVE_ATTACK_304   WeaponCurveType = 15
	WeaponCurveType_GROW_CURVE_ATTACK_305   WeaponCurveType = 16
	WeaponCurveType_GROW_CURVE_CRITICAL_301 WeaponCurveType = 17
)

// Enum value maps for WeaponCurveType.
var (
	WeaponCurveType_name = map[int32]string{
		0:  "GROW_CURVE_ATTACK_101",
		1:  "GROW_CURVE_ATTACK_102",
		2:  "GROW_CURVE_ATTACK_103",
		3:  "GROW_CURVE_ATTACK_104",
		4:  "GROW_CURVE_ATTACK_105",
		5:  "GROW_CURVE_CRITICAL_101",
		6:  "GROW_CURVE_ATTACK_201",
		7:  "GROW_CURVE_ATTACK_202",
		8:  "GROW_CURVE_ATTACK_203",
		9:  "GROW_CURVE_ATTACK_204",
		10: "GROW_CURVE_ATTACK_205",
		11: "GROW_CURVE_CRITICAL_201",
		12: "GROW_CURVE_ATTACK_301",
		13: "GROW_CURVE_ATTACK_302",
		14: "GROW_CURVE_ATTACK_303",
		15: "GROW_CURVE_ATTACK_304",
		16: "GROW_CURVE_ATTACK_305",
		17: "GROW_CURVE_CRITICAL_301",
	}
	WeaponCurveType_value = map[string]int32{
		"GROW_CURVE_ATTACK_101":   0,
		"GROW_CURVE_ATTACK_102":   1,
		"GROW_CURVE_ATTACK_103":   2,
		"GROW_CURVE_ATTACK_104":   3,
		"GROW_CURVE_ATTACK_105":   4,
		"GROW_CURVE_CRITICAL_101": 5,
		"GROW_CURVE_ATTACK_201":   6,
		"GROW_CURVE_ATTACK_202":   7,
		"GROW_CURVE_ATTACK_203":   8,
		"GROW_CURVE_ATTACK_204":   9,
		"GROW_CURVE_ATTACK_205":   10,
		"GROW_CURVE_CRITICAL_201": 11,
		"GROW_CURVE_ATTACK_301":   12,
		"GROW_CURVE_ATTACK_302":   13,
		"GROW_CURVE_ATTACK_303":   14,
		"GROW_CURVE_ATTACK_304":   15,
		"GROW_CURVE_ATTACK_305":   16,
		"GROW_CURVE_CRITICAL_301": 17,
	}
)

func (x WeaponCurveType) Enum() *WeaponCurveType {
	p := new(WeaponCurveType)
	*p = x
	return p
}

func (x WeaponCurveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeaponCurveType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_sim_proto_enumTypes[1].Descriptor()
}

func (WeaponCurveType) Type() protoreflect.EnumType {
	return &file_protos_model_sim_proto_enumTypes[1]
}

func (x WeaponCurveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeaponCurveType.Descriptor instead.
func (WeaponCurveType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{1}
}

type WeaponClass int32

const (
	WeaponClass_WEAPON_SWORD_ONE_HAND WeaponClass = 0
	WeaponClass_WEAPON_CLAYMORE       WeaponClass = 1
	WeaponClass_WEAPON_POLE           WeaponClass = 2
	WeaponClass_WEAPON_BOW            WeaponClass = 3
	WeaponClass_WEAPON_CATALYST       WeaponClass = 4
)

// Enum value maps for WeaponClass.
var (
	WeaponClass_name = map[int32]string{
		0: "WEAPON_SWORD_ONE_HAND",
		1: "WEAPON_CLAYMORE",
		2: "WEAPON_POLE",
		3: "WEAPON_BOW",
		4: "WEAPON_CATALYST",
	}
	WeaponClass_value = map[string]int32{
		"WEAPON_SWORD_ONE_HAND": 0,
		"WEAPON_CLAYMORE":       1,
		"WEAPON_POLE":           2,
		"WEAPON_BOW":            3,
		"WEAPON_CATALYST":       4,
	}
)

func (x WeaponClass) Enum() *WeaponClass {
	p := new(WeaponClass)
	*p = x
	return p
}

func (x WeaponClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeaponClass) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_sim_proto_enumTypes[2].Descriptor()
}

func (WeaponClass) Type() protoreflect.EnumType {
	return &file_protos_model_sim_proto_enumTypes[2]
}

func (x WeaponClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeaponClass.Descriptor instead.
func (WeaponClass) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{2}
}

type BodyType int32

const (
	BodyType_BODY_UNKNOWN BodyType = 0
	BodyType_BODY_BOY     BodyType = 1
	BodyType_BODY_GIRL    BodyType = 2
	BodyType_BODY_MALE    BodyType = 3
	BodyType_BODY_LADY    BodyType = 4
	BodyType_BODY_LOLI    BodyType = 5
)

// Enum value maps for BodyType.
var (
	BodyType_name = map[int32]string{
		0: "BODY_UNKNOWN",
		1: "BODY_BOY",
		2: "BODY_GIRL",
		3: "BODY_MALE",
		4: "BODY_LADY",
		5: "BODY_LOLI",
	}
	BodyType_value = map[string]int32{
		"BODY_UNKNOWN": 0,
		"BODY_BOY":     1,
		"BODY_GIRL":    2,
		"BODY_MALE":    3,
		"BODY_LADY":    4,
		"BODY_LOLI":    5,
	}
)

func (x BodyType) Enum() *BodyType {
	p := new(BodyType)
	*p = x
	return p
}

func (x BodyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_sim_proto_enumTypes[3].Descriptor()
}

func (BodyType) Type() protoreflect.EnumType {
	return &file_protos_model_sim_proto_enumTypes[3]
}

func (x BodyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyType.Descriptor instead.
func (BodyType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{3}
}

type ZoneType int32

const (
	ZoneType_ASSOC_TYPE_UNKNOWN   ZoneType = 0
	ZoneType_ASSOC_TYPE_MONDSTADT ZoneType = 1
	ZoneType_ASSOC_TYPE_LIYUE     ZoneType = 2
	ZoneType_ASSOC_TYPE_INAZUMA   ZoneType = 3
	ZoneType_ASSOC_TYPE_SUMERU    ZoneType = 4
	ZoneType_ASSOC_TYPE_FATUI     ZoneType = 5
)

// Enum value maps for ZoneType.
var (
	ZoneType_name = map[int32]string{
		0: "ASSOC_TYPE_UNKNOWN",
		1: "ASSOC_TYPE_MONDSTADT",
		2: "ASSOC_TYPE_LIYUE",
		3: "ASSOC_TYPE_INAZUMA",
		4: "ASSOC_TYPE_SUMERU",
		5: "ASSOC_TYPE_FATUI",
	}
	ZoneType_value = map[string]int32{
		"ASSOC_TYPE_UNKNOWN":   0,
		"ASSOC_TYPE_MONDSTADT": 1,
		"ASSOC_TYPE_LIYUE":     2,
		"ASSOC_TYPE_INAZUMA":   3,
		"ASSOC_TYPE_SUMERU":    4,
		"ASSOC_TYPE_FATUI":     5,
	}
)

func (x ZoneType) Enum() *ZoneType {
	p := new(ZoneType)
	*p = x
	return p
}

func (x ZoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_sim_proto_enumTypes[4].Descriptor()
}

func (ZoneType) Type() protoreflect.EnumType {
	return &file_protos_model_sim_proto_enumTypes[4]
}

func (x ZoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZoneType.Descriptor instead.
func (ZoneType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{4}
}

type Element int32

const (
	Element_Electric         Element = 0
	Element_Fire             Element = 1
	Element_Ice              Element = 2
	Element_Water            Element = 3
	Element_Grass            Element = 4
	Element_ELEMENT_QUICKEN  Element = 5
	Element_ELEMENT_FROZEN   Element = 6
	Element_Wind             Element = 7
	Element_Rock             Element = 8
	Element_ELEMENT_NONE     Element = 9
	Element_ELEMENT_PHYSICAL Element = 10
	Element_ELEMENT_UNKNOWN  Element = 11
)

// Enum value maps for Element.
var (
	Element_name = map[int32]string{
		0:  "Electric",
		1:  "Fire",
		2:  "Ice",
		3:  "Water",
		4:  "Grass",
		5:  "ELEMENT_QUICKEN",
		6:  "ELEMENT_FROZEN",
		7:  "Wind",
		8:  "Rock",
		9:  "ELEMENT_NONE",
		10: "ELEMENT_PHYSICAL",
		11: "ELEMENT_UNKNOWN",
	}
	Element_value = map[string]int32{
		"Electric":         0,
		"Fire":             1,
		"Ice":              2,
		"Water":            3,
		"Grass":            4,
		"ELEMENT_QUICKEN":  5,
		"ELEMENT_FROZEN":   6,
		"Wind":             7,
		"Rock":             8,
		"ELEMENT_NONE":     9,
		"ELEMENT_PHYSICAL": 10,
		"ELEMENT_UNKNOWN":  11,
	}
)

func (x Element) Enum() *Element {
	p := new(Element)
	*p = x
	return p
}

func (x Element) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Element) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_sim_proto_enumTypes[5].Descriptor()
}

func (Element) Type() protoreflect.EnumType {
	return &file_protos_model_sim_proto_enumTypes[5]
}

func (x Element) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Element.Descriptor instead.
func (Element) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{5}
}

type StatType int32

const (
	StatType_UNSPECIFIED                                 StatType = 0
	StatType_FIGHT_PROP_DEFENSE_PERCENT                  StatType = 1
	StatType_FIGHT_PROP_DEFENSE                          StatType = 2
	StatType_FIGHT_PROP_HP                               StatType = 3
	StatType_FIGHT_PROP_HP_PERCENT                       StatType = 4
	StatType_FIGHT_PROP_ATTACK                           StatType = 5
	StatType_FIGHT_PROP_ATTACK_PERCENT                   StatType = 6
	StatType_FIGHT_PROP_CHARGE_EFFICIENCY                StatType = 7
	StatType_FIGHT_PROP_ELEMENT_MASTERY                  StatType = 8
	StatType_FIGHT_PROP_CRITICAL                         StatType = 9
	StatType_FIGHT_PROP_CRITICAL_HURT                    StatType = 10
	StatType_FIGHT_PROP_HEAL                             StatType = 11
	StatType_FIGHT_PROP_FIRE_ADD_HURT                    StatType = 12
	StatType_FIGHT_PROP_WATER_ADD_HURT                   StatType = 13
	StatType_FIGHT_PROP_GRASS_ADD_HURT                   StatType = 14
	StatType_FIGHT_PROP_ELEC_ADD_HURT                    StatType = 15
	StatType_FIGHT_PROP_WIND_ADD_HURT                    StatType = 16
	StatType_FIGHT_PROP_ICE_ADD_HURT                     StatType = 17
	StatType_FIGHT_PROP_ROCK_ADD_HURT                    StatType = 18
	StatType_FIGHT_PROP_PHYSICAL_ADD_HURT                StatType = 19
	StatType_FIGHT_PROP_SHIELD_COST_MINUS_RATIO_ADD_HURT StatType = 20
	StatType_FIGHT_PROP_HEALED_ADD                       StatType = 21 //healing bonus
	StatType_FIGHT_PROP_BASE_HP                          StatType = 22 // base hp
	StatType_FIGHT_PROP_BASE_ATTACK                      StatType = 23 // base attack
	StatType_FIGHT_PROP_BASE_DEFENSE                     StatType = 24 // base defense
	StatType_FIGHT_PROP_MAX_HP                           StatType = 25 // max hp; not really used?
)

// Enum value maps for StatType.
var (
	StatType_name = map[int32]string{
		0:  "UNSPECIFIED",
		1:  "FIGHT_PROP_DEFENSE_PERCENT",
		2:  "FIGHT_PROP_DEFENSE",
		3:  "FIGHT_PROP_HP",
		4:  "FIGHT_PROP_HP_PERCENT",
		5:  "FIGHT_PROP_ATTACK",
		6:  "FIGHT_PROP_ATTACK_PERCENT",
		7:  "FIGHT_PROP_CHARGE_EFFICIENCY",
		8:  "FIGHT_PROP_ELEMENT_MASTERY",
		9:  "FIGHT_PROP_CRITICAL",
		10: "FIGHT_PROP_CRITICAL_HURT",
		11: "FIGHT_PROP_HEAL",
		12: "FIGHT_PROP_FIRE_ADD_HURT",
		13: "FIGHT_PROP_WATER_ADD_HURT",
		14: "FIGHT_PROP_GRASS_ADD_HURT",
		15: "FIGHT_PROP_ELEC_ADD_HURT",
		16: "FIGHT_PROP_WIND_ADD_HURT",
		17: "FIGHT_PROP_ICE_ADD_HURT",
		18: "FIGHT_PROP_ROCK_ADD_HURT",
		19: "FIGHT_PROP_PHYSICAL_ADD_HURT",
		20: "FIGHT_PROP_SHIELD_COST_MINUS_RATIO_ADD_HURT",
		21: "FIGHT_PROP_HEALED_ADD",
		22: "FIGHT_PROP_BASE_HP",
		23: "FIGHT_PROP_BASE_ATTACK",
		24: "FIGHT_PROP_BASE_DEFENSE",
		25: "FIGHT_PROP_MAX_HP",
	}
	StatType_value = map[string]int32{
		"UNSPECIFIED":                                 0,
		"FIGHT_PROP_DEFENSE_PERCENT":                  1,
		"FIGHT_PROP_DEFENSE":                          2,
		"FIGHT_PROP_HP":                               3,
		"FIGHT_PROP_HP_PERCENT":                       4,
		"FIGHT_PROP_ATTACK":                           5,
		"FIGHT_PROP_ATTACK_PERCENT":                   6,
		"FIGHT_PROP_CHARGE_EFFICIENCY":                7,
		"FIGHT_PROP_ELEMENT_MASTERY":                  8,
		"FIGHT_PROP_CRITICAL":                         9,
		"FIGHT_PROP_CRITICAL_HURT":                    10,
		"FIGHT_PROP_HEAL":                             11,
		"FIGHT_PROP_FIRE_ADD_HURT":                    12,
		"FIGHT_PROP_WATER_ADD_HURT":                   13,
		"FIGHT_PROP_GRASS_ADD_HURT":                   14,
		"FIGHT_PROP_ELEC_ADD_HURT":                    15,
		"FIGHT_PROP_WIND_ADD_HURT":                    16,
		"FIGHT_PROP_ICE_ADD_HURT":                     17,
		"FIGHT_PROP_ROCK_ADD_HURT":                    18,
		"FIGHT_PROP_PHYSICAL_ADD_HURT":                19,
		"FIGHT_PROP_SHIELD_COST_MINUS_RATIO_ADD_HURT": 20,
		"FIGHT_PROP_HEALED_ADD":                       21,
		"FIGHT_PROP_BASE_HP":                          22,
		"FIGHT_PROP_BASE_ATTACK":                      23,
		"FIGHT_PROP_BASE_DEFENSE":                     24,
		"FIGHT_PROP_MAX_HP":                           25,
	}
)

func (x StatType) Enum() *StatType {
	p := new(StatType)
	*p = x
	return p
}

func (x StatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_sim_proto_enumTypes[6].Descriptor()
}

func (StatType) Type() protoreflect.EnumType {
	return &file_protos_model_sim_proto_enumTypes[6]
}

func (x StatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatType.Descriptor instead.
func (StatType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{6}
}

type SimMode int32

const (
	SimMode_DURATION_MODE SimMode = 0
	SimMode_TTK_MODE      SimMode = 1
)

// Enum value maps for SimMode.
var (
	SimMode_name = map[int32]string{
		0: "DURATION_MODE",
		1: "TTK_MODE",
	}
	SimMode_value = map[string]int32{
		"DURATION_MODE": 0,
		"TTK_MODE":      1,
	}
)

func (x SimMode) Enum() *SimMode {
	p := new(SimMode)
	*p = x
	return p
}

func (x SimMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_sim_proto_enumTypes[7].Descriptor()
}

func (SimMode) Type() protoreflect.EnumType {
	return &file_protos_model_sim_proto_enumTypes[7]
}

func (x SimMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimMode.Descriptor instead.
func (SimMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{7}
}

type Character struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name          string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name,omitempty"`
	Element       string            `protobuf:"bytes,2,opt,name=element,proto3" json:"element,omitempty" bson:"element,omitempty"`
	Level         int32             `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty" bson:"level,omitempty"`
	MaxLevel      int32             `protobuf:"varint,4,opt,name=max_level,proto3" json:"max_level,omitempty" bson:"max_level,omitempty"`
	Cons          int32             `protobuf:"varint,5,opt,name=cons,proto3" json:"cons,omitempty" bson:"cons,omitempty"`
	Weapon        *Weapon           `protobuf:"bytes,6,opt,name=weapon,proto3" json:"weapon,omitempty" bson:"weapon,omitempty"`
	Talents       *CharacterTalents `protobuf:"bytes,7,opt,name=talents,proto3" json:"talents,omitempty" bson:"talents,omitempty"`
	Sets          map[string]int32  `protobuf:"bytes,8,rep,name=sets,proto3" json:"sets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3" bson:"sets,omitempty"`
	Stats         []float64         `protobuf:"fixed64,9,rep,packed,name=stats,proto3" json:"stats,omitempty" bson:"stats,omitempty"`
	SnapshotStats []float64         `protobuf:"fixed64,10,rep,packed,name=snapshot_stats,json=snapshot,proto3" json:"snapshot_stats,omitempty" bson:"snapshot,omitempty"`
}

func (x *Character) Reset() {
	*x = Character{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Character) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Character) ProtoMessage() {}

func (x *Character) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Character.ProtoReflect.Descriptor instead.
func (*Character) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{0}
}

func (x *Character) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Character) GetElement() string {
	if x != nil {
		return x.Element
	}
	return ""
}

func (x *Character) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Character) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *Character) GetCons() int32 {
	if x != nil {
		return x.Cons
	}
	return 0
}

func (x *Character) GetWeapon() *Weapon {
	if x != nil {
		return x.Weapon
	}
	return nil
}

func (x *Character) GetTalents() *CharacterTalents {
	if x != nil {
		return x.Talents
	}
	return nil
}

func (x *Character) GetSets() map[string]int32 {
	if x != nil {
		return x.Sets
	}
	return nil
}

func (x *Character) GetStats() []float64 {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *Character) GetSnapshotStats() []float64 {
	if x != nil {
		return x.SnapshotStats
	}
	return nil
}

type CharacterTalents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Attack int32 `protobuf:"varint,1,opt,name=attack,proto3" json:"attack,omitempty" bson:"attack,omitempty"`
	Skill  int32 `protobuf:"varint,2,opt,name=skill,proto3" json:"skill,omitempty" bson:"skill,omitempty"`
	Burst  int32 `protobuf:"varint,3,opt,name=burst,proto3" json:"burst,omitempty" bson:"burst,omitempty"`
}

func (x *CharacterTalents) Reset() {
	*x = CharacterTalents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharacterTalents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharacterTalents) ProtoMessage() {}

func (x *CharacterTalents) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharacterTalents.ProtoReflect.Descriptor instead.
func (*CharacterTalents) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{1}
}

func (x *CharacterTalents) GetAttack() int32 {
	if x != nil {
		return x.Attack
	}
	return 0
}

func (x *CharacterTalents) GetSkill() int32 {
	if x != nil {
		return x.Skill
	}
	return 0
}

func (x *CharacterTalents) GetBurst() int32 {
	if x != nil {
		return x.Burst
	}
	return 0
}

type Weapon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name,omitempty"`
	Refine   int32  `protobuf:"varint,2,opt,name=refine,proto3" json:"refine,omitempty" bson:"refine,omitempty"`
	Level    int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty" bson:"level,omitempty"`
	MaxLevel int32  `protobuf:"varint,4,opt,name=max_level,proto3" json:"max_level,omitempty" bson:"max_level,omitempty"`
}

func (x *Weapon) Reset() {
	*x = Weapon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weapon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weapon) ProtoMessage() {}

func (x *Weapon) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weapon.ProtoReflect.Descriptor instead.
func (*Weapon) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{2}
}

func (x *Weapon) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Weapon) GetRefine() int32 {
	if x != nil {
		return x.Refine
	}
	return 0
}

func (x *Weapon) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Weapon) GetMaxLevel() int32 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

type Enemy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level                 int32              `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty" bson:"level,omitempty"`
	HP                    float64            `protobuf:"fixed64,2,opt,name=HP,json=hp,proto3" json:"HP,omitempty" bson:"hp,omitempty"`
	Resist                map[string]float64 `protobuf:"bytes,3,rep,name=resist,proto3" json:"resist,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3" bson:"resist,omitempty"`
	Pos                   *Coord             `protobuf:"bytes,4,opt,name=pos,json=position,proto3" json:"pos,omitempty" bson:"position,omitempty"`
	ParticleDropThreshold float64            `protobuf:"fixed64,5,opt,name=particle_drop_threshold,proto3" json:"particle_drop_threshold,omitempty" bson:"particle_drop_threshold,omitempty"`
	ParticleDropCount     float64            `protobuf:"fixed64,6,opt,name=particle_drop_count,proto3" json:"particle_drop_count,omitempty" bson:"particle_drop_count,omitempty"`
	ParticleElement       string             `protobuf:"bytes,7,opt,name=particle_element,proto3" json:"particle_element,omitempty" bson:"particle_element,omitempty"`
}

func (x *Enemy) Reset() {
	*x = Enemy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enemy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enemy) ProtoMessage() {}

func (x *Enemy) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enemy.ProtoReflect.Descriptor instead.
func (*Enemy) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{3}
}

func (x *Enemy) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Enemy) GetHP() float64 {
	if x != nil {
		return x.HP
	}
	return 0
}

func (x *Enemy) GetResist() map[string]float64 {
	if x != nil {
		return x.Resist
	}
	return nil
}

func (x *Enemy) GetPos() *Coord {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *Enemy) GetParticleDropThreshold() float64 {
	if x != nil {
		return x.ParticleDropThreshold
	}
	return 0
}

func (x *Enemy) GetParticleDropCount() float64 {
	if x != nil {
		return x.ParticleDropCount
	}
	return 0
}

func (x *Enemy) GetParticleElement() string {
	if x != nil {
		return x.ParticleElement
	}
	return ""
}

type Coord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X float64 `protobuf:"fixed64,1,opt,name=x,proto3" json:"x,omitempty" bson:"x,omitempty"`
	Y float64 `protobuf:"fixed64,2,opt,name=y,proto3" json:"y,omitempty" bson:"y,omitempty"`
	R float64 `protobuf:"fixed64,3,opt,name=r,proto3" json:"r,omitempty" bson:"r,omitempty"`
}

func (x *Coord) Reset() {
	*x = Coord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coord) ProtoMessage() {}

func (x *Coord) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coord.ProtoReflect.Descriptor instead.
func (*Coord) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{4}
}

func (x *Coord) GetX() float64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *Coord) GetY() float64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *Coord) GetR() float64 {
	if x != nil {
		return x.R
	}
	return 0
}

type SimulatorSettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Duration        float64 `protobuf:"fixed64,1,opt,name=duration,proto3" json:"duration,omitempty" bson:"duration,omitempty"`
	DamageMode      bool    `protobuf:"varint,2,opt,name=damage_mode,proto3" json:"damage_mode,omitempty" bson:"damage_mode,omitempty"`
	EnableHitlag    bool    `protobuf:"varint,3,opt,name=enable_hitlag,proto3" json:"enable_hitlag,omitempty" bson:"enable_hitlag,omitempty"`
	DefHalt         bool    `protobuf:"varint,4,opt,name=def_halt,proto3" json:"def_halt,omitempty" bson:"def_halt,omitempty"`
	NumberOfWorkers uint32  `protobuf:"varint,5,opt,name=number_of_workers,proto3" json:"number_of_workers,omitempty" bson:"number_of_workers,omitempty"`
	Iterations      uint32  `protobuf:"varint,6,opt,name=iterations,proto3" json:"iterations,omitempty" bson:"iterations,omitempty"`
	Delays          *Delays `protobuf:"bytes,7,opt,name=delays,proto3" json:"delays,omitempty" bson:"delays,omitempty"`
}

func (x *SimulatorSettings) Reset() {
	*x = SimulatorSettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimulatorSettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimulatorSettings) ProtoMessage() {}

func (x *SimulatorSettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimulatorSettings.ProtoReflect.Descriptor instead.
func (*SimulatorSettings) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{5}
}

func (x *SimulatorSettings) GetDuration() float64 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SimulatorSettings) GetDamageMode() bool {
	if x != nil {
		return x.DamageMode
	}
	return false
}

func (x *SimulatorSettings) GetEnableHitlag() bool {
	if x != nil {
		return x.EnableHitlag
	}
	return false
}

func (x *SimulatorSettings) GetDefHalt() bool {
	if x != nil {
		return x.DefHalt
	}
	return false
}

func (x *SimulatorSettings) GetNumberOfWorkers() uint32 {
	if x != nil {
		return x.NumberOfWorkers
	}
	return 0
}

func (x *SimulatorSettings) GetIterations() uint32 {
	if x != nil {
		return x.Iterations
	}
	return 0
}

func (x *SimulatorSettings) GetDelays() *Delays {
	if x != nil {
		return x.Delays
	}
	return nil
}

type Delays struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Skill  int32 `protobuf:"varint,1,opt,name=skill,proto3" json:"skill,omitempty" bson:"skill,omitempty"`
	Burst  int32 `protobuf:"varint,2,opt,name=burst,proto3" json:"burst,omitempty" bson:"burst,omitempty"`
	Attack int32 `protobuf:"varint,3,opt,name=attack,proto3" json:"attack,omitempty" bson:"attack,omitempty"`
	Charge int32 `protobuf:"varint,4,opt,name=charge,proto3" json:"charge,omitempty" bson:"charge,omitempty"`
	Aim    int32 `protobuf:"varint,5,opt,name=aim,proto3" json:"aim,omitempty" bson:"aim,omitempty"`
	Dash   int32 `protobuf:"varint,6,opt,name=dash,proto3" json:"dash,omitempty" bson:"dash,omitempty"`
	Jump   int32 `protobuf:"varint,7,opt,name=jump,proto3" json:"jump,omitempty" bson:"jump,omitempty"`
	Swap   int32 `protobuf:"varint,8,opt,name=swap,proto3" json:"swap,omitempty" bson:"swap,omitempty"`
}

func (x *Delays) Reset() {
	*x = Delays{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delays) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delays) ProtoMessage() {}

func (x *Delays) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delays.ProtoReflect.Descriptor instead.
func (*Delays) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{6}
}

func (x *Delays) GetSkill() int32 {
	if x != nil {
		return x.Skill
	}
	return 0
}

func (x *Delays) GetBurst() int32 {
	if x != nil {
		return x.Burst
	}
	return 0
}

func (x *Delays) GetAttack() int32 {
	if x != nil {
		return x.Attack
	}
	return 0
}

func (x *Delays) GetCharge() int32 {
	if x != nil {
		return x.Charge
	}
	return 0
}

func (x *Delays) GetAim() int32 {
	if x != nil {
		return x.Aim
	}
	return 0
}

func (x *Delays) GetDash() int32 {
	if x != nil {
		return x.Dash
	}
	return 0
}

func (x *Delays) GetJump() int32 {
	if x != nil {
		return x.Jump
	}
	return 0
}

func (x *Delays) GetSwap() int32 {
	if x != nil {
		return x.Swap
	}
	return 0
}

type EnergySettings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Active         bool  `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty" bson:"active,omitempty"`
	Once           bool  `protobuf:"varint,2,opt,name=once,proto3" json:"once,omitempty" bson:"once,omitempty"`
	Start          int32 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty" bson:"start,omitempty"`
	End            int32 `protobuf:"varint,4,opt,name=end,proto3" json:"end,omitempty" bson:"end,omitempty"`
	Amount         int32 `protobuf:"varint,5,opt,name=amount,proto3" json:"amount,omitempty" bson:"amount,omitempty"`
	LastEnergyDrop int32 `protobuf:"varint,6,opt,name=last_energy_drop,proto3" json:"last_energy_drop,omitempty" bson:"last_energy_drop,omitempty"`
}

func (x *EnergySettings) Reset() {
	*x = EnergySettings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnergySettings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnergySettings) ProtoMessage() {}

func (x *EnergySettings) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnergySettings.ProtoReflect.Descriptor instead.
func (*EnergySettings) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{7}
}

func (x *EnergySettings) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *EnergySettings) GetOnce() bool {
	if x != nil {
		return x.Once
	}
	return false
}

func (x *EnergySettings) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *EnergySettings) GetEnd() int32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *EnergySettings) GetAmount() int32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *EnergySettings) GetLastEnergyDrop() int32 {
	if x != nil {
		return x.LastEnergyDrop
	}
	return 0
}

type AvatarData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rarity      int64            `protobuf:"varint,1,opt,name=rarity,proto3" json:"rarity,omitempty" bson:"rarity,omitempty"`
	Body        BodyType         `protobuf:"varint,2,opt,name=body,proto3,enum=model.BodyType" json:"body,omitempty" bson:"body,omitempty"`
	Region      ZoneType         `protobuf:"varint,3,opt,name=region,proto3,enum=model.ZoneType" json:"region,omitempty" bson:"region,omitempty"`
	Element     Element          `protobuf:"varint,4,opt,name=element,proto3,enum=model.Element" json:"element,omitempty" bson:"element,omitempty"`
	WeaponClass WeaponClass      `protobuf:"varint,5,opt,name=weapon_class,proto3,enum=model.WeaponClass" json:"weapon_class,omitempty" bson:"weapon_class,omitempty"`
	ImageName   string           `protobuf:"bytes,6,opt,name=image_name,proto3" json:"image_name,omitempty" bson:"image_name,omitempty"`
	BaseStats   *AvatarStatsData `protobuf:"bytes,7,opt,name=base_stats,proto3" json:"base_stats,omitempty" bson:"base_stats,omitempty"`
}

func (x *AvatarData) Reset() {
	*x = AvatarData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarData) ProtoMessage() {}

func (x *AvatarData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarData.ProtoReflect.Descriptor instead.
func (*AvatarData) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{8}
}

func (x *AvatarData) GetRarity() int64 {
	if x != nil {
		return x.Rarity
	}
	return 0
}

func (x *AvatarData) GetBody() BodyType {
	if x != nil {
		return x.Body
	}
	return BodyType_BODY_UNKNOWN
}

func (x *AvatarData) GetRegion() ZoneType {
	if x != nil {
		return x.Region
	}
	return ZoneType_ASSOC_TYPE_UNKNOWN
}

func (x *AvatarData) GetElement() Element {
	if x != nil {
		return x.Element
	}
	return Element_Electric
}

func (x *AvatarData) GetWeaponClass() WeaponClass {
	if x != nil {
		return x.WeaponClass
	}
	return WeaponClass_WEAPON_SWORD_ONE_HAND
}

func (x *AvatarData) GetImageName() string {
	if x != nil {
		return x.ImageName
	}
	return ""
}

func (x *AvatarData) GetBaseStats() *AvatarStatsData {
	if x != nil {
		return x.BaseStats
	}
	return nil
}

type AvatarStatsData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BaseHp      float64          `protobuf:"fixed64,1,opt,name=base_hp,proto3" json:"base_hp,omitempty" bson:"base_hp,omitempty"`
	BaseAtk     float64          `protobuf:"fixed64,2,opt,name=base_atk,proto3" json:"base_atk,omitempty" bson:"base_atk,omitempty"`
	BaseDef     float64          `protobuf:"fixed64,3,opt,name=base_def,proto3" json:"base_def,omitempty" bson:"base_def,omitempty"`
	HpCurve     AvatarCurveType  `protobuf:"varint,4,opt,name=hp_curve,proto3,enum=model.AvatarCurveType" json:"hp_curve,omitempty" bson:"hp_curve,omitempty"`
	AtkCurve    AvatarCurveType  `protobuf:"varint,5,opt,name=atk_curve,proto3,enum=model.AvatarCurveType" json:"atk_curve,omitempty" bson:"atk_curve,omitempty"`
	DefCruve    AvatarCurveType  `protobuf:"varint,6,opt,name=def_cruve,proto3,enum=model.AvatarCurveType" json:"def_cruve,omitempty" bson:"def_cruve,omitempty"`
	Specialized StatType         `protobuf:"varint,7,opt,name=specialized,proto3,enum=model.StatType" json:"specialized,omitempty" bson:"specialized,omitempty"`
	PromoData   []*PromotionData `protobuf:"bytes,8,rep,name=promo_data,proto3" json:"promo_data,omitempty" bson:"promo_data,omitempty"`
}

func (x *AvatarStatsData) Reset() {
	*x = AvatarStatsData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvatarStatsData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvatarStatsData) ProtoMessage() {}

func (x *AvatarStatsData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvatarStatsData.ProtoReflect.Descriptor instead.
func (*AvatarStatsData) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{9}
}

func (x *AvatarStatsData) GetBaseHp() float64 {
	if x != nil {
		return x.BaseHp
	}
	return 0
}

func (x *AvatarStatsData) GetBaseAtk() float64 {
	if x != nil {
		return x.BaseAtk
	}
	return 0
}

func (x *AvatarStatsData) GetBaseDef() float64 {
	if x != nil {
		return x.BaseDef
	}
	return 0
}

func (x *AvatarStatsData) GetHpCurve() AvatarCurveType {
	if x != nil {
		return x.HpCurve
	}
	return AvatarCurveType_GROW_CURVE_HP_S4
}

func (x *AvatarStatsData) GetAtkCurve() AvatarCurveType {
	if x != nil {
		return x.AtkCurve
	}
	return AvatarCurveType_GROW_CURVE_HP_S4
}

func (x *AvatarStatsData) GetDefCruve() AvatarCurveType {
	if x != nil {
		return x.DefCruve
	}
	return AvatarCurveType_GROW_CURVE_HP_S4
}

func (x *AvatarStatsData) GetSpecialized() StatType {
	if x != nil {
		return x.Specialized
	}
	return StatType_UNSPECIFIED
}

func (x *AvatarStatsData) GetPromoData() []*PromotionData {
	if x != nil {
		return x.PromoData
	}
	return nil
}

type PromotionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxLevel int64   `protobuf:"varint,1,opt,name=max_level,proto3" json:"max_level,omitempty" bson:"max_level,omitempty"`
	Hp       float64 `protobuf:"fixed64,2,opt,name=hp,proto3" json:"hp,omitempty" bson:"hp,omitempty"`
	Atk      float64 `protobuf:"fixed64,3,opt,name=atk,proto3" json:"atk,omitempty" bson:"atk,omitempty"`
	Def      float64 `protobuf:"fixed64,4,opt,name=def,proto3" json:"def,omitempty" bson:"def,omitempty"`
	Special  float64 `protobuf:"fixed64,5,opt,name=special,proto3" json:"special,omitempty" bson:"special,omitempty"`
}

func (x *PromotionData) Reset() {
	*x = PromotionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_protos_model_sim_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PromotionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PromotionData) ProtoMessage() {}

func (x *PromotionData) ProtoReflect() protoreflect.Message {
	mi := &file_protos_model_sim_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PromotionData.ProtoReflect.Descriptor instead.
func (*PromotionData) Descriptor() ([]byte, []int) {
	return file_protos_model_sim_proto_rawDescGZIP(), []int{10}
}

func (x *PromotionData) GetMaxLevel() int64 {
	if x != nil {
		return x.MaxLevel
	}
	return 0
}

func (x *PromotionData) GetHp() float64 {
	if x != nil {
		return x.Hp
	}
	return 0
}

func (x *PromotionData) GetAtk() float64 {
	if x != nil {
		return x.Atk
	}
	return 0
}

func (x *PromotionData) GetDef() float64 {
	if x != nil {
		return x.Def
	}
	return 0
}

func (x *PromotionData) GetSpecial() float64 {
	if x != nil {
		return x.Special
	}
	return 0
}

var File_protos_model_sim_proto protoreflect.FileDescriptor

var file_protos_model_sim_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x73,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x22,
	0xfc, 0x02, 0x0a, 0x09, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x6e, 0x73, 0x12, 0x25, 0x0a, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x52, 0x06, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x07, 0x74, 0x61,
	0x6c, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x61, 0x6c,
	0x65, 0x6e, 0x74, 0x73, 0x52, 0x07, 0x74, 0x61, 0x6c, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x73, 0x65, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x2e, 0x53, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x73, 0x65, 0x74, 0x73, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x01, 0x52, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x0e, 0x73, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x01, 0x52, 0x08, 0x73, 0x6e, 0x61,
	0x70, 0x73, 0x68, 0x6f, 0x74, 0x1a, 0x37, 0x0a, 0x09, 0x53, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x56,
	0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x61, 0x63, 0x74, 0x65, 0x72, 0x54, 0x61, 0x6c, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b,
	0x69, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x22, 0x68, 0x0a, 0x06, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x22, 0xd7, 0x02, 0x0a, 0x05, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x48, 0x50, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x68, 0x70,
	0x12, 0x30, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6e, 0x65, 0x6d, 0x79, 0x2e, 0x52,
	0x65, 0x73, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x69,
	0x73, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x52, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x6c, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x17, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63,
	0x6c, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x30, 0x0a, 0x13, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x72,
	0x6f, 0x70, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x13,
	0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x1a,
	0x39, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x69, 0x73, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x31, 0x0a, 0x05, 0x43, 0x6f,
	0x6f, 0x72, 0x64, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01,
	0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x79, 0x12,
	0x0c, 0x0a, 0x01, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x01, 0x72, 0x22, 0x88, 0x02,
	0x0a, 0x11, 0x53, 0x69, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x65, 0x74, 0x74, 0x69,
	0x6e, 0x67, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x64, 0x61, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x6f, 0x64,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x6c,
	0x61, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x5f, 0x68, 0x69, 0x74, 0x6c, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x66, 0x5f, 0x68,
	0x61, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x66, 0x5f, 0x68,
	0x61, 0x6c, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66,
	0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6f, 0x66, 0x5f, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x12, 0x25, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x73,
	0x52, 0x06, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x73, 0x22, 0xb2, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x61, 0x79, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x73, 0x6b, 0x69, 0x6c, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x75, 0x72,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x62, 0x75, 0x72, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x61, 0x69, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x69,
	0x6d, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x64, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x6a, 0x75, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x77, 0x61,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x77, 0x61, 0x70, 0x22, 0xa8, 0x01,
	0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x6e, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x65, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6e, 0x65,
	0x72, 0x67, 0x79, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x22, 0xac, 0x02, 0x0a, 0x0a, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x72, 0x61, 0x72, 0x69, 0x74, 0x79, 0x12,
	0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x5a, 0x6f, 0x6e,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a,
	0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e,
	0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x52, 0x0c, 0x77, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x36, 0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x22, 0xec, 0x02, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x62,
	0x61, 0x73, 0x65, 0x5f, 0x68, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x62, 0x61,
	0x73, 0x65, 0x5f, 0x68, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x74,
	0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x61, 0x74,
	0x6b, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x08, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x66, 0x12, 0x32, 0x0a,
	0x08, 0x68, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x75,
	0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x70, 0x5f, 0x63, 0x75, 0x72, 0x76,
	0x65, 0x12, 0x34, 0x0a, 0x09, 0x61, 0x74, 0x6b, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x41, 0x76, 0x61,
	0x74, 0x61, 0x72, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x74,
	0x6b, 0x5f, 0x63, 0x75, 0x72, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x63,
	0x72, 0x75, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x2e, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x64, 0x65, 0x66, 0x5f, 0x63, 0x72, 0x75, 0x76, 0x65, 0x12, 0x31, 0x0a,
	0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0f, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x12, 0x34, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6d, 0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f,
	0x6d, 0x6f, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6d,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x22, 0x7b, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x6d, 0x6f, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x68, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x02, 0x68, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x03, 0x61, 0x74, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x64, 0x65, 0x66, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x2a, 0x71, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x75, 0x72,
	0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43,
	0x55, 0x52, 0x56, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x34, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14,
	0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x34, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43,
	0x55, 0x52, 0x56, 0x45, 0x5f, 0x48, 0x50, 0x5f, 0x53, 0x35, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14,
	0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43,
	0x4b, 0x5f, 0x53, 0x35, 0x10, 0x03, 0x2a, 0xfd, 0x03, 0x0a, 0x0f, 0x57, 0x65, 0x61, 0x70, 0x6f,
	0x6e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x31, 0x30, 0x31, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x30, 0x32, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x30, 0x33, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x31, 0x30, 0x34, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43,
	0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x30, 0x35, 0x10,
	0x04, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f,
	0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x31, 0x30, 0x31, 0x10, 0x05, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x32, 0x30, 0x31, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f,
	0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x32,
	0x30, 0x32, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52,
	0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x32, 0x30, 0x33, 0x10, 0x08, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x32, 0x30, 0x34, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x32, 0x30, 0x35, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x31,
	0x10, 0x0b, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45,
	0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x33, 0x30, 0x31, 0x10, 0x0c, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x33, 0x30, 0x32, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57,
	0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x33, 0x30,
	0x33, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x33, 0x30, 0x34, 0x10, 0x0f, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x33, 0x30, 0x35, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f,
	0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c,
	0x5f, 0x33, 0x30, 0x31, 0x10, 0x11, 0x2a, 0x73, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e,
	0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x15, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f,
	0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x4f, 0x4e, 0x45, 0x5f, 0x48, 0x41, 0x4e, 0x44, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x59, 0x4d,
	0x4f, 0x52, 0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f,
	0x50, 0x4f, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e,
	0x5f, 0x42, 0x4f, 0x57, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e,
	0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x59, 0x53, 0x54, 0x10, 0x04, 0x2a, 0x66, 0x0a, 0x08, 0x42,
	0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x44, 0x59, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4f, 0x44,
	0x59, 0x5f, 0x42, 0x4f, 0x59, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f,
	0x47, 0x49, 0x52, 0x4c, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x4c, 0x41,
	0x44, 0x59, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x4c, 0x4f, 0x4c,
	0x49, 0x10, 0x05, 0x2a, 0x97, 0x01, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55,
	0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x44, 0x53, 0x54, 0x41, 0x44, 0x54,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4c, 0x49, 0x59, 0x55, 0x45, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x4f,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x5a, 0x55, 0x4d, 0x41, 0x10, 0x03,
	0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x53,
	0x55, 0x4d, 0x45, 0x52, 0x55, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x53, 0x4f, 0x43,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x54, 0x55, 0x49, 0x10, 0x05, 0x2a, 0xba, 0x01,
	0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6c, 0x65,
	0x63, 0x74, 0x72, 0x69, 0x63, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x72, 0x65, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x63, 0x65, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x61,
	0x74, 0x65, 0x72, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x73, 0x73, 0x10, 0x04,
	0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x43,
	0x4b, 0x45, 0x4e, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x69, 0x6e,
	0x64, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x6f, 0x63, 0x6b, 0x10, 0x08, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x09, 0x12,
	0x14, 0x0a, 0x10, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49,
	0x43, 0x41, 0x4c, 0x10, 0x0a, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x0b, 0x2a, 0xee, 0x05, 0x0a, 0x08, 0x53,
	0x74, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45,
	0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x48,
	0x50, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x5f, 0x48, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x49, 0x43, 0x49,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x59, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x09, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0c,
	0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0d, 0x12,
	0x1d, 0x0a, 0x19, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x47, 0x52,
	0x41, 0x53, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0e, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x4c, 0x45,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18,
	0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48,
	0x55, 0x52, 0x54, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x13, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e,
	0x53, 0x45, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x19, 0x2a, 0x2a, 0x0a, 0x07, 0x53,
	0x69, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x55, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x54, 0x4b,
	0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x6e, 0x73, 0x69, 0x6d,
	0x2f, 0x67, 0x63, 0x73, 0x69, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_model_sim_proto_rawDescOnce sync.Once
	file_protos_model_sim_proto_rawDescData = file_protos_model_sim_proto_rawDesc
)

func file_protos_model_sim_proto_rawDescGZIP() []byte {
	file_protos_model_sim_proto_rawDescOnce.Do(func() {
		file_protos_model_sim_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_model_sim_proto_rawDescData)
	})
	return file_protos_model_sim_proto_rawDescData
}

var file_protos_model_sim_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_protos_model_sim_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_protos_model_sim_proto_goTypes = []interface{}{
	(AvatarCurveType)(0),      // 0: model.AvatarCurveType
	(WeaponCurveType)(0),      // 1: model.WeaponCurveType
	(WeaponClass)(0),          // 2: model.WeaponClass
	(BodyType)(0),             // 3: model.BodyType
	(ZoneType)(0),             // 4: model.ZoneType
	(Element)(0),              // 5: model.Element
	(StatType)(0),             // 6: model.StatType
	(SimMode)(0),              // 7: model.SimMode
	(*Character)(nil),         // 8: model.Character
	(*CharacterTalents)(nil),  // 9: model.CharacterTalents
	(*Weapon)(nil),            // 10: model.Weapon
	(*Enemy)(nil),             // 11: model.Enemy
	(*Coord)(nil),             // 12: model.Coord
	(*SimulatorSettings)(nil), // 13: model.SimulatorSettings
	(*Delays)(nil),            // 14: model.Delays
	(*EnergySettings)(nil),    // 15: model.EnergySettings
	(*AvatarData)(nil),        // 16: model.AvatarData
	(*AvatarStatsData)(nil),   // 17: model.AvatarStatsData
	(*PromotionData)(nil),     // 18: model.PromotionData
	nil,                       // 19: model.Character.SetsEntry
	nil,                       // 20: model.Enemy.ResistEntry
}
var file_protos_model_sim_proto_depIdxs = []int32{
	10, // 0: model.Character.weapon:type_name -> model.Weapon
	9,  // 1: model.Character.talents:type_name -> model.CharacterTalents
	19, // 2: model.Character.sets:type_name -> model.Character.SetsEntry
	20, // 3: model.Enemy.resist:type_name -> model.Enemy.ResistEntry
	12, // 4: model.Enemy.pos:type_name -> model.Coord
	14, // 5: model.SimulatorSettings.delays:type_name -> model.Delays
	3,  // 6: model.AvatarData.body:type_name -> model.BodyType
	4,  // 7: model.AvatarData.region:type_name -> model.ZoneType
	5,  // 8: model.AvatarData.element:type_name -> model.Element
	2,  // 9: model.AvatarData.weapon_class:type_name -> model.WeaponClass
	17, // 10: model.AvatarData.base_stats:type_name -> model.AvatarStatsData
	0,  // 11: model.AvatarStatsData.hp_curve:type_name -> model.AvatarCurveType
	0,  // 12: model.AvatarStatsData.atk_curve:type_name -> model.AvatarCurveType
	0,  // 13: model.AvatarStatsData.def_cruve:type_name -> model.AvatarCurveType
	6,  // 14: model.AvatarStatsData.specialized:type_name -> model.StatType
	18, // 15: model.AvatarStatsData.promo_data:type_name -> model.PromotionData
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_protos_model_sim_proto_init() }
func file_protos_model_sim_proto_init() {
	if File_protos_model_sim_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_protos_model_sim_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Character); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharacterTalents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weapon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enemy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimulatorSettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delays); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnergySettings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvatarStatsData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_protos_model_sim_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PromotionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_model_sim_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_model_sim_proto_goTypes,
		DependencyIndexes: file_protos_model_sim_proto_depIdxs,
		EnumInfos:         file_protos_model_sim_proto_enumTypes,
		MessageInfos:      file_protos_model_sim_proto_msgTypes,
	}.Build()
	File_protos_model_sim_proto = out.File
	file_protos_model_sim_proto_rawDesc = nil
	file_protos_model_sim_proto_goTypes = nil
	file_protos_model_sim_proto_depIdxs = nil
}
