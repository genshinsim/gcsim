// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.25.1
// source: protos/model/enums.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AvatarCurveType int32

const (
	AvatarCurveType_INVALID_AVATAR_CURVE AvatarCurveType = 0
	AvatarCurveType_GROW_CURVE_HP_S4     AvatarCurveType = 1
	AvatarCurveType_GROW_CURVE_ATTACK_S4 AvatarCurveType = 2
	AvatarCurveType_GROW_CURVE_HP_S5     AvatarCurveType = 3
	AvatarCurveType_GROW_CURVE_ATTACK_S5 AvatarCurveType = 4
)

// Enum value maps for AvatarCurveType.
var (
	AvatarCurveType_name = map[int32]string{
		0: "INVALID_AVATAR_CURVE",
		1: "GROW_CURVE_HP_S4",
		2: "GROW_CURVE_ATTACK_S4",
		3: "GROW_CURVE_HP_S5",
		4: "GROW_CURVE_ATTACK_S5",
	}
	AvatarCurveType_value = map[string]int32{
		"INVALID_AVATAR_CURVE": 0,
		"GROW_CURVE_HP_S4":     1,
		"GROW_CURVE_ATTACK_S4": 2,
		"GROW_CURVE_HP_S5":     3,
		"GROW_CURVE_ATTACK_S5": 4,
	}
)

func (x AvatarCurveType) Enum() *AvatarCurveType {
	p := new(AvatarCurveType)
	*p = x
	return p
}

func (x AvatarCurveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvatarCurveType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[0].Descriptor()
}

func (AvatarCurveType) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[0]
}

func (x AvatarCurveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvatarCurveType.Descriptor instead.
func (AvatarCurveType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{0}
}

type QualityType int32

const (
	QualityType_INVALID_QUALITY_TYPE QualityType = 0
	QualityType_QUALITY_ORANGE_SP    QualityType = 6 //the special 6 star aka aloy
	QualityType_QUALITY_ORANGE       QualityType = 5
	QualityType_QUALITY_PURPLE       QualityType = 4
)

// Enum value maps for QualityType.
var (
	QualityType_name = map[int32]string{
		0: "INVALID_QUALITY_TYPE",
		6: "QUALITY_ORANGE_SP",
		5: "QUALITY_ORANGE",
		4: "QUALITY_PURPLE",
	}
	QualityType_value = map[string]int32{
		"INVALID_QUALITY_TYPE": 0,
		"QUALITY_ORANGE_SP":    6,
		"QUALITY_ORANGE":       5,
		"QUALITY_PURPLE":       4,
	}
)

func (x QualityType) Enum() *QualityType {
	p := new(QualityType)
	*p = x
	return p
}

func (x QualityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QualityType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[1].Descriptor()
}

func (QualityType) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[1]
}

func (x QualityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QualityType.Descriptor instead.
func (QualityType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{1}
}

type WeaponCurveType int32

const (
	WeaponCurveType_INVALID_WEAPON_CURVE    WeaponCurveType = 0
	WeaponCurveType_GROW_CURVE_ATTACK_101   WeaponCurveType = 1
	WeaponCurveType_GROW_CURVE_ATTACK_102   WeaponCurveType = 2
	WeaponCurveType_GROW_CURVE_ATTACK_103   WeaponCurveType = 3
	WeaponCurveType_GROW_CURVE_ATTACK_104   WeaponCurveType = 4
	WeaponCurveType_GROW_CURVE_ATTACK_105   WeaponCurveType = 5
	WeaponCurveType_GROW_CURVE_CRITICAL_101 WeaponCurveType = 6
	WeaponCurveType_GROW_CURVE_ATTACK_201   WeaponCurveType = 7
	WeaponCurveType_GROW_CURVE_ATTACK_202   WeaponCurveType = 8
	WeaponCurveType_GROW_CURVE_ATTACK_203   WeaponCurveType = 9
	WeaponCurveType_GROW_CURVE_ATTACK_204   WeaponCurveType = 10
	WeaponCurveType_GROW_CURVE_ATTACK_205   WeaponCurveType = 11
	WeaponCurveType_GROW_CURVE_CRITICAL_201 WeaponCurveType = 12
	WeaponCurveType_GROW_CURVE_ATTACK_301   WeaponCurveType = 13
	WeaponCurveType_GROW_CURVE_ATTACK_302   WeaponCurveType = 14
	WeaponCurveType_GROW_CURVE_ATTACK_303   WeaponCurveType = 15
	WeaponCurveType_GROW_CURVE_ATTACK_304   WeaponCurveType = 16
	WeaponCurveType_GROW_CURVE_ATTACK_305   WeaponCurveType = 17
	WeaponCurveType_GROW_CURVE_CRITICAL_301 WeaponCurveType = 18
)

// Enum value maps for WeaponCurveType.
var (
	WeaponCurveType_name = map[int32]string{
		0:  "INVALID_WEAPON_CURVE",
		1:  "GROW_CURVE_ATTACK_101",
		2:  "GROW_CURVE_ATTACK_102",
		3:  "GROW_CURVE_ATTACK_103",
		4:  "GROW_CURVE_ATTACK_104",
		5:  "GROW_CURVE_ATTACK_105",
		6:  "GROW_CURVE_CRITICAL_101",
		7:  "GROW_CURVE_ATTACK_201",
		8:  "GROW_CURVE_ATTACK_202",
		9:  "GROW_CURVE_ATTACK_203",
		10: "GROW_CURVE_ATTACK_204",
		11: "GROW_CURVE_ATTACK_205",
		12: "GROW_CURVE_CRITICAL_201",
		13: "GROW_CURVE_ATTACK_301",
		14: "GROW_CURVE_ATTACK_302",
		15: "GROW_CURVE_ATTACK_303",
		16: "GROW_CURVE_ATTACK_304",
		17: "GROW_CURVE_ATTACK_305",
		18: "GROW_CURVE_CRITICAL_301",
	}
	WeaponCurveType_value = map[string]int32{
		"INVALID_WEAPON_CURVE":    0,
		"GROW_CURVE_ATTACK_101":   1,
		"GROW_CURVE_ATTACK_102":   2,
		"GROW_CURVE_ATTACK_103":   3,
		"GROW_CURVE_ATTACK_104":   4,
		"GROW_CURVE_ATTACK_105":   5,
		"GROW_CURVE_CRITICAL_101": 6,
		"GROW_CURVE_ATTACK_201":   7,
		"GROW_CURVE_ATTACK_202":   8,
		"GROW_CURVE_ATTACK_203":   9,
		"GROW_CURVE_ATTACK_204":   10,
		"GROW_CURVE_ATTACK_205":   11,
		"GROW_CURVE_CRITICAL_201": 12,
		"GROW_CURVE_ATTACK_301":   13,
		"GROW_CURVE_ATTACK_302":   14,
		"GROW_CURVE_ATTACK_303":   15,
		"GROW_CURVE_ATTACK_304":   16,
		"GROW_CURVE_ATTACK_305":   17,
		"GROW_CURVE_CRITICAL_301": 18,
	}
)

func (x WeaponCurveType) Enum() *WeaponCurveType {
	p := new(WeaponCurveType)
	*p = x
	return p
}

func (x WeaponCurveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeaponCurveType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[2].Descriptor()
}

func (WeaponCurveType) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[2]
}

func (x WeaponCurveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeaponCurveType.Descriptor instead.
func (WeaponCurveType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{2}
}

type WeaponClass int32

const (
	WeaponClass_INVALID_WEAPON_CLASS  WeaponClass = 0
	WeaponClass_WEAPON_SWORD_ONE_HAND WeaponClass = 1
	WeaponClass_WEAPON_CLAYMORE       WeaponClass = 2
	WeaponClass_WEAPON_POLE           WeaponClass = 3
	WeaponClass_WEAPON_BOW            WeaponClass = 4
	WeaponClass_WEAPON_CATALYST       WeaponClass = 5
)

// Enum value maps for WeaponClass.
var (
	WeaponClass_name = map[int32]string{
		0: "INVALID_WEAPON_CLASS",
		1: "WEAPON_SWORD_ONE_HAND",
		2: "WEAPON_CLAYMORE",
		3: "WEAPON_POLE",
		4: "WEAPON_BOW",
		5: "WEAPON_CATALYST",
	}
	WeaponClass_value = map[string]int32{
		"INVALID_WEAPON_CLASS":  0,
		"WEAPON_SWORD_ONE_HAND": 1,
		"WEAPON_CLAYMORE":       2,
		"WEAPON_POLE":           3,
		"WEAPON_BOW":            4,
		"WEAPON_CATALYST":       5,
	}
)

func (x WeaponClass) Enum() *WeaponClass {
	p := new(WeaponClass)
	*p = x
	return p
}

func (x WeaponClass) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WeaponClass) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[3].Descriptor()
}

func (WeaponClass) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[3]
}

func (x WeaponClass) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WeaponClass.Descriptor instead.
func (WeaponClass) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{3}
}

type BodyType int32

const (
	BodyType_INVALID_BODY_TYPE BodyType = 0
	BodyType_BODY_UNKNOWN      BodyType = 1
	BodyType_BODY_BOY          BodyType = 2
	BodyType_BODY_GIRL         BodyType = 3
	BodyType_BODY_MALE         BodyType = 4
	BodyType_BODY_LADY         BodyType = 5
	BodyType_BODY_LOLI         BodyType = 6
)

// Enum value maps for BodyType.
var (
	BodyType_name = map[int32]string{
		0: "INVALID_BODY_TYPE",
		1: "BODY_UNKNOWN",
		2: "BODY_BOY",
		3: "BODY_GIRL",
		4: "BODY_MALE",
		5: "BODY_LADY",
		6: "BODY_LOLI",
	}
	BodyType_value = map[string]int32{
		"INVALID_BODY_TYPE": 0,
		"BODY_UNKNOWN":      1,
		"BODY_BOY":          2,
		"BODY_GIRL":         3,
		"BODY_MALE":         4,
		"BODY_LADY":         5,
		"BODY_LOLI":         6,
	}
)

func (x BodyType) Enum() *BodyType {
	p := new(BodyType)
	*p = x
	return p
}

func (x BodyType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BodyType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[4].Descriptor()
}

func (BodyType) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[4]
}

func (x BodyType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BodyType.Descriptor instead.
func (BodyType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{4}
}

type ZoneType int32

const (
	ZoneType_INVALID_ZONE_TYPE    ZoneType = 0
	ZoneType_ASSOC_TYPE_UNKNOWN   ZoneType = 1
	ZoneType_ASSOC_TYPE_MONDSTADT ZoneType = 2
	ZoneType_ASSOC_TYPE_LIYUE     ZoneType = 3
	ZoneType_ASSOC_TYPE_INAZUMA   ZoneType = 4
	ZoneType_ASSOC_TYPE_SUMERU    ZoneType = 5
	ZoneType_ASSOC_TYPE_FATUI     ZoneType = 6
	ZoneType_ASSOC_TYPE_RANGER    ZoneType = 7 //aloy pls
	ZoneType_ASSOC_TYPE_MAINACTOR ZoneType = 8 //traveler is cool
)

// Enum value maps for ZoneType.
var (
	ZoneType_name = map[int32]string{
		0: "INVALID_ZONE_TYPE",
		1: "ASSOC_TYPE_UNKNOWN",
		2: "ASSOC_TYPE_MONDSTADT",
		3: "ASSOC_TYPE_LIYUE",
		4: "ASSOC_TYPE_INAZUMA",
		5: "ASSOC_TYPE_SUMERU",
		6: "ASSOC_TYPE_FATUI",
		7: "ASSOC_TYPE_RANGER",
		8: "ASSOC_TYPE_MAINACTOR",
	}
	ZoneType_value = map[string]int32{
		"INVALID_ZONE_TYPE":    0,
		"ASSOC_TYPE_UNKNOWN":   1,
		"ASSOC_TYPE_MONDSTADT": 2,
		"ASSOC_TYPE_LIYUE":     3,
		"ASSOC_TYPE_INAZUMA":   4,
		"ASSOC_TYPE_SUMERU":    5,
		"ASSOC_TYPE_FATUI":     6,
		"ASSOC_TYPE_RANGER":    7,
		"ASSOC_TYPE_MAINACTOR": 8,
	}
)

func (x ZoneType) Enum() *ZoneType {
	p := new(ZoneType)
	*p = x
	return p
}

func (x ZoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ZoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[5].Descriptor()
}

func (ZoneType) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[5]
}

func (x ZoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ZoneType.Descriptor instead.
func (ZoneType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{5}
}

type Element int32

const (
	Element_INVALID_ELEMENT  Element = 0
	Element_Electric         Element = 1
	Element_Fire             Element = 2
	Element_Ice              Element = 3
	Element_Water            Element = 4
	Element_Grass            Element = 5
	Element_ELEMENT_QUICKEN  Element = 6
	Element_ELEMENT_FROZEN   Element = 7
	Element_Wind             Element = 8
	Element_Rock             Element = 9
	Element_ELEMENT_NONE     Element = 10
	Element_ELEMENT_PHYSICAL Element = 11
	Element_ELEMENT_UNKNOWN  Element = 12
)

// Enum value maps for Element.
var (
	Element_name = map[int32]string{
		0:  "INVALID_ELEMENT",
		1:  "Electric",
		2:  "Fire",
		3:  "Ice",
		4:  "Water",
		5:  "Grass",
		6:  "ELEMENT_QUICKEN",
		7:  "ELEMENT_FROZEN",
		8:  "Wind",
		9:  "Rock",
		10: "ELEMENT_NONE",
		11: "ELEMENT_PHYSICAL",
		12: "ELEMENT_UNKNOWN",
	}
	Element_value = map[string]int32{
		"INVALID_ELEMENT":  0,
		"Electric":         1,
		"Fire":             2,
		"Ice":              3,
		"Water":            4,
		"Grass":            5,
		"ELEMENT_QUICKEN":  6,
		"ELEMENT_FROZEN":   7,
		"Wind":             8,
		"Rock":             9,
		"ELEMENT_NONE":     10,
		"ELEMENT_PHYSICAL": 11,
		"ELEMENT_UNKNOWN":  12,
	}
)

func (x Element) Enum() *Element {
	p := new(Element)
	*p = x
	return p
}

func (x Element) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Element) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[6].Descriptor()
}

func (Element) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[6]
}

func (x Element) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Element.Descriptor instead.
func (Element) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{6}
}

type StatType int32

const (
	StatType_INVALID_STAT_TYPE                           StatType = 0
	StatType_FIGHT_PROP_DEFENSE_PERCENT                  StatType = 1
	StatType_FIGHT_PROP_DEFENSE                          StatType = 2
	StatType_FIGHT_PROP_HP                               StatType = 3
	StatType_FIGHT_PROP_HP_PERCENT                       StatType = 4
	StatType_FIGHT_PROP_ATTACK                           StatType = 5
	StatType_FIGHT_PROP_ATTACK_PERCENT                   StatType = 6
	StatType_FIGHT_PROP_CHARGE_EFFICIENCY                StatType = 7
	StatType_FIGHT_PROP_ELEMENT_MASTERY                  StatType = 8
	StatType_FIGHT_PROP_CRITICAL                         StatType = 9
	StatType_FIGHT_PROP_CRITICAL_HURT                    StatType = 10
	StatType_FIGHT_PROP_HEAL                             StatType = 11
	StatType_FIGHT_PROP_FIRE_ADD_HURT                    StatType = 12
	StatType_FIGHT_PROP_WATER_ADD_HURT                   StatType = 13
	StatType_FIGHT_PROP_GRASS_ADD_HURT                   StatType = 14
	StatType_FIGHT_PROP_ELEC_ADD_HURT                    StatType = 15
	StatType_FIGHT_PROP_WIND_ADD_HURT                    StatType = 16
	StatType_FIGHT_PROP_ICE_ADD_HURT                     StatType = 17
	StatType_FIGHT_PROP_ROCK_ADD_HURT                    StatType = 18
	StatType_FIGHT_PROP_PHYSICAL_ADD_HURT                StatType = 19
	StatType_FIGHT_PROP_SHIELD_COST_MINUS_RATIO_ADD_HURT StatType = 20
	StatType_FIGHT_PROP_HEALED_ADD                       StatType = 21 // healing bonus
	StatType_FIGHT_PROP_BASE_HP                          StatType = 22 // base hp
	StatType_FIGHT_PROP_BASE_ATTACK                      StatType = 23 // base attack
	StatType_FIGHT_PROP_BASE_DEFENSE                     StatType = 24 // base defense
	StatType_FIGHT_PROP_MAX_HP                           StatType = 25 // max hp; not really used?
)

// Enum value maps for StatType.
var (
	StatType_name = map[int32]string{
		0:  "INVALID_STAT_TYPE",
		1:  "FIGHT_PROP_DEFENSE_PERCENT",
		2:  "FIGHT_PROP_DEFENSE",
		3:  "FIGHT_PROP_HP",
		4:  "FIGHT_PROP_HP_PERCENT",
		5:  "FIGHT_PROP_ATTACK",
		6:  "FIGHT_PROP_ATTACK_PERCENT",
		7:  "FIGHT_PROP_CHARGE_EFFICIENCY",
		8:  "FIGHT_PROP_ELEMENT_MASTERY",
		9:  "FIGHT_PROP_CRITICAL",
		10: "FIGHT_PROP_CRITICAL_HURT",
		11: "FIGHT_PROP_HEAL",
		12: "FIGHT_PROP_FIRE_ADD_HURT",
		13: "FIGHT_PROP_WATER_ADD_HURT",
		14: "FIGHT_PROP_GRASS_ADD_HURT",
		15: "FIGHT_PROP_ELEC_ADD_HURT",
		16: "FIGHT_PROP_WIND_ADD_HURT",
		17: "FIGHT_PROP_ICE_ADD_HURT",
		18: "FIGHT_PROP_ROCK_ADD_HURT",
		19: "FIGHT_PROP_PHYSICAL_ADD_HURT",
		20: "FIGHT_PROP_SHIELD_COST_MINUS_RATIO_ADD_HURT",
		21: "FIGHT_PROP_HEALED_ADD",
		22: "FIGHT_PROP_BASE_HP",
		23: "FIGHT_PROP_BASE_ATTACK",
		24: "FIGHT_PROP_BASE_DEFENSE",
		25: "FIGHT_PROP_MAX_HP",
	}
	StatType_value = map[string]int32{
		"INVALID_STAT_TYPE":                           0,
		"FIGHT_PROP_DEFENSE_PERCENT":                  1,
		"FIGHT_PROP_DEFENSE":                          2,
		"FIGHT_PROP_HP":                               3,
		"FIGHT_PROP_HP_PERCENT":                       4,
		"FIGHT_PROP_ATTACK":                           5,
		"FIGHT_PROP_ATTACK_PERCENT":                   6,
		"FIGHT_PROP_CHARGE_EFFICIENCY":                7,
		"FIGHT_PROP_ELEMENT_MASTERY":                  8,
		"FIGHT_PROP_CRITICAL":                         9,
		"FIGHT_PROP_CRITICAL_HURT":                    10,
		"FIGHT_PROP_HEAL":                             11,
		"FIGHT_PROP_FIRE_ADD_HURT":                    12,
		"FIGHT_PROP_WATER_ADD_HURT":                   13,
		"FIGHT_PROP_GRASS_ADD_HURT":                   14,
		"FIGHT_PROP_ELEC_ADD_HURT":                    15,
		"FIGHT_PROP_WIND_ADD_HURT":                    16,
		"FIGHT_PROP_ICE_ADD_HURT":                     17,
		"FIGHT_PROP_ROCK_ADD_HURT":                    18,
		"FIGHT_PROP_PHYSICAL_ADD_HURT":                19,
		"FIGHT_PROP_SHIELD_COST_MINUS_RATIO_ADD_HURT": 20,
		"FIGHT_PROP_HEALED_ADD":                       21,
		"FIGHT_PROP_BASE_HP":                          22,
		"FIGHT_PROP_BASE_ATTACK":                      23,
		"FIGHT_PROP_BASE_DEFENSE":                     24,
		"FIGHT_PROP_MAX_HP":                           25,
	}
)

func (x StatType) Enum() *StatType {
	p := new(StatType)
	*p = x
	return p
}

func (x StatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatType) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[7].Descriptor()
}

func (StatType) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[7]
}

func (x StatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatType.Descriptor instead.
func (StatType) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{7}
}

type SimMode int32

const (
	SimMode_INVALID_SIM_MODE SimMode = 0
	SimMode_DURATION_MODE    SimMode = 1
	SimMode_TTK_MODE         SimMode = 2
)

// Enum value maps for SimMode.
var (
	SimMode_name = map[int32]string{
		0: "INVALID_SIM_MODE",
		1: "DURATION_MODE",
		2: "TTK_MODE",
	}
	SimMode_value = map[string]int32{
		"INVALID_SIM_MODE": 0,
		"DURATION_MODE":    1,
		"TTK_MODE":         2,
	}
)

func (x SimMode) Enum() *SimMode {
	p := new(SimMode)
	*p = x
	return p
}

func (x SimMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SimMode) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[8].Descriptor()
}

func (SimMode) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[8]
}

func (x SimMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SimMode.Descriptor instead.
func (SimMode) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{8}
}

type ComputeWorkSource int32

const (
	ComputeWorkSource_InvalidWork    ComputeWorkSource = 0
	ComputeWorkSource_DBWork         ComputeWorkSource = 1
	ComputeWorkSource_SubmissionWork ComputeWorkSource = 2
)

// Enum value maps for ComputeWorkSource.
var (
	ComputeWorkSource_name = map[int32]string{
		0: "InvalidWork",
		1: "DBWork",
		2: "SubmissionWork",
	}
	ComputeWorkSource_value = map[string]int32{
		"InvalidWork":    0,
		"DBWork":         1,
		"SubmissionWork": 2,
	}
)

func (x ComputeWorkSource) Enum() *ComputeWorkSource {
	p := new(ComputeWorkSource)
	*p = x
	return p
}

func (x ComputeWorkSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ComputeWorkSource) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[9].Descriptor()
}

func (ComputeWorkSource) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[9]
}

func (x ComputeWorkSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ComputeWorkSource.Descriptor instead.
func (ComputeWorkSource) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{9}
}

type DBTag int32

const (
	DBTag_DB_TAG_INVALID          DBTag = 0
	DBTag_DB_TAG_GCSIM            DBTag = 1
	DBTag_DB_TAG_TESTING          DBTag = 2
	DBTag_DB_TAG_KQM_GUIDE        DBTag = 3
	DBTag_DB_TAG_GEO_SIMPS        DBTag = 4
	DBTag_DB_TAG_ITTO_SIMPS       DBTag = 5
	DBTag_DB_TAG_RANDOM_DELAYS    DBTag = 6
	DBTag_DB_TAG_ADMIN_DO_NOT_USE DBTag = 99999999
)

// Enum value maps for DBTag.
var (
	DBTag_name = map[int32]string{
		0:        "DB_TAG_INVALID",
		1:        "DB_TAG_GCSIM",
		2:        "DB_TAG_TESTING",
		3:        "DB_TAG_KQM_GUIDE",
		4:        "DB_TAG_GEO_SIMPS",
		5:        "DB_TAG_ITTO_SIMPS",
		6:        "DB_TAG_RANDOM_DELAYS",
		99999999: "DB_TAG_ADMIN_DO_NOT_USE",
	}
	DBTag_value = map[string]int32{
		"DB_TAG_INVALID":          0,
		"DB_TAG_GCSIM":            1,
		"DB_TAG_TESTING":          2,
		"DB_TAG_KQM_GUIDE":        3,
		"DB_TAG_GEO_SIMPS":        4,
		"DB_TAG_ITTO_SIMPS":       5,
		"DB_TAG_RANDOM_DELAYS":    6,
		"DB_TAG_ADMIN_DO_NOT_USE": 99999999,
	}
)

func (x DBTag) Enum() *DBTag {
	p := new(DBTag)
	*p = x
	return p
}

func (x DBTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DBTag) Descriptor() protoreflect.EnumDescriptor {
	return file_protos_model_enums_proto_enumTypes[10].Descriptor()
}

func (DBTag) Type() protoreflect.EnumType {
	return &file_protos_model_enums_proto_enumTypes[10]
}

func (x DBTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DBTag.Descriptor instead.
func (DBTag) EnumDescriptor() ([]byte, []int) {
	return file_protos_model_enums_proto_rawDescGZIP(), []int{10}
}

var File_protos_model_enums_proto protoreflect.FileDescriptor

var file_protos_model_enums_proto_rawDesc = []byte{
	0x0a, 0x18, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65,
	0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x2a, 0x8b, 0x01, 0x0a, 0x0f, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x43, 0x75, 0x72, 0x76,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x41, 0x56, 0x41, 0x54, 0x41, 0x52, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x10, 0x00, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x48, 0x50,
	0x5f, 0x53, 0x34, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x34, 0x10, 0x02, 0x12,
	0x14, 0x0a, 0x10, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x48, 0x50,
	0x5f, 0x53, 0x35, 0x10, 0x03, 0x12, 0x18, 0x0a, 0x14, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x53, 0x35, 0x10, 0x04, 0x2a,
	0x66, 0x0a, 0x0b, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x54, 0x59, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x53, 0x50, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x4f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x50,
	0x55, 0x52, 0x50, 0x4c, 0x45, 0x10, 0x04, 0x2a, 0x97, 0x04, 0x0a, 0x0f, 0x57, 0x65, 0x61, 0x70,
	0x6f, 0x6e, 0x43, 0x75, 0x72, 0x76, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x49,
	0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x30, 0x31, 0x10, 0x01,
	0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x30, 0x32, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x47,
	0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b,
	0x5f, 0x31, 0x30, 0x33, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43,
	0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x30, 0x34, 0x10,
	0x04, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f,
	0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x31, 0x30, 0x35, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49,
	0x43, 0x41, 0x4c, 0x5f, 0x31, 0x30, 0x31, 0x10, 0x06, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f,
	0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x32,
	0x30, 0x31, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52,
	0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x32, 0x30, 0x32, 0x10, 0x08, 0x12,
	0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54,
	0x54, 0x41, 0x43, 0x4b, 0x5f, 0x32, 0x30, 0x33, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52,
	0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f,
	0x32, 0x30, 0x34, 0x10, 0x0a, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55,
	0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x32, 0x30, 0x35, 0x10, 0x0b,
	0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x43,
	0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x32, 0x30, 0x31, 0x10, 0x0c, 0x12, 0x19, 0x0a,
	0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41,
	0x43, 0x4b, 0x5f, 0x33, 0x30, 0x31, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57,
	0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x33, 0x30,
	0x32, 0x10, 0x0e, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56,
	0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x33, 0x30, 0x33, 0x10, 0x0f, 0x12, 0x19,
	0x0a, 0x15, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x5f, 0x33, 0x30, 0x34, 0x10, 0x10, 0x12, 0x19, 0x0a, 0x15, 0x47, 0x52, 0x4f,
	0x57, 0x5f, 0x43, 0x55, 0x52, 0x56, 0x45, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x33,
	0x30, 0x35, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x52, 0x4f, 0x57, 0x5f, 0x43, 0x55, 0x52,
	0x56, 0x45, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x33, 0x30, 0x31, 0x10,
	0x12, 0x2a, 0x8d, 0x01, 0x0a, 0x0b, 0x57, 0x65, 0x61, 0x70, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x14, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x57, 0x45, 0x41,
	0x50, 0x4f, 0x4e, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x10, 0x00, 0x12, 0x19, 0x0a, 0x15, 0x57,
	0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x53, 0x57, 0x4f, 0x52, 0x44, 0x5f, 0x4f, 0x4e, 0x45, 0x5f,
	0x48, 0x41, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e,
	0x5f, 0x43, 0x4c, 0x41, 0x59, 0x4d, 0x4f, 0x52, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x57,
	0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x50, 0x4f, 0x4c, 0x45, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x42, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f,
	0x57, 0x45, 0x41, 0x50, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x41, 0x4c, 0x59, 0x53, 0x54, 0x10,
	0x05, 0x2a, 0x7d, 0x0a, 0x08, 0x42, 0x6f, 0x64, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x42,
	0x4f, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x47, 0x49, 0x52,
	0x4c, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x4d, 0x41, 0x4c, 0x45,
	0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x4c, 0x41, 0x44, 0x59, 0x10,
	0x05, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x4f, 0x44, 0x59, 0x5f, 0x4c, 0x4f, 0x4c, 0x49, 0x10, 0x06,
	0x2a, 0xdf, 0x01, 0x0a, 0x08, 0x5a, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a,
	0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14,
	0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x4f, 0x4e, 0x44, 0x53,
	0x54, 0x41, 0x44, 0x54, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4c, 0x49, 0x59, 0x55, 0x45, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12,
	0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x41, 0x5a, 0x55,
	0x4d, 0x41, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x55, 0x4d, 0x45, 0x52, 0x55, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x46, 0x41, 0x54, 0x55, 0x49, 0x10,
	0x06, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x53, 0x53, 0x4f, 0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x52, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x53, 0x53, 0x4f,
	0x43, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x41, 0x43, 0x54, 0x4f, 0x52,
	0x10, 0x08, 0x2a, 0xcf, 0x01, 0x0a, 0x07, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x13,
	0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x69, 0x63, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x69, 0x72, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x63, 0x65, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x65, 0x72, 0x10, 0x04, 0x12,
	0x09, 0x0a, 0x05, 0x47, 0x72, 0x61, 0x73, 0x73, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x4c,
	0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x51, 0x55, 0x49, 0x43, 0x4b, 0x45, 0x4e, 0x10, 0x06, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x5a, 0x45,
	0x4e, 0x10, 0x07, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x69, 0x6e, 0x64, 0x10, 0x08, 0x12, 0x08, 0x0a,
	0x04, 0x52, 0x6f, 0x63, 0x6b, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x4c, 0x45, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x45, 0x4c, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x0b, 0x12,
	0x13, 0x0a, 0x0f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f,
	0x57, 0x4e, 0x10, 0x0c, 0x2a, 0xf4, 0x05, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x02,
	0x12, 0x11, 0x0a, 0x0d, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x48,
	0x50, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x5f, 0x48, 0x50, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54,
	0x41, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x41, 0x54, 0x54, 0x41, 0x43, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x06, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x47, 0x45, 0x5f, 0x45, 0x46, 0x46, 0x49, 0x43, 0x49,
	0x45, 0x4e, 0x43, 0x59, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x4c, 0x45, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4d, 0x41, 0x53,
	0x54, 0x45, 0x52, 0x59, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f,
	0x50, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x52, 0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x10, 0x09, 0x12,
	0x1c, 0x0a, 0x18, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x43, 0x52,
	0x49, 0x54, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x4c,
	0x10, 0x0b, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50,
	0x5f, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0c,
	0x12, 0x1d, 0x0a, 0x19, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0d, 0x12,
	0x1d, 0x0a, 0x19, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x47, 0x52,
	0x41, 0x53, 0x53, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0e, 0x12, 0x1c,
	0x0a, 0x18, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x45, 0x4c, 0x45,
	0x43, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18,
	0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x5f,
	0x41, 0x44, 0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49,
	0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x49, 0x43, 0x45, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x11, 0x12, 0x1c, 0x0a, 0x18, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x52, 0x4f, 0x43, 0x4b, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x48,
	0x55, 0x52, 0x54, 0x10, 0x12, 0x12, 0x20, 0x0a, 0x1c, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50,
	0x52, 0x4f, 0x50, 0x5f, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x41, 0x44, 0x44,
	0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x13, 0x12, 0x2f, 0x0a, 0x2b, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x43, 0x4f, 0x53,
	0x54, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x5f, 0x41, 0x44,
	0x44, 0x5f, 0x48, 0x55, 0x52, 0x54, 0x10, 0x14, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x49, 0x47, 0x48,
	0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x48, 0x45, 0x41, 0x4c, 0x45, 0x44, 0x5f, 0x41, 0x44,
	0x44, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f,
	0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x48, 0x50, 0x10, 0x16, 0x12, 0x1a, 0x0a, 0x16, 0x46,
	0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x41,
	0x54, 0x54, 0x41, 0x43, 0x4b, 0x10, 0x17, 0x12, 0x1b, 0x0a, 0x17, 0x46, 0x49, 0x47, 0x48, 0x54,
	0x5f, 0x50, 0x52, 0x4f, 0x50, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x4e,
	0x53, 0x45, 0x10, 0x18, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x50, 0x52,
	0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x48, 0x50, 0x10, 0x19, 0x2a, 0x40, 0x0a, 0x07, 0x53,
	0x69, 0x6d, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x5f, 0x53, 0x49, 0x4d, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x55, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x54, 0x54, 0x4b, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x2a, 0x44, 0x0a,
	0x11, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x57, 0x6f, 0x72,
	0x6b, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x42, 0x57, 0x6f, 0x72, 0x6b, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x57, 0x6f, 0x72,
	0x6b, 0x10, 0x02, 0x2a, 0xbe, 0x01, 0x0a, 0x05, 0x44, 0x42, 0x54, 0x61, 0x67, 0x12, 0x12, 0x0a,
	0x0e, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x47, 0x43, 0x53, 0x49,
	0x4d, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x42, 0x5f, 0x54, 0x41,
	0x47, 0x5f, 0x4b, 0x51, 0x4d, 0x5f, 0x47, 0x55, 0x49, 0x44, 0x45, 0x10, 0x03, 0x12, 0x14, 0x0a,
	0x10, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x53, 0x49, 0x4d, 0x50,
	0x53, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x49, 0x54,
	0x54, 0x4f, 0x5f, 0x53, 0x49, 0x4d, 0x50, 0x53, 0x10, 0x05, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x42,
	0x5f, 0x54, 0x41, 0x47, 0x5f, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x4c, 0x41,
	0x59, 0x53, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x17, 0x44, 0x42, 0x5f, 0x54, 0x41, 0x47, 0x5f, 0x41,
	0x44, 0x4d, 0x49, 0x4e, 0x5f, 0x44, 0x4f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x55, 0x53, 0x45, 0x10,
	0xff, 0xc1, 0xd7, 0x2f, 0x42, 0x27, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x67, 0x65, 0x6e, 0x73, 0x68, 0x69, 0x6e, 0x73, 0x69, 0x6d, 0x2f, 0x67, 0x63,
	0x73, 0x69, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_protos_model_enums_proto_rawDescOnce sync.Once
	file_protos_model_enums_proto_rawDescData = file_protos_model_enums_proto_rawDesc
)

func file_protos_model_enums_proto_rawDescGZIP() []byte {
	file_protos_model_enums_proto_rawDescOnce.Do(func() {
		file_protos_model_enums_proto_rawDescData = protoimpl.X.CompressGZIP(file_protos_model_enums_proto_rawDescData)
	})
	return file_protos_model_enums_proto_rawDescData
}

var file_protos_model_enums_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_protos_model_enums_proto_goTypes = []interface{}{
	(AvatarCurveType)(0),   // 0: model.AvatarCurveType
	(QualityType)(0),       // 1: model.QualityType
	(WeaponCurveType)(0),   // 2: model.WeaponCurveType
	(WeaponClass)(0),       // 3: model.WeaponClass
	(BodyType)(0),          // 4: model.BodyType
	(ZoneType)(0),          // 5: model.ZoneType
	(Element)(0),           // 6: model.Element
	(StatType)(0),          // 7: model.StatType
	(SimMode)(0),           // 8: model.SimMode
	(ComputeWorkSource)(0), // 9: model.ComputeWorkSource
	(DBTag)(0),             // 10: model.DBTag
}
var file_protos_model_enums_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_protos_model_enums_proto_init() }
func file_protos_model_enums_proto_init() {
	if File_protos_model_enums_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_protos_model_enums_proto_rawDesc,
			NumEnums:      11,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_protos_model_enums_proto_goTypes,
		DependencyIndexes: file_protos_model_enums_proto_depIdxs,
		EnumInfos:         file_protos_model_enums_proto_enumTypes,
	}.Build()
	File_protos_model_enums_proto = out.File
	file_protos_model_enums_proto_rawDesc = nil
	file_protos_model_enums_proto_goTypes = nil
	file_protos_model_enums_proto_depIdxs = nil
}
