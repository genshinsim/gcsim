// Code generated by "enumer -type=AttackTag"; DO NOT EDIT.

package attacks

import (
	"fmt"
)

const _AttackTagName = "AttackTagNoneAttackTagNormalAttackTagExtraAttackTagPlungeAttackTagElementalArtAttackTagElementalArtHoldAttackTagElementalBurstAttackTagWeaponSkillAttackTagMonaBubbleBreakAttackTagNoneStatReactionAttackDelimAttackTagOverloadDamageAttackTagSuperconductDamageAttackTagECDamageAttackTagShatterAttackTagSwirlPyroAttackTagSwirlHydroAttackTagSwirlCryoAttackTagSwirlElectroAttackTagBurningDamageAttackTagBloomAttackTagBountifulCoreAttackTagBurgeonAttackTagHyperbloomAttackTagLength"

var _AttackTagIndex = [...]uint16{0, 13, 28, 42, 57, 78, 103, 126, 146, 170, 187, 206, 229, 256, 273, 289, 307, 326, 344, 365, 387, 401, 423, 439, 458, 473}

func (i AttackTag) String() string {
	if i < 0 || i >= AttackTag(len(_AttackTagIndex)-1) {
		return fmt.Sprintf("AttackTag(%d)", i)
	}
	return _AttackTagName[_AttackTagIndex[i]:_AttackTagIndex[i+1]]
}

var _AttackTagValues = []AttackTag{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24}

var _AttackTagNameToValueMap = map[string]AttackTag{
	_AttackTagName[0:13]:    0,
	_AttackTagName[13:28]:   1,
	_AttackTagName[28:42]:   2,
	_AttackTagName[42:57]:   3,
	_AttackTagName[57:78]:   4,
	_AttackTagName[78:103]:  5,
	_AttackTagName[103:126]: 6,
	_AttackTagName[126:146]: 7,
	_AttackTagName[146:170]: 8,
	_AttackTagName[170:187]: 9,
	_AttackTagName[187:206]: 10,
	_AttackTagName[206:229]: 11,
	_AttackTagName[229:256]: 12,
	_AttackTagName[256:273]: 13,
	_AttackTagName[273:289]: 14,
	_AttackTagName[289:307]: 15,
	_AttackTagName[307:326]: 16,
	_AttackTagName[326:344]: 17,
	_AttackTagName[344:365]: 18,
	_AttackTagName[365:387]: 19,
	_AttackTagName[387:401]: 20,
	_AttackTagName[401:423]: 21,
	_AttackTagName[423:439]: 22,
	_AttackTagName[439:458]: 23,
	_AttackTagName[458:473]: 24,
}

// AttackTagString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AttackTagString(s string) (AttackTag, error) {
	if val, ok := _AttackTagNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AttackTag values", s)
}

// AttackTagValues returns all values of the enum
func AttackTagValues() []AttackTag {
	return _AttackTagValues
}

// IsAAttackTag returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AttackTag) IsAAttackTag() bool {
	for _, v := range _AttackTagValues {
		if i == v {
			return true
		}
	}
	return false
}
