// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package glog

import (
	json "encoding/json"

	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog(in *jlexer.Lexer, out *keyVal) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.UnsafeString())
		case "val":
			if m, ok := out.Val.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Val.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Val = in.Interface()
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog(out *jwriter.Writer, in keyVal) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"val\":"
		out.RawString(prefix)
		if m, ok := in.Val.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Val.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Val))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v keyVal) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v keyVal) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *keyVal) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *keyVal) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog(l, v)
}
func easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog1(in *jlexer.Lexer, out *LogEvent) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "event":
			out.Event = Source(LogSourceFromString[in.String()])
		case "frame":
			out.Frame = int(in.Int())
		case "ended":
			out.Ended = int(in.Int())
		case "char_index":
			out.CharIndex = int(in.Int())
		case "msg":
			out.Msg = string(in.UnsafeString())
		case "logs":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Logs = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v1 interface{}
					if m, ok := v1.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v1.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v1 = in.Interface()
					}
					(out.Logs)[key] = v1
					in.WantComma()
				}
				in.Delim('}')
			}
		case "ordering":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Ordering = make(map[string]int)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v2 int
					v2 = int(in.Int())
					(out.Ordering)[key] = v2
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog1(out *jwriter.Writer, in LogEvent) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"event\":"
		out.RawString(prefix[1:])
		out.String(in.Event.String())
	}
	{
		const prefix string = ",\"frame\":"
		out.RawString(prefix)
		out.Int(int(in.Frame))
	}
	{
		const prefix string = ",\"ended\":"
		out.RawString(prefix)
		out.Int(int(in.Ended))
	}
	{
		const prefix string = ",\"char_index\":"
		out.RawString(prefix)
		out.Int(int(in.CharIndex))
	}
	{
		const prefix string = ",\"msg\":"
		out.RawString(prefix)
		out.String(string(in.Msg))
	}
	{
		const prefix string = ",\"logs\":"
		out.RawString(prefix)
		if in.Logs == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v3First := true
			for v3Name, v3Value := range in.Logs {
				if v3First {
					v3First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v3Name))
				out.RawByte(':')
				if m, ok := v3Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v3Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v3Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"ordering\":"
		out.RawString(prefix)
		if in.Ordering == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v4First := true
			for v4Name, v4Value := range in.Ordering {
				if v4First {
					v4First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v4Name))
				out.RawByte(':')
				out.Int(int(v4Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LogEvent) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LogEvent) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LogEvent) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LogEvent) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog1(l, v)
}
func easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog2(in *jlexer.Lexer, out *EventArr) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(EventArr, 0, 8)
			} else {
				*out = EventArr{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v5 *LogEvent
			if in.IsNull() {
				in.Skip()
				v5 = nil
			} else {
				if v5 == nil {
					v5 = new(LogEvent)
				}
				(*v5).UnmarshalEasyJSON(in)
			}
			*out = append(*out, v5)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog2(out *jwriter.Writer, in EventArr) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v6, v7 := range in {
			if v6 > 0 {
				out.RawByte(',')
			}
			if v7 == nil {
				out.RawString("null")
			} else {
				(*v7).MarshalEasyJSON(out)
			}
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v EventArr) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EventArr) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EventArr) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EventArr) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog2(l, v)
}
func easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog3(in *jlexer.Lexer, out *Ctrl) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog3(out *jwriter.Writer, in Ctrl) {
	out.RawByte('{')
	first := true
	_ = first
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Ctrl) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ctrl) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson22b64118EncodeGithubComGenshinsimGcsimPkgCoreGlog3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ctrl) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ctrl) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson22b64118DecodeGithubComGenshinsimGcsimPkgCoreGlog3(l, v)
}
