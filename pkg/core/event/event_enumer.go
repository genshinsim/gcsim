// Code generated by "enumer -type=Event"; DO NOT EDIT.

package event

import (
	"fmt"
)

const _EventName = "OnEnemyHitOnPlayerHitOnGadgetHitOnEnemyDamageOnGadgetDamageOnApplyAttackOnAuraDurabilityAddedOnAuraDurabilityDepletedReactionEventStartDelimOnOverloadOnSuperconductOnMeltOnVaporizeOnFrozenOnElectroChargedOnSwirlHydroOnSwirlCryoOnSwirlElectroOnSwirlPyroOnCrystallizeHydroOnCrystallizeCryoOnCrystallizeElectroOnCrystallizePyroOnAggravateOnSpreadOnQuickenOnBloomOnHyperbloomOnBurgeonOnBurningOnShatterReactionEventEndDelimOnDendroCoreOnStamUseOnShieldedOnShieldBreakOnConstructSpawnedOnCharacterSwapOnParticleReceivedOnEnergyChangeOnTargetDiedOnTargetMovedOnCharacterHitOnCharacterHurtOnHPDebtOnHealOnPlayerPreHPDrainOnPlayerHPDrainOnNightsoulBurstOnNightsoulGenerateOnNightsoulConsumeOnActionFailedOnActionExecOnSkillOnBurstOnAttackOnChargeAttackOnPlungeOnAimShootOnDashOnInitializeOnStateChangeOnEnemyAddedOnTickOnSimEndedSuccessfullyEndEventTypes"

var _EventIndex = [...]uint16{0, 10, 21, 32, 45, 59, 72, 93, 117, 140, 150, 164, 170, 180, 188, 204, 216, 227, 241, 252, 270, 287, 307, 324, 335, 343, 352, 359, 371, 380, 389, 398, 419, 431, 440, 450, 463, 481, 496, 514, 528, 540, 553, 567, 582, 590, 596, 614, 629, 645, 664, 682, 696, 708, 715, 722, 730, 744, 752, 762, 768, 780, 793, 805, 811, 833, 846}

func (i Event) String() string {
	if i < 0 || i >= Event(len(_EventIndex)-1) {
		return fmt.Sprintf("Event(%d)", i)
	}
	return _EventName[_EventIndex[i]:_EventIndex[i+1]]
}

var _EventValues = []Event{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65}

var _EventNameToValueMap = map[string]Event{
	_EventName[0:10]:    0,
	_EventName[10:21]:   1,
	_EventName[21:32]:   2,
	_EventName[32:45]:   3,
	_EventName[45:59]:   4,
	_EventName[59:72]:   5,
	_EventName[72:93]:   6,
	_EventName[93:117]:  7,
	_EventName[117:140]: 8,
	_EventName[140:150]: 9,
	_EventName[150:164]: 10,
	_EventName[164:170]: 11,
	_EventName[170:180]: 12,
	_EventName[180:188]: 13,
	_EventName[188:204]: 14,
	_EventName[204:216]: 15,
	_EventName[216:227]: 16,
	_EventName[227:241]: 17,
	_EventName[241:252]: 18,
	_EventName[252:270]: 19,
	_EventName[270:287]: 20,
	_EventName[287:307]: 21,
	_EventName[307:324]: 22,
	_EventName[324:335]: 23,
	_EventName[335:343]: 24,
	_EventName[343:352]: 25,
	_EventName[352:359]: 26,
	_EventName[359:371]: 27,
	_EventName[371:380]: 28,
	_EventName[380:389]: 29,
	_EventName[389:398]: 30,
	_EventName[398:419]: 31,
	_EventName[419:431]: 32,
	_EventName[431:440]: 33,
	_EventName[440:450]: 34,
	_EventName[450:463]: 35,
	_EventName[463:481]: 36,
	_EventName[481:496]: 37,
	_EventName[496:514]: 38,
	_EventName[514:528]: 39,
	_EventName[528:540]: 40,
	_EventName[540:553]: 41,
	_EventName[553:567]: 42,
	_EventName[567:582]: 43,
	_EventName[582:590]: 44,
	_EventName[590:596]: 45,
	_EventName[596:614]: 46,
	_EventName[614:629]: 47,
	_EventName[629:645]: 48,
	_EventName[645:664]: 49,
	_EventName[664:682]: 50,
	_EventName[682:696]: 51,
	_EventName[696:708]: 52,
	_EventName[708:715]: 53,
	_EventName[715:722]: 54,
	_EventName[722:730]: 55,
	_EventName[730:744]: 56,
	_EventName[744:752]: 57,
	_EventName[752:762]: 58,
	_EventName[762:768]: 59,
	_EventName[768:780]: 60,
	_EventName[780:793]: 61,
	_EventName[793:805]: 62,
	_EventName[805:811]: 63,
	_EventName[811:833]: 64,
	_EventName[833:846]: 65,
}

// EventString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EventString(s string) (Event, error) {
	if val, ok := _EventNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to Event values", s)
}

// EventValues returns all values of the enum
func EventValues() []Event {
	return _EventValues
}

// IsAEvent returns "true" if the value is listed in the enum definition. "false" otherwise
func (i Event) IsAEvent() bool {
	for _, v := range _EventValues {
		if i == v {
			return true
		}
	}
	return false
}
