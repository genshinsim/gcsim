syntax = "proto3";
package model;
option go_package="github.com/genshinsim/gcsim/pkg/model";

import "protos/model/result.proto";
import "protos/model/sim.proto";
import "google/protobuf/struct.proto";

message DBEntry {
    //basic info
    string id = 1 [json_name="_id"];
    string share_key = 2 [json_name="share_key"];
    uint64 create_date = 3 [json_name="create_date"];
    uint64 run_date = 4 [json_name="run_date"];
    DescriptiveStats sim_duration = 5 [json_name="sim_duration"];
    string config = 6 [json_name="config"];
    string hash = 7 [json_name="hash"];
    SimMode mode = 8 [json_name="mode"];
    

    //indexing data
    model.DescriptiveStats total_damage = 9 [json_name="total_damage"];
    repeated string char_names = 10 [json_name="char_names"];
    int32 target_count = 11 [json_name="target_count"];
    double mean_dps_per_target = 12 [json_name="mean_dps_per_target"];

    //detailed results
    repeated model.Character team = 13 [json_name="team"];
    map<string, model.DescriptiveStats> dps_by_target = 14 [json_name="dps_by_target"];

    //other stuff
    string description = 15 [json_name="description"];
    repeated DBTag accepted_tags = 16 [json_name="accepted_tags"];
    repeated DBTag rejected_tags = 17 [json_name="rejected_tags"];
    bool is_db_valid = 18 [json_name="is_db_valid"];
    string submitter = 19 [json_name="submitter"];
}

message DBEntries {
    repeated DBEntry data = 1 [json_name="data"];
}

message DBQueryOpt {
    google.protobuf.Struct query = 1;
    google.protobuf.Struct sort = 2;
    google.protobuf.Struct project = 3;
    int64 skip = 4;
    int64 limit = 5;
}

message Submission {
    string id = 1 [json_name="_id"]; // auto generated id for this submission
    string config = 2;
    string submitter = 3; //submitter discord id 
    string description = 4;
}

message ComputeWork {
    string id = 1 [json_name="_id"];
    string config = 2 [json_name="config"];
    ComputeWorkSource source = 3 [json_name="source"];
    int32 iterations = 4 [json_name="iterations"];
}

enum ComputeWorkSource {
    InvalidWork = 0;
    DBWork = 1;
    SubmissionWork = 2;
}

enum DBTag {
    TAG_INVALID = 0;
    TAG_GCSIM = 1;
    TAG_TESTING = 2;
}