name: deployment build
on:
  workflow_dispatch:
  push:
    tags:
    - "v[0-9]+.[0-9]+.[0-9]+"
    branches:
    - "feature**"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Extract Branch Name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      # setup + test go and yarn
      - uses: actions/checkout@v3
      - name: go-setup-and-test
        uses: ./.github/actions/go-setup-and-test
      - name: yarn-setup-and-test
        uses: ./.github/actions/yarn-setup-and-test

      # deploy
      - name: deploy-binary
        uses: ./.github/actions/deploy-binary
        with:
          shareKey: ${{ secrets.AES_KEY }}
      - name: deploy-ui
        uses: ./.github/actions/deploy-ui
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          # name needs to be "main" if on mainline
          branch: ${{ steps.extract_branch.outputs.branch == 'mainline' && 'main' || steps.extract_branch.outputs.branch }}
      - name: deploy-db
        uses: ./.github/actions/deploy-db
        with:
          apiToken: ${{ secrets.CF_API_TOKEN }}
          accountId: ${{ secrets.CF_ACCOUNT_ID }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}
          # name needs to be "main" if on mainline
          branch: ${{ steps.extract_branch.outputs.branch == 'mainline' && 'main' || steps.extract_branch.outputs.branch }}
      - name: deploy-wasm
        uses: ./.github/actions/deploy-wasm
        with:
          rcloneConfig: ${{ secrets.CF_RCLONE }}
          branch: ${{ steps.extract_branch.outputs.branch }}
          shareKey: ${{ secrets.AES_KEY }}
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: deploy-backend
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.GCSIMVPS_HOST }}
          username: ${{ secrets.GCSIMVPS_USERNAME }}
          key: ${{ secrets.GCSIMVPS_KEY }}
          passphrase: ${{ secrets.GCSIMVPS_PASSPHRASE }} 
          port: ${{ secrets.GCSIMVPS_PORT }}
          script: whoami 
