// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/backend/submission.proto

package submission

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SubmissionStoreClient is the client API for SubmissionStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SubmissionStoreClient interface {
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error)
	DeletePending(ctx context.Context, in *DeletePendingRequest, opts ...grpc.CallOption) (*DeletePendingResponse, error)
	CompletePending(ctx context.Context, in *CompletePendingRequest, opts ...grpc.CallOption) (*CompletePendingResponse, error)
	GetWork(ctx context.Context, in *GetWorkRequest, opts ...grpc.CallOption) (*GetWorkResponse, error)
}

type submissionStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewSubmissionStoreClient(cc grpc.ClientConnInterface) SubmissionStoreClient {
	return &submissionStoreClient{cc}
}

func (c *submissionStoreClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*SubmitResponse, error) {
	out := new(SubmitResponse)
	err := c.cc.Invoke(ctx, "/submission.SubmissionStore/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionStoreClient) DeletePending(ctx context.Context, in *DeletePendingRequest, opts ...grpc.CallOption) (*DeletePendingResponse, error) {
	out := new(DeletePendingResponse)
	err := c.cc.Invoke(ctx, "/submission.SubmissionStore/DeletePending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionStoreClient) CompletePending(ctx context.Context, in *CompletePendingRequest, opts ...grpc.CallOption) (*CompletePendingResponse, error) {
	out := new(CompletePendingResponse)
	err := c.cc.Invoke(ctx, "/submission.SubmissionStore/CompletePending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *submissionStoreClient) GetWork(ctx context.Context, in *GetWorkRequest, opts ...grpc.CallOption) (*GetWorkResponse, error) {
	out := new(GetWorkResponse)
	err := c.cc.Invoke(ctx, "/submission.SubmissionStore/GetWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubmissionStoreServer is the server API for SubmissionStore service.
// All implementations must embed UnimplementedSubmissionStoreServer
// for forward compatibility
type SubmissionStoreServer interface {
	Submit(context.Context, *SubmitRequest) (*SubmitResponse, error)
	DeletePending(context.Context, *DeletePendingRequest) (*DeletePendingResponse, error)
	CompletePending(context.Context, *CompletePendingRequest) (*CompletePendingResponse, error)
	GetWork(context.Context, *GetWorkRequest) (*GetWorkResponse, error)
	mustEmbedUnimplementedSubmissionStoreServer()
}

// UnimplementedSubmissionStoreServer must be embedded to have forward compatible implementations.
type UnimplementedSubmissionStoreServer struct {
}

func (UnimplementedSubmissionStoreServer) Submit(context.Context, *SubmitRequest) (*SubmitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}
func (UnimplementedSubmissionStoreServer) DeletePending(context.Context, *DeletePendingRequest) (*DeletePendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePending not implemented")
}
func (UnimplementedSubmissionStoreServer) CompletePending(context.Context, *CompletePendingRequest) (*CompletePendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompletePending not implemented")
}
func (UnimplementedSubmissionStoreServer) GetWork(context.Context, *GetWorkRequest) (*GetWorkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWork not implemented")
}
func (UnimplementedSubmissionStoreServer) mustEmbedUnimplementedSubmissionStoreServer() {}

// UnsafeSubmissionStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SubmissionStoreServer will
// result in compilation errors.
type UnsafeSubmissionStoreServer interface {
	mustEmbedUnimplementedSubmissionStoreServer()
}

func RegisterSubmissionStoreServer(s grpc.ServiceRegistrar, srv SubmissionStoreServer) {
	s.RegisterService(&SubmissionStore_ServiceDesc, srv)
}

func _SubmissionStore_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionStoreServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submission.SubmissionStore/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionStoreServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionStore_DeletePending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionStoreServer).DeletePending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submission.SubmissionStore/DeletePending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionStoreServer).DeletePending(ctx, req.(*DeletePendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionStore_CompletePending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletePendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionStoreServer).CompletePending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submission.SubmissionStore/CompletePending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionStoreServer).CompletePending(ctx, req.(*CompletePendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubmissionStore_GetWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubmissionStoreServer).GetWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/submission.SubmissionStore/GetWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubmissionStoreServer).GetWork(ctx, req.(*GetWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SubmissionStore_ServiceDesc is the grpc.ServiceDesc for SubmissionStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SubmissionStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "submission.SubmissionStore",
	HandlerType: (*SubmissionStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _SubmissionStore_Submit_Handler,
		},
		{
			MethodName: "DeletePending",
			Handler:    _SubmissionStore_DeletePending_Handler,
		},
		{
			MethodName: "CompletePending",
			Handler:    _SubmissionStore_CompletePending_Handler,
		},
		{
			MethodName: "GetWork",
			Handler:    _SubmissionStore_GetWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/backend/submission.proto",
}
