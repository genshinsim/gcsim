// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/backend/db.proto

package db

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DBStoreClient is the client API for DBStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DBStoreClient interface {
	// generic get for pulling from approved db
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	// internally create request; not exposed
	CreateOrUpdateDBEntry(ctx context.Context, in *CreateOrUpdateDBEntryRequest, opts ...grpc.CallOption) (*CreateOrUpdateDBEntryResponse, error)
	// for compute work
	GetComputeWork(ctx context.Context, in *GetComputeWorkRequest, opts ...grpc.CallOption) (*GetComputeWorkReponse, error)
}

type dBStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewDBStoreClient(cc grpc.ClientConnInterface) DBStoreClient {
	return &dBStoreClient{cc}
}

func (c *dBStoreClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/db.DBStore/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBStoreClient) CreateOrUpdateDBEntry(ctx context.Context, in *CreateOrUpdateDBEntryRequest, opts ...grpc.CallOption) (*CreateOrUpdateDBEntryResponse, error) {
	out := new(CreateOrUpdateDBEntryResponse)
	err := c.cc.Invoke(ctx, "/db.DBStore/CreateOrUpdateDBEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dBStoreClient) GetComputeWork(ctx context.Context, in *GetComputeWorkRequest, opts ...grpc.CallOption) (*GetComputeWorkReponse, error) {
	out := new(GetComputeWorkReponse)
	err := c.cc.Invoke(ctx, "/db.DBStore/GetComputeWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DBStoreServer is the server API for DBStore service.
// All implementations must embed UnimplementedDBStoreServer
// for forward compatibility
type DBStoreServer interface {
	// generic get for pulling from approved db
	Get(context.Context, *GetRequest) (*GetResponse, error)
	// internally create request; not exposed
	CreateOrUpdateDBEntry(context.Context, *CreateOrUpdateDBEntryRequest) (*CreateOrUpdateDBEntryResponse, error)
	// for compute work
	GetComputeWork(context.Context, *GetComputeWorkRequest) (*GetComputeWorkReponse, error)
	mustEmbedUnimplementedDBStoreServer()
}

// UnimplementedDBStoreServer must be embedded to have forward compatible implementations.
type UnimplementedDBStoreServer struct {
}

func (UnimplementedDBStoreServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDBStoreServer) CreateOrUpdateDBEntry(context.Context, *CreateOrUpdateDBEntryRequest) (*CreateOrUpdateDBEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdateDBEntry not implemented")
}
func (UnimplementedDBStoreServer) GetComputeWork(context.Context, *GetComputeWorkRequest) (*GetComputeWorkReponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetComputeWork not implemented")
}
func (UnimplementedDBStoreServer) mustEmbedUnimplementedDBStoreServer() {}

// UnsafeDBStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DBStoreServer will
// result in compilation errors.
type UnsafeDBStoreServer interface {
	mustEmbedUnimplementedDBStoreServer()
}

func RegisterDBStoreServer(s grpc.ServiceRegistrar, srv DBStoreServer) {
	s.RegisterService(&DBStore_ServiceDesc, srv)
}

func _DBStore_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBStoreServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.DBStore/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBStoreServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBStore_CreateOrUpdateDBEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateDBEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBStoreServer).CreateOrUpdateDBEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.DBStore/CreateOrUpdateDBEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBStoreServer).CreateOrUpdateDBEntry(ctx, req.(*CreateOrUpdateDBEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DBStore_GetComputeWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetComputeWorkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DBStoreServer).GetComputeWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/db.DBStore/GetComputeWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DBStoreServer).GetComputeWork(ctx, req.(*GetComputeWorkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DBStore_ServiceDesc is the grpc.ServiceDesc for DBStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DBStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "db.DBStore",
	HandlerType: (*DBStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _DBStore_Get_Handler,
		},
		{
			MethodName: "CreateOrUpdateDBEntry",
			Handler:    _DBStore_CreateOrUpdateDBEntry_Handler,
		},
		{
			MethodName: "GetComputeWork",
			Handler:    _DBStore_GetComputeWork_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/backend/db.proto",
}
